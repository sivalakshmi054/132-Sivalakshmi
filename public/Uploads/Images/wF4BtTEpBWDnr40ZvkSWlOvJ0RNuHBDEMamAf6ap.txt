    var EmpControllers = angular.module("EmpControllers", ['ngTable', 'smart-table', 'frapontillo.bootstrap-duallistbox', 'daypilot', 'angucomplete-alt', 'treestructure']);
    var baseUrl = $("base").first().attr("href");
    if (baseUrl == "/") {
        baseUrl = "";
    }
    EmpControllers.factory('rememberMe', function () {
        function fetchValue(name) {
            var gCookieVal = document.cookie.split("; ");
            for (var i = 0; i < gCookieVal.length; i++) {
                // a name/value pair (a crumb) is separated by an equal sign
                var gCrumb = gCookieVal[i].split("=");
                if (name === gCrumb[0]) {
                    var value = '';
                    try {
                        value = angular.fromJson(gCrumb[1]);
                    } catch (e) {
                        value = unescape(gCrumb[1]);
                    }
                    return value;
                }
            }
            // a cookie with the requested name does not exist
            return null;
        }
        
        return function (name, values) {
            if (arguments.length === 1) return fetchValue(name);
            var cookie = name + '=';
            if (typeof values === 'object') {
                var expires = '';
                cookie += (typeof values.value === 'object') ? angular.toJson(values.value) + ';' : values.value + ';';
                if (values.expires) {
                    var date = new Date();
                    date.setTime(date.getTime() + (values.expires * 24 * 60 * 60 * 1000));
                    expires = date.toGMTString();
                }
                cookie += (!values.session) ? 'expires=' + expires + ';' : '';
                cookie += (values.path) ? 'path=' + values.path + ';' : '';
                cookie += (values.secure) ? 'secure;' : '';
            } else {
                cookie += values + ';';
            }
            document.cookie = cookie;
        }
    });


    EmpControllers.controller("ParentController", ['$scope',
         function ($scope) {
             $scope.$on('$viewContentLoaded', function () {
                 angular.element(".date input").keydown(function (event) {
                    if (event.which != 46)
                        return false;
                });
             });
         }
    ]);



    EmpControllers.directive('stRatio', function () {
        return {
            link: function (scope, element, attr) {
                var ratio = +(attr.stRatio);

                element.css('width', ratio + '%');

            }
        };
    });

    EmpControllers.directive('searchWatchModel', function () {
        return {
            require: '^stTable',
            scope: {
                searchWatchModel: '='
            },
            link: function (scope, ele, attr, ctrl) {
                var table = ctrl;

                scope.$watch('searchWatchModel', function (val) {
                    ctrl.search(val);
                });

            }
        };
    });
    EmpControllers.directive('fileModel', ['$parse', function ($parse) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var model = $parse(attrs.fileModel);
                var modelSetter = model.assign;
                element.bind('change', function () {
                    scope.$apply(function () {
                        modelSetter(scope, element[0].files[0]);
                    });
                });
            }
        };
    }]);
    EmpControllers.directive("fileread", [
     function () {
         return {
             scope: {
                 fileread: "="
             },
             link: function (scope, element, attributes) {
                 element.bind("change", function (changeEvent) {
                     var reader = new FileReader();
                     reader.onload = function (loadEvent) {
                         scope.$apply(function () {
                             scope.fileread = loadEvent.target.result;
                             //scope.filename = changeEvent.target.files[0].name;
                         });
                     }
                     reader.readAsDataURL(changeEvent.target.files[0]);
                 });
             }
         }
     }
    ]);

    EmpControllers.directive('uploadFile', ['$parse', function ($parse) {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {

                var file_uploaded = $parse(attrs.uploadFile);

                element.bind('change', function () {
                    scope.$apply(function () {
                        file_uploaded.assign(scope, element[0].files[0]);
                    });
                });
            }
        };
    }]);


    //EmpControllers.directive('clickedDisable', function () {
    //    return {
    //        restrict: 'A',
    //        link: function (scope, ele, attrs) {           
    //            $(ele).click(function () {
    //                $(ele).attr('disabled', true);
    //            });           
    //        }
    //    };
    //});

    EmpControllers.directive("datepicker", function () {

        function link(scope, element, attrs) {
            // CALL THE "datepicker()" METHOD USING THE "element" OBJECT.
            /*element.datepicker({
                dateFormat: "dd-MMM-yyyy"
            });*/
            element.datepicker({
                format: "dd-M-yyyy",
                forceParse: false,
                autoclose: true,
                todayHighlight: true,
                toggleActive: true,
                todayBtn: true
            });
        }
  

        return {
            require: 'ngModel',
            link: link
        };
    
    });

    EmpControllers.service('fileUpload', ['$http', function ($http) {
        this.uploadFileToUrl = function (file, uploadUrl) {
            var fd = new FormData();
            fd.append('file', file);
            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            })
            .success(function () {
            })
            .error(function () {
            });
        }
    }]);


    EmpControllers.directive('showOnLoad', function () {
        return {
            restrict: 'A',
            link: function ($scope, elem, attrs) {

                $scope.$on('hide', function () {
                    elem.hide();
                });

                $scope.$on('show', function () {
                    elem.show();
                });

            }
        }
    });

    EmpControllers.directive('multiselectDropdown', [function () {
        return function (scope, element, attributes) {

            // Below setup the dropdown:

            element.multiselect({
                maxHeight: 200,
                enableFiltering: false,
                enableCaseInsensitiveFiltering: false,

                // Replicate the native functionality on the elements so
                // that angular can handle the changes for us.
                onChange: function (optionElement, checked) {
                    optionElement.removeAttr('selected');
                    if (checked) {
                        optionElement.prop('selected', 'selected');
                    }
                    element.change();
                }

            });
            // Watch for any changes to the length of our select element
            scope.$watch(function () {
                return element[0].length;
            }, function () {
                element.multiselect('rebuild');
            });
        };
    }]);


    //EmpControllers.directive('accessibleForm', function () {
    //    return {
    //        restrict: 'A',
    //        link: function (scope, elem) {

    //            // set up event handler on the form element
    //            elem.on('submit', function () {

    //                // find the first invalid element
    //                var firstInvalid = elem[0].querySelector('.ng-invalid');

    //                // if we find one, set focus
    //                if (firstInvalid) {
    //                    firstInvalid.focus();
    //                }
    //            });
    //        }
    //    };
    //});

    EmpControllers.directive('focusMe', function ($timeout, $parse) {
        return {
            link: function (scope, element, attrs) {
                var model = $parse(attrs.focusMe);
                scope.$watch(model, function (value) {
              
                    if (value === true) {
                        $timeout(function () {
                            element[0].focus();
                        });
                    }
                });
                //element.bind('blur', function () {
                //    console.log('blur')
                //    scope.$apply(model.assign(scope, false));
                //})
            }
        };
    });

    EmpControllers.directive('dateInput',function (dateFilter) {
        return {
                    require: 'ngModel',
                    template: '<input type="date"></input>',
                    replace: true,
                    link: function (scope, elm, attrs, ngModelCtrl)
                    {
                        ngModelCtrl.$formatters.unshift(function (modelValue) {
                            return dateFilter(modelValue, 'yyyy-MM-dd');
                        });

                        ngModelCtrl.$parsers.unshift(function (viewValue) {
                            return new Date(viewValue);
                        });
                    },
                };
            });
      



    //This is for Masterlist controller functions//
    EmpControllers.controller("MasterListController", ['$scope', '$http', '$filter', 'ngTableParams', '$location', 'filterFilter', '$rootScope', '$timeout',
         function ($scope, $http, $filter, ngTableParams, $location, $ff, $rootScope, $timeout) {

             // Declaration and initialization of Scope and array list variables.
             $scope.UITableName = "0";
             $scope.ControlValues = new Array();
             $scope.tableName = "";
             $scope.UIMasterName = "";
             $scope.resultCollection = [];
             //  $scope.ControlValues[0] = '';s
             $scope.ddlValues = [];
             $scope.noneditable = false;
             $scope.Mode = 0;
             $scope.tableName = '';
             $scope.PKId = 0;
             $scope.listId = 0;
             $scope.IsActive = "1";
             $scope.MasterItemList = [];
             $scope.ResultListFiltered = [];
             $scope.Description = "";
             $scope.DescriptionList = "";



             /*
             Validating the create page mandatory fields
             checking mandatory for the follwing fields
             UITableName
             and showing alert message when it is null.
             */
             $scope.Validationcontrols = function () {
                 if (typeof ($scope.UITableName) == "undefined" || $scope.UITableName == 0) {
                     alert("Please select Master Name");
                     return false;
                 }
                 return true;
             };

             /* 
             Calling the api method to detele the details of the Master Details 
             for the  Master Id,
             and redirected to the list page.
             */

             $scope.MasterDelete = function (RowId, rowname) {
                 // console.log(rowname);
                 var retVal = confirm("Do you like to inactivate the selected " + $scope.UIMasterName + " ?");
                 if (retVal == true) {
                     $http.get(baseUrl + 'api/CommonTable/MasterItem_Delete/?MasterId=' + $scope.UITableName + '&Id=' + RowId + '&Active=0').success(function (data) {
                         if (data == "1")
                             //$location.path('/listOPDRegistration/:view');
                             //$scope.getMasterTableName();
                             $scope.TableColumn_ListSearchGo();
                         alert($scope.UIMasterName + " has been inactivated successfully");
                     }).error(function (data) {
                         $scope.error = "An error has occurred while deleting Master " + data;
                     });
                 }
             };

             /* 
             Calling the api method to inactived the details of the Master Details 
             for the  Master Id,
             and redirected to the list page.
             */
             $scope.MasterActive = function (RowId, rowname) {
                 var retVal = confirm("Do you like to activate the selected " + $scope.UIMasterName + " ?");
                 if (retVal == true) {
                     $http.get(baseUrl + 'api/CommonTable/MasterItem_Active/?MasterId=' + $scope.UITableName + '&Id=' + RowId + '&Active=1').success(function (data) {
                         if (data == "1")
                             //$location.path('/listOPDRegistration/:view');
                             //$scope.getMasterTableName();
                             $scope.TableColumn_ListSearchGo();

                         alert($scope.UIMasterName + " has been activated successfully");
                     }).error(function (data) {
                         $scope.error = "An error has occurred while deleting Master " + data;
                     });
                 }
             }

             /* 
             Calling api method for the dropdown list in the html page for the fields 
             CommonTableList
             */
             $scope.getCommonTable = function () {
                 $http.get(baseUrl + 'api/CommonTable/CommonTable_Select/').success(function (data) {
                     $scope.getCommonTableList = data;
                     // console.log(data)

                 });
             };

         
             $scope.Cleardescription = function()
             {             
                 if($scope.UITableName ==0)
                 {
                     $scope.Description = "";
                 }
             
             };

             /* 
             Calling api method for getting the table name list 
             */
             $scope.getMasterTableName = function () {           
                 $scope.Cleardescription();
                 angular.forEach($scope.getCommonTableList, function (value, index) {
                     if (value.Id == $scope.UITableName) {
                         $scope.tableName = value.DBTableName;
                         $scope.UIMasterName = value.UITableName;
                         $scope.Description = value.Description;
                     }                
                 });
          
             }

             /* Open the create pop up window */
             $scope.AddClick = function () {
                 $scope.PKId = 0;
                 $scope.Mode = 1;
                 $scope.noneditable = false;
                 if ($scope.UITableName > 0) {
                     $scope.LoadMasterColumns();
                     //angular.element('#MasterAddmodal').modal('show');
                 
                 }
                 else {
                     alert("Please select master");
                 }

             }
             /* Open the view pop up window and show the details for the master table for the  master table Id */
             $scope.EditClick = function (PKId) {

                 $scope.PKId = PKId;
                 $scope.Mode = 3;
                 $scope.noneditable = false;
                 $scope.LoadMasterColumns();
                 //angular.element('#MasterAddmodal').modal('show');
             }

             /* Open the edit pop up window and show the details for the master table for the  master table Id */
             $scope.ViewClick = function (PKId) {
                 $scope.PKId = PKId;
                 $scope.Mode = 2;
                 $scope.noneditable = true;
                 $scope.LoadMasterColumns();
                 //angular.element('#MasterAddmodal').modal('show');
             }


             /*
            Calling the api method to list the master table details
            showing the result in table.
            */
             $scope.TableColumn_ListSearchpop = function (listId) {
                 $scope.listId = listId;
                 $scope.TableColumn_ListSearch($scope.listId, $scope.mode = 1);
             };

             /* on click Go calling the list function.*/
             $scope.TableColumn_ListSearchGo = function () {

                 $scope.TableColumn_ListSearch($scope.listId = 0);
             };

             /* Clear function.*/
             $scope.Clear = function () {
                 $scope.listId = 0;
             }

             /* Filter the master list function.*/
             $scope.AcitveFilterChange = function () {
                 $scope.ResultListFiltered = [];
                 if ($scope.IsActive == -1) {
                     $scope.ResultListFiltered = $ff($scope.MasterItemList, { DBColumnResult: $scope.query });
                 }
                 else {

                     $scope.ResultListFiltered = $ff($scope.MasterItemList, { IsActive: $scope.IsActive, DBColumnResult: $scope.query });

                 }

                 if ($scope.ResultListFiltered.length > 0) {
                     $scope.flag = 1;
                 }
                 else {
                     $scope.flag = 0;
                 }
             }

             /*
             Calling the api method to list the table column details
             showing the result in table.
             */

             $scope.loading = false;

             $scope.flag = 0;
             $scope.TableColumn_ListSearch = function () {

                 $scope.emptydata = [];
                 $scope.rowCollection = [];
                 $scope.tableName = "";
                 $scope.ControlValues = [];
                 $scope.collength = 0;
                 $scope.ResultList = [];
                 ;
                 $scope.MasterItemList = [];
                 // to get DB Table name of the Master selected
                 $scope.getMasterTableName();
                 $scope.Description = "";
                 $scope.loading = true;
                 $timeout(function () {
                     if ($scope.loading == true) {
                         $rootScope.$broadcast('show');
                     }
                 }, 3000); // 3 seconds

                 $http.get(baseUrl + 'api/CommonTable/TableColumn_Listall/?CommonTable_Id=' + $scope.UITableName).success(function (data) {
                     $scope.rowCollection = [];
                     $scope.rowCollection = data;
                     $scope.collength = data.length;

                     $http.get(baseUrl + 'api/CommonTable/TableColumn_GetList/?Id=' + $scope.listId + '&CommonTable_Id=' + $scope.UITableName).success(function (data) {
                         if ($scope.collength > 0) {
                             $scope.collength = (data.length / $scope.collength);

                             var i = 1;
                             var startRow = 0;

                             while (i <= $scope.collength) {

                                 $scope.ResultList.push(data.slice(startRow, startRow + $scope.rowCollection.length));
                                 startRow = startRow + $scope.rowCollection.length;
                                 i = i + 1;
                             };
                       
                             $scope.MasterItemList = $scope.ResultList;

                             $scope.AcitveFilterChange();
                         }

                         $scope.loading = false;
                         $rootScope.$broadcast('hide');

                     }).error(function (data) {
                         $scope.error = "AN error has occured while listing master" + data;
                     })

                 }).error(function (data) {
                     $scope.error = "AN error has occured while listing master" + data;
                 })
                 $scope.getMasterTableName();
             };

             /*
             Calling the api method to for Inactive record edit function
             */
             $scope.ErrorFunction = function () {
                 alert("Inactive record cannot be edited");
             };
             $scope.CustomMasterFilter = function () {
                 $scope.ResultListFiltered = [];
                 var matching = false;
                 angular.forEach($scope.ResultList, function (value, index) {
                     matching = false;
                     angular.forEach(value, function (value1, index1) {
                         if (value1.TableColumnItem.SearchColumn == 1 && (value[index1].DBColumnResult.toLowerCase()).indexOf($scope.query.toLowerCase()) !== -1) {

                             matching = true;
                         }

                     });

                     if (matching == true) $scope.ResultListFiltered.push(value);
                 });
                 $scope.ResultListFiltered = $scope.ResultListFiltered;
             }

             // List Page Pagination.
             $scope.current_page = 1;
             $scope.page_size = 30;
             $scope.rembemberCurrentPage = function (p) {
                 $scope.current_page = p
             }

             /*
            Calling the api method to list the table column details for the  filters  uitable name,id and
            showing the result in table.
            */
             $scope.LoadMasterColumns = function () {

                 $scope.loading = true;
                 $timeout(function () {
                     if ($scope.loading == true) {
                         $rootScope.$broadcast('show');
                     }
                 }, 3000); // 3 seconds
                 //$scope.getMasterTableName();
                 $http.get(baseUrl + 'api/CommonTable/TableColumn_GetItem/?CommonTable_Id=' + $scope.UITableName + '&PKId=' + $scope.PKId).success(function (data) {
                     $scope.resultCollection = [];
                     $scope.ddlValues = [];
                     $scope.ControlValues = new Array();
                     angular.forEach(data, function (value, index) {
                         if ($scope.PKId > 0) {
                             $scope.ControlValues[value.TableColumnItem.DBColumnName] = value.DBColumnResult.toString();
                         }
                         else {
                             $scope.ControlValues[value.TableColumnItem.DBColumnName] = "";
                         }
                         if (value.TableColumnItem.FieldType == 3) {
                             $scope.ddlValues[value.TableColumnItem.DBColumnName] = value.ddlResult;
                             if ($scope.Mode == 2) {

                                 $scope.DBColumnName1 = value.ddlResult;

                                 angular.forEach($scope.DBColumnName1, function (value1, index) {

                                     if (value1.Id == value.DBColumnResult) {
                                         $scope.ControlValues[value.TableColumnItem.DBColumnName] = value1.Name;

                                     }
                                 });
                             }
                         }
                         else {
                             $scope.ddlValues[value.TableColumnItem.DBColumnName] = "";
                         }

                         $scope.resultCollection.push(value.TableColumnItem);
                     });

                     angular.element('#MasterAddmodal').modal('show');


                     $scope.loading = false;
                     $rootScope.$broadcast('hide');

                 }).error(function (data) {
                     $scope.error = "AN error has occured while listing mastertable!" + data;
                 })
             }

             $scope.Valid = function () {
                 $scope.returnvalue = true;
                 $scope.errorList = "";
                 angular.forEach($scope.resultCollection, function (value, index) {
                     if ($scope.returnvalue == true) {

                         if (value.UIMandatory == 1 && value.IsPk == "0" && $scope.ControlValues[value.DBColumnName] == "") {
                             alert($scope.errorList + " Please enter " + value.UIColumnName);
                             $scope.returnvalue = false;
                             return;
                         }
                         else {
                             $scope.returnvalue = true;
                         }
                     }
                 });
                 return $scope.returnvalue;
             };
             /*
             Call the api method for insert and Update the record for a master list tables
             and display the record of selected master list tables when Id is greater than 0
             in edit.html and provide an option for create and modify the master list tables and save the master list tables record
             */
             $scope.SaveMasterColumns = function () {
                 if (($scope.Valid($scope.returnvalue)) == true) {
                     $scope.errorList = "";
                     $scope.ResultArray = [];
                     $scope.ControlValues['Id'] = $scope.PKId;
                     angular.forEach($scope.resultCollection, function (value, index) {
                         var obj = {
                             CommonTableName: $scope.tableName,
                             DBColumnName: value.DBColumnName,
                             FieldType: value.FieldType,
                             IsDefault: value.IsDefault,
                             ValidationType: value.ValidationType,
                             IsPK: value.IsPk,
                             IsUnique: value.IsUnique,
                             UIColumnName: value.UIColumnName,
                             UniqueColumn: value.UniqueColumn,
                             Id: value.Id,
                             ValidationType: value.ValidationType,
                             FilterColumn: value.FilterColumn,
                         };

                         //if (value.UIMandatory == 1 && value.IsPk == "0" && $scope.ControlValues[value.DBColumnName] == "") {
                         //    alert($scope.errorList + " Please enter " + value.UIColumnName);
                         //    return errorList;
                         //}
                         var objresult = {
                             TableColumnItem: obj,
                             DBColumnResult: $scope.ControlValues[value.DBColumnName]
                         };
                         $scope.ResultArray.push(objresult);
                     })
                     //if ($scope.errorList != "") {
                     //    alert($scope.errorList);
                     //    // $scope.errorList = "";
                     //}
                     if ($scope.errorList == "") {
                         if ($scope.PKId > 0) {


                             $scope.loading = true;
                             $timeout(function () {
                                 if ($scope.loading == true) {
                                     $rootScope.$broadcast('show');
                                 }
                             }, 3000); // 3 seconds

                             $http.post(baseUrl + '/api/CommonTable/UpdateMasterColumns', $scope.ResultArray).success(function (data) {
                                 //$location.path('/masteritem/' + $scope.UITableName + '/2/' + $scope.PKId);
                                 //alert("Update Successfully");
                                 var listId = data;
                                 if (!isNaN(listId)) {

                                     $scope.TableColumn_ListSearchpop(listId, $scope.mode = 1);
                                     angular.element('#MasterAddmodal').modal('hide');
                                 }

                                 else {

                                     $scope.errorList = $scope.errorList + data;
                                 }

                                 $scope.loading = false;
                                 $rootScope.$broadcast('hide');

                             }).error(function (data) {
                                 $scope.error = "An error has occured while editing master! " + data.ExceptionMessage;
                             });
                         }
                         else {

                             $scope.loading = true;
                             $timeout(function () {
                                 if ($scope.loading == true) {
                                     $rootScope.$broadcast('show');
                                 }
                             }, 3000); // 3 seconds

                             $http.post(baseUrl + '/api/CommonTable/SaveMasterColumns', $scope.ResultArray).success(function (data) {
                                 //$location.path('/masteritem/' + $scope.UITableName + '/2/' + data);
                                 //alert("Added Successfully");
                                 //    console.log(data);
                                 var listId = data;

                                 // console.log(listId);


                                 if (!isNaN(listId)) {
                                     //    console.log(data);
                                     // var listId = data;
                                     $scope.TableColumn_ListSearchpop(listId, $scope.mode = 1);
                                     angular.element('#MasterAddmodal').modal('hide');
                                     //  $scope.CancelMasterColumns();
                                 }
                                 else {

                                     $scope.errorList = $scope.errorList + data;
                                 }

                                 $scope.loading = false;
                                 $rootScope.$broadcast('hide');

                             }).error(function (data) {
                                 $scope.error = "An error has occured while adding master! " + data.ExceptionMessage;
                             });

                         }
                     }
                 }
             };



             $scope.Clearfunction = function (currentColumn) {
                 angular.forEach($scope.resultCollection, function (value, index) {
                     if (value.FilterColumn == currentColumn) {
                         $scope.ControlValues[value.DBColumnName] = "";
                     }
                 });
                 /*
                 //  $scope.DBColumnResult = "0";
                    angular.forEach($scope.resultCollection, function (value, index) {
                   // console.log($scope.ControlValues);

              //  console.log($scope.ControlValues[value.DBColumnName]);
                       $scope.errorlist = "";
                       $scope.ControlValues = value.CountryId;

                     $scope.ControlValues= "";
                  //   console.log($scope.ControlValues);
                   //  $scope.ControlValues == "";


               //  $scope.ResultListFiltered = [];
                     // $scope.listId = 0;
                     });
                     */
             };

             /*This the function for edit the master list tables */
             $scope.EditMasterColumns = function () {
                 $location.path('/masteritem/' + $scope.UITableName + '/3/' + $scope.PKId);
             }

             /*This the function for clear the list of master tables */
             $scope.CancelMasterColumns = function () {
                 $scope.errorList = "";
                 angular.element('#MasterAddmodal').modal('hide');
                 // $scope.TableColumn_ListSearchpop($scope.listId = 0);
             }

         }

    ]);

    //This is for Masteraddedit controller functions//
    EmpControllers.controller("MasterAddEditController", ['$scope', '$http', '$filter', '$routeParams', '$location',
         function ($scope, $http, $filter, $routeParams, $location) {
             $scope.tableName = "";
             $scope.UIMasterName = "";
             $scope.rowCollection = [];
             $scope.ControlValues = [];
             $scope.ddlValues = [];
             $scope.noneditable = false;
             $scope.Mode = $routeParams.Mode;
             $scope.tableName = '';
             $http.get(baseUrl + 'api/CommonTable/CommonTable_Select/').success(function (data) {
                 angular.forEach(data, function (value, index) {
                     if (value.Id == $routeParams.MasterId) {
                         $scope.tableName = value.DBTableName;
                         $scope.UIMasterName = value.UITableName;
                     }
                 });
             });
             //$("form.form-control").addClass('TextBoxLable');
             //$("#listingdetails").removeClass('hide-listing-details');   //after search is perform, show the left pane for listing details

             if ($routeParams.Mode == 2) {
                 $scope.noneditable = true;
             }
             //$scope.TableColumn_ListSearch = function ()
             {
                 $http.get(baseUrl + 'api/CommonTable/TableColumn_Listall/?CommonTable_Id=' + $routeParams.MasterId).success(function (data) {
                     $scope.rowCollection = [];
                     $scope.rowCollection = data;
                 }).error(function (data) {
                     $scope.error = "AN error has occured while listing table name!" + data;
                 })
             };
             //if ($routeParams.PKId > 0)
             {
                 $http.get(baseUrl + 'api/CommonTable/TableColumn_GetItem/?CommonTable_Id=' + $routeParams.MasterId + '&PKId=' + $routeParams.PKId).success(function (data) {
                     $scope.rowCollection = [];
                     $scope.ddlValues = [];
                     $scope.ControlValues = new Array();
                     angular.forEach(data, function (value, index) {
                         if (value.TableColumnItem.FieldType == 3) {
                             $scope.ddlValues[value.TableColumnItem.DBColumnName] = value.ddlResult;
                         }
                         else {
                             $scope.ddlValues[value.TableColumnItem.DBColumnName] = "";
                         }
                         if ($routeParams.PKId > 0) $scope.ControlValues[value.TableColumnItem.DBColumnName] = value.DBColumnResult.toString();
                         $scope.rowCollection.push(value.TableColumnItem);
                     });
                 }).error(function (data) {
                     $scope.error = "AN error has occured while listing restaurantname!" + data;
                 })
             };

             $scope.SaveMasterColumns = function () {
                 $scope.errorList = "";
                 $scope.ResultArray = [];
                 $scope.ControlValues['Id'] = $routeParams.PKId;
                 angular.forEach($scope.rowCollection, function (value, index) {
                     var obj = {
                         CommonTableName: $scope.tableName,
                         DBColumnName: value.DBColumnName,
                         FieldType: value.FieldType,
                         IsDefault: value.IsDefault,
                         ValidationType: value.ValidationType,
                         IsPK: value.IsPk
                     };
                     if (value.UIMandatory == 1 && $scope.ControlValues[value.DBColumnName] == "") {
                         $scope.errorList = $scope.errorList + "\nEnter " + value.UIColumnName
                     }

                     var objresult = {
                         TableColumnItem: obj,
                         DBColumnResult: $scope.ControlValues[value.DBColumnName]
                     };
                     $scope.ResultArray.push(objresult);
                 })
                 if ($scope.errorList != "")
                     alert($scope.errorList);

                 if ($scope.errorList == "") {
                     if ($routeParams.PKId > 0) {
                         $http.post(baseUrl + '/api/CommonTable/UpdateMasterColumns', $scope.ResultArray).success(function (data) {
                             $location.path('/masteritem/' + $routeParams.MasterId + '/2/' + $routeParams.PKId);
                         }).error(function (data) {
                             $scope.error = "An error has occured while adding master! " + data.ExceptionMessage;
                         });
                     }
                     else {
                         $http.post(baseUrl + '/api/CommonTable/SaveMasterColumns', $scope.ResultArray).success(function (data) {
                             $location.path('/masteritem/' + $routeParams.MasterId + '/2/' + data);
                         }).error(function (data) {
                             $scope.error = "An error has occured while adding master! " + data.ExceptionMessage;
                         });

                     }
                 }
             };
             $scope.EditMasterColumns = function () {
                 $location.path('/masteritem/' + $routeParams.MasterId + '/3/' + $routeParams.PKId);
             }
             $scope.CancelMasterColumns = function () {
                 if ($routeParams.Mode == 1 | $routeParams.Mode == 2) {
                     $location.path('/masterlist');
                 }
                 else {
                     $location.path('/masteritem/' + $routeParams.MasterId + '/2/' + $routeParams.PKId);
                 }
             }

         }
    ]);

    //This is for Companymaster controller functions//
    EmpControllers.controller("CompanyMasterController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
    function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

        $scope.listdata = [];
        $scope.current_page = 1;
        $scope.page_size = 30;

        // List Page Pagination.
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }


        // Declaration and initialization of Scope Variables.
        $scope.StateList = [];
        //  $scope.rowCollection = [];
        $scope.Company_Name = "0";
        $scope.CompanyName = "";
        $scope.StateName = "0";
        $scope.StateID = "0";
        $scope.LocationID = "0";
        $scope.CountryID = "0";
        $scope.LocationName = "0";
        $scope.CountryName = "0";
        $scope.Department_Name = "0";
        $scope.License_Certificate = "";
        $scope.uploadme = "";
        $scope.CompanyLogo = "";
        $scope.LogoFullpath = "";
        $scope.FileName = "";
        $scope.IsActive = "1";
        $scope.Salary_Calculation_Id = "0";
        $scope.Salary_start_Day = "";
   
  

        /* Validating the create page mandatory fields
        checking mandatory for the follwing fields
        CompanyName,CompanyCode,Address1,CountryName,StateName,LocationName,LicenceRenewalDate and CommencementDate,LicenceRenewalDate and incorporationDate,
        incorporationDate,LicenceRenewalDate,CommencementDate,Company Email,PrimaryContactEmail,CompanyURL
        and showing alert message when it is null.
        */
        $scope.Validationcontrols = function () {

            if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == "") {
                alert("Please enter Company Name");
                return false;
            }
            else if (typeof ($scope.CompanyCode) == "undefined" || $scope.CompanyCode == "") {
                alert("Please enter Company Code");
                return false;
            }
            else if (typeof ($scope.Address1) == "undefined" || $scope.Address1 == "") {
                alert("Please enter Address1");
                return false;
            }
                //else if (typeof ($scope.Address2) == "undefined" || $scope.Address2 == "") {
                //    alert("Please enter Address2");
                //    return Address2;
                //}
                //else if (typeof ($scope.Address3) == "undefined" || $scope.Address3 == "") {
                //    alert("Please enter Address3");
                //    return Address3;
                //}
            else if (typeof ($scope.CountryName) == "undefined" || $scope.CountryName == 0) {
                alert("Please select Country");
                return false;
            }
            else if (typeof ($scope.StateName) == "undefined" || $scope.StateName == 0) {
                alert("Please select State");
                return false;
            }
            else if (typeof ($scope.LocationName) == "undefined" || $scope.LocationName == 0) {
                alert("Please select City");
                return false;
            }
            else if (typeof ($scope.Salary_Calculation_Id) == "undefined" || $scope.Salary_Calculation_Id == 0) {
                alert("Please select Salary Calculation Based On");
                return false;
            }

            else if (ParseDate($scope.License_Renewal_date) < ParseDate($scope.CommencementDate)) {
                alert("License renewal date should be greater than Commencement Date");
                return false;
            }
            else if (ParseDate($scope.License_Renewal_date) <= ParseDate($scope.incorporationDate)) {
                alert("License renewal date should be greater than Incorporation Date");
                return false;
            }
            else if (EmailFormate($scope.PrimaryContactEmail) == false) {
                alert("Primary Contact Email Address is in invalid format");
                return false;
            }
            else if (EmailFormate($scope.CompanyEmail) == false) {
                alert("Email is in invalid format");
                return false;
            }
            else if (DominFormat($scope.CompanyURL) == false) {
                alert("Invalid domin format");
                return false;
            }
            else if (isDate($scope.CommencementDate) == false) {
                alert("Commencement of Business is in invalid format, please enter dd-mm-yyyy");
                return false;
            }
            else if (isDate($scope.incorporationDate) == false) {
                alert("Date of Incorporation is in invalid format, please enter dd-mm-yyyy");
                return false;
            }
            else if (isDate($scope.License_Renewal_date) == false) {
                alert("License Renewal date is in invalid format, please enter dd-mm-yyyy");
                return false;
            }
            return true;
        };


        /* 
        Calling api method for the dropdown list in the html page for the fields 
        Country,State,Locaiton,Company,Department
        */
        $scope.CountryList = [];
        $scope.CountryNameList = [];
        $scope.StateList = [];
        $scope.StateNameList = [];
        $scope.CityList = [];
        $scope.CityNameList = [];
        $scope.MonthTypeList =[];


        //var selIndex = statelist.length;
        $scope.clearlist = function () {

            $http.get(baseUrl + 'api/Common/CountryList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CountryList = data;
                // only active company
                $scope.CountryNameList = $ff(data, { IsActive: 1 });
            });

            $http.get(baseUrl + 'api/Common/StateList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.StateList = data;
                // only active company
                $scope.StateNameList = $ff(data, { IsActive: 1 });

            });

            $http.get(baseUrl + 'api/Common/GetLocationList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CityList = data;
                // only active company
                $scope.CityNameList = $ff(data, { Active: 1 });
            });
        };


        $scope.Companylistfunction = function () {
            $http.get(baseUrl + 'api/CompanyMaster/GetCompanyMaster_GetCompanyName/').success(function (data) {
                $scope.CompanyNameList = data;
            });
        };

        //$scope.Licencelistfunction = function () {
        //    $http.get(baseUrl + 'api/CompanyMaster/LicenceName_List/').success(function (data) {
        //        $scope.LicenseFileName = data;
        //        $scope.LicenseFullPath = data;


        //    });
        //};

        $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
            $scope.DepartmentList = data;
        });

        //$scope.monthtype = function()
        //{
        $http.get(baseUrl + 'api/CompanyMaster/GetMonthType/').success(function (data) {
            $scope.MonthTypeList = data;
        
            //    angular.forEach($scope.MonthTypeList, function (value, index) {
            //        $scope.Month_Namelist = value.Month_Name;   
            //        if($scope.Month_Namelist =='Fixed Average Days')
            //        {
            //            $scope.Month_Name = value.Month_Name;  
            //            console.log($scope.Month_Name);
            //        }
            //        else{
            //            $scope.Month_Name =0;
            //        }
            //        console.log($scope.Month_Name);
            //    });
        });
        // };
    
        // $scope.monthtype();

        $scope.Companylistfunction();
        // $scope.Licencelistfunction();

        /* Open the create pop up window */
        $scope.AddCompanyPopUP = function (CMId) {
            $scope.Id = CMId;
            //$scope.ViewCompany();
            angular.element('#CompanyMasterModal').modal('show');
        }

        /* Open the view pop up window and show the details for the company for the  company Id */
        $scope.ViewCompanyPopUP = function (CMId) {
            $scope.Id = CMId;
            $scope.ViewCompany();
            angular.element('#CompanyMasterviewModal').modal('show');
        }

        /* Open the edit pop up window and show the details for the company for the  company Id */
        $scope.EditCompanyPopUP = function (CMId) {
            $scope.Id = CMId;
            $scope.CertificateHistorylist(CMId);
            $scope.ViewCompany();

            angular.element('#CompanyMasterModal').modal('show');
        }

        /*calling list function */
        $scope.ListCompanyPopUP = function (CMId) {
        
            $scope.Id = CMId;
            $scope.Company_Listsearch();
        
        }


        /*calling Alert message for cannot edit inactive record function */
        $scope.ErrorFunction = function () {
            alert("Inactive record cannot be edited");
        }
    

        $scope.AddHistoryRow = -1;
        $scope.Addcertificatehistory = [];

        /* ARRAY LIST FOR THE CHILD TABLE CUSTOMER DETAILS */
        $scope.Addcertificatehistory = [{
            //'Id': $scope.ChildId,
            'CompanyId': $scope.CompanyId,
            'License_Certificate': $scope.License_Certificate,
            'LicenseFullPath': $scope.LicenseFullPath,
            'LicenseFileName': $scope.LicenseFileName,

        }];

        /* SAVE FUNCTION FOR THE CHILD TABLE CUSTOMER DETAILS */
        $scope.ITCustomerSave = function () {
            if ($scope.AddHistoryRow > 0) {
                var obj = {
                    'Id': $scope.ChildId,
                    'CompanyId': $scope.CompanyId,
                    'License_Certificate': $scope.License_Certificate,
                    'LicenseFullPath': $scope.LicenseFullPath,
                    'LicenseFileName': $scope.LicenseFileName,
                }
                $scope.Addcertificatehistory[$scope.AddHistoryRow] = obj;

            }
            else {
                $scope.Addcertificatehistory.push({
                    'Id': $scope.ChildId,
                    'CompanyId': $scope.CompanyId,
                    'License_Certificate': $scope.License_Certificate,
                    'LicenseFullPath': $scope.LicenseFullPath,
                    'LicenseFileName': $scope.LicenseFileName,
                })
            }

        };



        /*
        Calling the api method to view the details of the company
        for the company Id 
        and display the details in the view pop up window.
        */
        $scope.ViewCompany = function () {
            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
                $scope.DuplicateId = $routeParams.Id;
                $scope.DuplicatesId = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/CompanyMaster/GetCompanyById/?Id=' + $scope.Id).success(function (data) {
                console.log(data);
                $scope.DuplicateId = data.Id;
                $scope.DuplicatesId = data.Id;
                $scope.CompanyName = data.CompanyName;
                $scope.CompanyURL = data.CompanyURL;
                $scope.CompanyEmail = data.CompanyEmail;
                $scope.CompanyCode = data.CompanyCode;
                $scope.ContactPerson = data.ContactPerson;
                $scope.Address1 = data.Address1;
                $scope.Address2 = data.Address2;
                $scope.Address3 = data.Address3;
                $scope.CountryName = data.CountryID.toString();
                $scope.listCountryName = data.CountryName;
                $scope.StateName = data.StateID.toString();
                $scope.listStateName = data.StateName;
                $scope.LocationName = data.LocationID.toString();
                $scope.listLocationName = data.LocationName;
                $scope.PFApplicable = data.PFApplicable;
                $scope.ESIApplicable = data.ESIApplicable;
                $scope.CompanyLogo = data.CompanyLogo;
                $scope.uploadme = data.CompanyLogo;
                $scope.CompanyPFNo = data.CompanyPFNo;
                $scope.CompanyESINo = data.CompanyESINo;
                $scope.CompanyPANNo = data.CompanyPANNo;
                $scope.CompanyContactNo = data.CompanyContactNo;
                $scope.CompanyFAXNo = data.CompanyFAXNo;
                $scope.CompanyPINNo = data.CompanyPINNo;
                $scope.CompanyTANNo = data.CompanyTANNo;
                $scope.CompanyPrintName = data.CompanyPrintName;
                $scope.CINNO = data.CINNO;
                $scope.PrintPinCode = data.PrintPinCode;
                $scope.GSTNo = data.GSTNo;
                $scope.CommencementDate = $filter('date')(data.CommencementDate, "dd-MMM-yyyy");
                $scope.incorporationDate = $filter('date')(data.incorporationDate, "dd-MMM-yyyy");
                $scope.License_Issue_Authority = data.License_Issue_Authority;
                $scope.License_Renewal_date = $filter('date')(data.License_Renewal_date, "dd-MMM-yyyy");
                $scope.License_Certificate = data.License_Certificate;
                $scope.Remarks = data.Remarks;
                $scope.LogoFullpath = data.LogoFullpath;
                $scope.FileName = data.FileName;
                $scope.LicenseFullPath = data.LicenseFullPath;
                $scope.LicenseFileName = data.LicenseFileName;
                $scope.ContactPersonName = data.ContactPersonName;
                // $scope.StateGST = data.StateGST;
                $scope.DefaultCompanyName = data.DefaultCompanyName;
                $scope.DefaultCompanyLogo = data.DefaultCompanyLogo;
                $scope.PinCodeNo = data.PinCodeNo;
                $scope.PostBoxNo = data.PostBoxNo;
                $scope.PrimaryContactEmail = data.PrimaryContactEmail;
                $scope.Month_Name = data.Salary_Calculation_Id.toString();
                $scope.ViewMonth_Name = data.Month_Name;
                $scope.ViewSalary_Calculation_Months = data.Salary_Calculation_Months; 
                $scope.ViewSalary_start_Day = data.Salary_start_Day;

          
                $scope.CountryInactiveFlag = 0;
                $scope.StateInactiveFlag = 0;
                $scope.LocationInactiveFlag = 0;

                // if the current viewing company is inactive
                // set the flag value to 1
                if (($ff($scope.CountryList, { Id: $scope.CountryName, CountryName: $scope.listCountryName, IsActive: 0 }).length) == 1) {
                    $scope.CountryInactiveFlag = 1;
                }
                if (($ff($scope.StateList, { Id: $scope.StateName, StateName: $scope.listStateName, IsActive: 0 }).length) == 1) {
                    $scope.StateInactiveFlag = 1;
                }
                if (($ff($scope.CityList, { Id: $scope.LocationName, LocationName: $scope.listLocationName, Active: 0 }).length) == 1) {
                    $scope.LocationInactiveFlag = 1;
                }

                $http.get(baseUrl + '/api/CompanyMaster/CertificateHistory_List/?CompanyId=' + $scope.CompanyId).success(function (ITdata) {
                    $scope.Addcertificatehistory = ITdata;
                }).error(function (ITdata) {
                    $scope.error = "AN error has occured while list company master!" + ITdata;
                });

            }).error(function (data) {
                $scope.error = "AN error has occured while list Countryname!" + data;
            });
        };


        /*calling clear function */
        $scope.ClearListfunction = function () {
            $scope.StateID = "0";
            $scope.StateName = "0";
            $scope.LocationID = "0";
            $scope.LocationName = "0";

        };
        /*calling clear function */
        $scope.Clearstatefunction = function () {
            $scope.LocationID = "0";
            $scope.LocationName = "0";

        };


        /* 
        Calling the api method to detele the details of the company 
        for the  company Id,
        and redirected to the list page.
        */
        $scope.DeleteCompany = function (comId) {
            $scope.Id = comId;
            $scope.Company_Delete();
        };
        $scope.Company_Delete = function () {
            var del = confirm("Do you like to inactivate the selected company?");
            if (del == true) {
                $http.get(baseUrl + 'api/CompanyMaster/Company_Delete/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected company has been inactivated successfully");
                    $scope.Company_ListsearchGo();
                }).error(function (data) {
                    $scope.error = "AN error has occured while deleting Company details!" + data;
                });
            };
        };


        /* 
        Calling the api method to inactived the details of the company 
        for the  company Id,
        and redirected to the list page.
        */
        $scope.ReInsertCompanyMasterDetails = function () {
            var Ins = confirm("Do you like to activate the selected company?");
            if (Ins == true) {
                $http.get(baseUrl + 'api/CompanyMaster/Company_ReInsert/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected company has been activated successfully");
                    $scope.ListCompanyPopUP($scope.Id = 0);
                }).error(function (data) {
                    $scope.error = "An error has occurred while ReInserting Company branch Detail" + data;
                });
            };
        }

        /*ReInsert popup function*/
        $scope.ReInsertCompany = function (comId) {
            $scope.Id = comId;
            $scope.ReInsertCompanyMasterDetails();
        };


        /* Read the file path of the image uploaded  and file upload*/
        $scope.downloadfile = function (url, defaultFileName) {
            var self = this;
            var deferred = $q.defer();
            $http.get(url, { responseType: "blob" }).then(
               function (data) {
                   saveAs(data.data, defaultFileName)
                   deferred.resolve(defaultFileName);
               }, function (data) {
                   var e = /* error */
                    deferred.reject(e);
               });
            return deferred.promise;
        };


        $scope.dataURItoBlob = function (dataURI) {
            var binary = atob(dataURI.split(',')[1]);
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            var array = [];
            for (var i = 0; i < binary.length; i++) {
                array.push(binary.charCodeAt(i));
            }
            return new Blob([new Uint8Array(array)], {
                type: mimeString
            });
        }
        /* Read file name for the  Photo and file */
        $scope.logoChange = function () {

            if ($('#companyphoto')[0].files[0] != undefined) {
                $scope.FileName = $('#companyphoto')[0].files[0]['name'];
            }
        }
        $scope.doclogoChange = function () {

            if ($('#License')[0].files[0] != undefined) {
                $scope.LicenseFileName = $('#License')[0].files[0]['name'];
            }
        }
        $scope.uploadImage = function (CompanyLogo) {
            var filename = "";
            //var fd = new FormData();
            if ($('#companyphoto')[0].files[0] != undefined) {
                filename = $('#companyphoto')[0].files[0]['name'];
                //var imgBlob = $scope.dataURItoBlob($scope.CompanyLogo);
                //fd.append('file', imgBlob);
            }
        }

        $scope.loading = false;

        $scope.CertificateHistorylist = function () {

            $scope.emptydatas = [];
            $scope.rowCollections = [];


            $http.get(baseUrl + 'api/CompanyMaster/CertificateHistory_List/?CompanyId=' + $scope.Id).success(function (data) {

                $scope.emptydatas = [];
                $scope.rowCollections = [];
                $scope.rowCollections = data;


                //angular.forEach($scope.rowCollections, function (value, index) {
                //    if (data.CompanyId == $scope.LicenseFileName) {
                //        $scope.rowCollectionss.push(value);
                //    }
                //});

                // $scope.FilterCertificate();

                //if ($scope.rowCollections.length > 0) {
                //    $scope.flags = 1;
                //}
                //else {
                //    $scope.flags = 0;
                //}
            }).error(function (data) {
                $scope.error = "AN error has occured while deleting CountryId!" + data;
            })
        };

        $scope.CertificateHistorylist();




        $scope.Id = 0;
        $scope.DuplicateId = 0;
        $scope.DuplicatesId = 0;

        /*Call the api method for insert and Update the record for a company
          and display the record of selected company when Id is greater than 0
          in edit.html and provide an option for create and modify the company and save the company record*/
        $scope.Company_AddEdit = function () {
            if ($scope.Validationcontrols() == true) {
                var filename = "";
                var Licensefilename = "";

                var fd = new FormData();
                var imgBlob;
                var imgBlobfile;
                var itemIndexLogo = -1;
                var itemIndexfile = -1;

                var fd = new FormData();
                if ($('#companyphoto')[0].files[0] != undefined) {
                    filename = $('#companyphoto')[0].files[0]['name'];
                    imgBlob = $scope.dataURItoBlob($scope.uploadme);
                    itemIndexLogo = 0;
                }
                if ($('#License')[0].files[0] != undefined) {
                    Licensefilename = $('#License')[0].files[0]['name'];
                    imgBlobfile = $scope.dataURItoBlob($scope.licedoc);
                    if (itemIndexLogo == -1) {
                        itemIndexfile = 0;
                    }
                    else {
                        itemIndexfile = 1;
                    }
                }


                if (itemIndexLogo != -1) {
                    fd.append('file', imgBlob);
                }
                if (itemIndexfile != -1) {
                    fd.append('file1', imgBlobfile);
                }


                /*
                calling the api method for read the file path 
                and saving the image uploaded in the local server. 
                */
                $http.post(baseUrl + 'api/Common/AttachFile',
                fd,
                {
                    transformRequest: angular.identity,
                    headers: {
                        'Content-Type': undefined
                    }
                }
                )
                .success(function (response) {
                    if ($scope.FileName == "") {
                        $scope.CompanyLogo = "";
                    }
                    else if (itemIndexLogo > -1) {
                        if ($scope.FileName != "" && response[itemIndexLogo] != "") {
                            $scope.CompanyLogo = response[itemIndexLogo];
                        }
                    }
                    if ($scope.LicenseFileName == "") {
                        $scope.License_Certificate = "";
                    }
                    else if (itemIndexfile > -1) {
                        if ($scope.LicenseFileName != "" && response[itemIndexfile] != "") {
                            $scope.License_Certificate = response[itemIndexfile];
                        }
                    }


                    $http.get(baseUrl + '/api/CompanyMaster/CompanyName_DuplicateCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName).success(function (data) {
                        $http.get(baseUrl + '/api/CompanyMaster/CompanyCode_DuplicateCheck/?Id=' + $scope.DuplicatesId + '&CompanyCode=' + $scope.CompanyCode).success(function (datas) {

                            if (data == 1) {

                                alert("Company Name already exists, cannot duplicate");
                                return false;
                            }
                            else if (datas == 1) {
                                alert("Company Code already exists, cannot duplicate");
                                return false;
                            }
                            else ((data != 1) && (datas != 1))
                            {

                                var obj = {
                                    Id: $scope.Id,
                                    CompanyName: $scope.CompanyName,
                                    CompanyURL: $scope.CompanyURL,
                                    CompanyEmail: $scope.CompanyEmail,
                                    CompanyCode: $scope.CompanyCode,
                                    ContactPerson: $scope.ContactPerson,
                                    Address1: $scope.Address1,
                                    Address2: $scope.Address2,
                                    Address3: $scope.Address3,
                                    CountryID: $scope.CountryName,
                                    StateID: $scope.StateName,
                                    LocationID: $scope.LocationName,
                                    PFApplicable: $scope.PFApplicable,
                                    ESIApplicable: $scope.ESIApplicable,
                                    CompanyLogo: $scope.CompanyLogo == "" ? "" : $scope.CompanyLogo,
                                    CompanyPFNo: $scope.CompanyPFNo,
                                    CompanyESINo: $scope.CompanyESINo,
                                    CompanyPANNo: $scope.CompanyPANNo,
                                    CompanyContactNo: $scope.CompanyContactNo,
                                    CompanyFAXNo: $scope.CompanyFAXNo,
                                    CompanyPINNo: $scope.CompanyPINNo,
                                    CompanyTANNo: $scope.CompanyTANNo,
                                    CompanyPrintName: $scope.CompanyPrintName,
                                    CINNO: $scope.CINNO,
                                    PrintPinCode: $scope.PrintPinCode,
                                    GSTNo: $scope.GSTNo,
                                    CommencementDate: $scope.CommencementDate == 0 ? null : $scope.CommencementDate,
                                    incorporationDate: $scope.incorporationDate == 0 ? null : $scope.incorporationDate,
                                    License_Issue_Authority: $scope.License_Issue_Authority,
                                    License_Renewal_date: $scope.License_Renewal_date == 0 ? null : $scope.License_Renewal_date,
                                    License_Certificate: $scope.License_Certificate == "" ? null : $scope.License_Certificate,
                                    Remarks: $scope.Remarks,
                                    LogoFullpath: "",
                                    FileName: $scope.FileName,
                                    LicenseFullPath: "",
                                    LicenseFileName: $scope.LicenseFileName == "" ? null : $scope.LicenseFileName,
                                    ContactPersonName: $scope.ContactPersonName,
                                    //  StateGST: $scope.StateGST,
                                    DefaultCompanyName: $scope.DefaultCompanyName == "" ? null : $scope.DefaultCompanyName,
                                    DefaultCompanyLogo: $scope.DefaultCompanyLogo == "" ? null : $scope.DefaultCompanyLogo,
                                    PinCodeNo: $scope.PinCodeNo,
                                    PostBoxNo: $scope.PostBoxNo,
                                    PrimaryContactEmail: $scope.PrimaryContactEmail,
                                    Salary_Calculation_Id: $scope.Salary_Calculation_Id,
                                    Salary_Calculation_Months: $scope.Salary_Calculation_Months,
                                    Salary_start_Day : $scope.Salary_start_Day,
                                };

                                $scope.loading = true;
                                $timeout(function () {
                                    if ($scope.loading == true) {
                                        $rootScope.$broadcast('show');
                                    }
                                },3000); // 5 second
                                $http.post(baseUrl + '/api/CompanyMaster/Company_AddEdit/', obj).success(function (data) {
                                    if (data != -1) {
                                        $scope.AddId = data;
                                        var AddId = data;
                                        //$scope.MasterId = data;
                                        //angular.forEach($scope.Addcertificatehistory, function (value, index) {
                                        //    value.CompanyId = $scope.CompanyId;
                                        //    //value.License_Certificate = $scope.License_Certificate;

                                        //});

                                        //$http.post(baseUrl + '/api/CompanyMaster/CertificateHistory_AddEdit/', $scope.Addcertificatehistory).success(function (data) {

                                        $scope.ListCompanyPopUP($scope.AddId);
                                        angular.element('#CompanyMasterModal').modal('hide');
                                        //  $scope.Addcertificatehistory = [];
                                        $scope.CertificateHistorylist();
                                        $scope.ClearPopup();
                                        $scope.ClearlistPopup();

                                        $scope.loading = false;
                                        $rootScope.$broadcast('hide');

                                        //}).error(function (data) {
                                        //    $scope.error = "An error has occurred while adding companymaster!" + data.ExceptionMessage;
                                        //});

                                    }

                                    else if (data == -1) {
                                        alert("There is already default company");
                                        $scope.loading = false;
                                        $rootScope.$broadcast('hide');
                                    }

                                }).error(function (data) {

                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');

                                    $scope.error = "An error has occurred while adding tableno!" + data.ExceptionMessage;
                                });
                            }

                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding tableno!" + data.ExceptionMessage;
                        });


                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding tableno!" + data.ExceptionMessage;
                    });

                }).error(function (response) {
                    $scope.CompanyLogo = "";
                    $scope.License_Certificate = "";

                });


                $("#companyphoto").val('');
                $("#License").val('');
            }
        };

        /* Clear the uploaded image */
        $scope.imageclear = function () {
            $scope.CompanyLogo = "";
            // LogoFullpath = "";
            $scope.FileName = "";
            $scope.uploadme = "";
            $('#companyphoto').val('');

        };

        $scope.imageclear();
        /* Clear the document/files */
        $scope.fileclear = function () {
            $scope.LicenseFileName = "";
            LicenseFullPath = "";
            $('#License').val('');
        };

        /* on click Go calling the list function.*/
        //$scope.Company_ListsearchGo = function () {
        //    $scope.Id = 0;
        //    $scope.Mode = 1;
        //    $scope.Company_Listsearch($scope.Id, $scope.Mode);

        //};
        $scope.Company_ListsearchGo = function () {
            $scope.Id = 0;
            // $scope.Mode = 1;
            $scope.Company_Listsearch($scope.Id);
        };


        /*
       Calling the api method to list the company details for the  filters  company name,status and
       showing the result in table.
       */


        $scope.changeBackColor = [];

        $scope.loading = false;
        $scope.Company_Listsearch = function (rowId, index) {
            $scope.changeBackColor = [];
            $scope.loading = true;
            $timeout(function () {
                if ($scope.loading == true) {
                    $rootScope.$broadcast('show');
                }
            }, 3000); // 3 second

            $http.get(baseUrl + 'api/CompanyMaster/CompanyMaster_List/?Id=' + $scope.Id + '&CompanyName=' + $scope.Company_Name + '&Active=' + $scope.IsActive).success(function (data) {

                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;

                angular.forEach($scope.rowCollection, function (values, index) {

                    $scope.defaultname = values.DefaultCompanyName;
                    //  console.log($scope.defaultname);
                    //$scope.defaultnameid[index] = $scope.defaultname;

                    if ($scope.defaultname == true) {
                        $scope.changeBackColor[rowId, index] = "tdBackColor";
                        //   console.log($scope.defaultname);
                    }
                });



                $scope.loading = false;
                $rootScope.$broadcast('hide');
            }).error(function (data) {

                $scope.loading = false;
                $rootScope.$broadcast('hide');
                $scope.error = "AN error has occured while deleting CountryId!" + data;
            })
        };

        $scope.CompanyName = "0";

        //  $scope.flags = 0;
        $scope.loadData = function () {
            $http.get(baseUrl + 'api/CompanyMaster/CompanyMaster_List/?Id=' + $scope.Id + '&CompanyName=' + $scope.Company_Name + '&Active=' + $scope.IsActive).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
            });
        };

        $scope.Listrec = function () {

            if ($routeParams.Id == 0) {
                $scope.rowCollection = [];
            }
        }

        /*
        Close the pop up window for the view pop up on click cancel button 
        */
        $scope.CancelView = function () {
            //   $scope.Addcertificatehistory = [];
            angular.element('#CompanyMasterviewModal').modal('hide');
            $scope.ClearPopup();
            $scope.ClearlistPopup();
        }

        /*
       Close the pop up window for the create and edit pop up on click cancel button 
       */
        $scope.CancelPopup = function () {
            //   $scope.Addcertificatehistory = [];
            angular.element('#CompanyMasterModal').modal('hide');
            $scope.ClearPopup();
            $scope.ClearlistPopup();
            // $scope.ClearlistPopup();
        }

        /*
        Clear the create page scope variable values.
        */
        $scope.ArrayClearPopup = function () {
            //$scope.CountryList = [];
            //$scope.CountryNameList = [];
            //$scope.StateList = [];
            //$scope.StateNameList = [];
            //$scope.CityList = [];
            //$scope.CityNameList = [];
            //$scope.CountryNameList = [];
            //$scope.StateNameList = [];
            //$scope.CityNameList = [];
            $scope.CountryName = "0";
            $scope.StateName = "0";
            $scope.LocationName = "0";
        }

        $scope.ClearlistPopup = function () {
            //  $scope.ITCustomerSave();
            // $scope.AddHistoryRow = -1;
            //  $scope.Addcertificatehistory = [];
            $scope.Id = [];
            $scope.CompanyId = [];
            $scope.CompanyName = [];
            $scope.License_Certificate = [];
            $scope.LicenseFullPath = [];
            $scope.LicenseFileName = [];
        };
        $scope.ClearlistPopup();

        $scope.PFClear = function () {
            $scope.CompanyPFNo = "";
        };
        $scope.ESIClear = function () {
            $scope.CompanyESINo = "";
        };
        $scope.MonthdaysClear = function () {
            $scope.Salary_Calculation_Months = "";
        };

        /*
       Clear the create page scope variable values.
       */
        $scope.ClearPopup = function () {
            $scope.CompanyName = "";
            $scope.CompanyURL = "";
            $scope.CompanyEmail = "";
            $scope.CompanyCode = "";
            $scope.ContactPerson = "";
            $scope.Address1 = "";
            $scope.Address2 = "";
            $scope.Address3 = "";
            $scope.CountryName = "0";
            $scope.StateName = "0";
            $scope.LocationName = "0";
            $scope.PFApplicable = "";
            $scope.ESIApplicable = "";
            $scope.CompanyLogo = "";
            $scope.uploadme = "";
            $scope.CompanyPFNo = "";
            $scope.CompanyESINo = "";
            $scope.CompanyPANNo = "";
            $scope.CompanyContactNo = "";
            $scope.CompanyFAXNo = "";
            $scope.CompanyPINNo = "";
            $scope.CompanyTANNo = "";
            $scope.CompanyPrintName = "";
            $scope.CINNO = "";
            $scope.PrintPinCode = "";
            $scope.GSTNo = "";
            $scope.CommencementDate = "";
            $scope.incorporationDate = "";
            $scope.License_Issue_Authority = "";
            $scope.License_Renewal_date = "";
            $scope.License_Certificate = "";
            $scope.Remarks = "";
            $scope.FileName = "";
            $scope.LogoFullpath = "";
            $scope.LicenseFileName = "";
            $scope.ContactPersonName = "";
            $scope.StateGST = "";
            $scope.DefaultCompanyName = "";
            $scope.DefaultCompanyLogo = "";
            $scope.PinCodeNo = "";
            $scope.PostBoxNo = "";
            $scope.PrimaryContactEmail = "";
            $scope.Salary_Calculation_Id ="0";
            $scope.Salary_Calculation_Months ="";

            $scope.Month_Name ="";
            //  $scope.clearlist();
            $scope.CountryInactiveFlag = 0;
            $scope.StateInactiveFlag = 0;
            $scope.LocationInactiveFlag = 0;

        };
    }
    ]);

    //This is for UserMenu controller functions//
    EmpControllers.controller("UserController", ['$scope', '$http', '$routeParams', '$location', '$filter',
    function ($scope, $http, $routeParams, $location, $filter) {

        $http.get(baseUrl + 'api/UserMenu/GetTittleList/').success(function (data) {
            $scope.TittleNameList = data;
        });
        $http.get(baseUrl + 'api/UserMenu/GetGenderList/').success(function (data) {
            $scope.GenderList = data;
        });
        $http.get(baseUrl + 'api/UserMenu/GetCivilStatusList/').success(function (data) {
            $scope.Civil_Status = data;
        });
        $http.get(baseUrl + 'api/UserMenu/GetDesignationList/').success(function (data) {
            $scope.DesignationList = data;
        });
        $http.get(baseUrl + 'api/UserMenu/GetDepartmentList/').success(function (data) {
            $scope.DepartNames = data;
        });
        $http.get(baseUrl + 'api/UserMenu/GetCountryList/').success(function (data) {
            $scope.CountryList = data;
        });
        $scope.StateList = [];
        $http.get(baseUrl + 'api/UserMenu/GetStateByCountry/').success(function (data) {
            $scope.Statelist = data;
        });
        $http.get(baseUrl + 'api/UserMenu/GetLocationByState/').success(function (data) {
            $scope.CityList = data;
        });
        $http.get(baseUrl + 'api/UserMenu/GetUserRoleList/').success(function (data) {
            $scope.UserRoleList = data;
        });
        $scope.Id = 0;
        $scope.TittleName = "0";
        $scope.GenderName = "0";
        $scope.Civil_StatusName = "0";
        $scope.DesignationName = "0";
        $scope.Department_Name = "0";
        $scope.CountryName = "0";
        $scope.StateName = "0";
        $scope.LocationName = "0";
        $scope.UserRoleName = "0";
        $scope.ViewUserMenu_Details = function () {
            if ($routeParams.Id != undefined) {
                $scope.Id = $routeParams.Id;
                $http.get(baseUrl + 'api/UserMenu/GetUserById/?Id=' + $scope.Id).success(function (data) {
                    $scope.Users_Id = data.Users_Id;
                    $scope.TittleName = data.Tittle_Id;
                    $scope.ViewTittleName = data.TittleName;
                    $scope.FirstName = data.FirstName;
                    $scope.MiddleName = data.MiddleName;
                    $scope.LastName = data.LastName;
                    $scope.BirthDate = $filter('date')(data.BirthDate, "dd/MMM/yyyy");
                    $scope.Birth_Place = data.Birth_Place;
                    $scope.GenderName = data.Gender_Id;    // data.Gender_Id
                    $scope.ViewGenderName = data.GenderName;
                    $scope.Civil_StatusName = data.Civil_Status_Id;
                    $scope.ViewCivil_StatusName = data.Civil_StatusName;
                    $scope.ReligionName = data.Religion_Id;
                    $scope.ViewReligionName = data.ReligionName;
                    $scope.DepartmentName = data.Department_Id;
                    $scope.ViewDepartmentName = data.DepartmentName;
                    $scope.DesignationName = data.Designation_Id;
                    $scope.ViewDesignationName = data.DesignationName;
                    $scope.UserRoleName = data.UserRole_Id;
                    $scope.ViewUserRolename = data.UserRoleName;
                    $scope.Address = data.Address;
                    $scope.LocationName = data.LocationID;
                    $scope.ViewLocationName = data.LocationName;
                    $scope.StateName = data.StateID;
                    $scope.ViewStateName = data.StateName;
                    $scope.CountryName = data.CountryID;
                    $scope.ViewCountryName = data.CountryName;
                    $scope.PhoneNo_1 = data.PhoneNo_1;
                    $scope.PhoneNo_2 = data.PhoneNo_2;
                    $scope.WhatsApp_PhoneNo = data.WhatsApp_PhoneNo;
                    $scope.Email = data.Email;
                    $scope.Remarks = data.Remarks;
                }).error(function (data) {
                    $scope.error = "an error has occurred while Viewing Usermenu list!" + data;
                });
            }
        };
        $scope.DeleteUserMenus_Details = function () {
            $http.get(baseUrl + 'api/UserMenu/Usermenu_Delete/?Id=' + $scope.Id).success(function (data) {
                alert("UserMenu Details Deleted Successfully");         
                window.location.href = "/Home/Index#/userlist";
            }).error(function (data) {
                $scope.error = "An error has occurred while deleting UserMenu details" + data;
            });
        };
        $scope.UserMenu_AddEdit = function () {
            var obj = {
                Id: $scope.Id,
                Users_Id: $scope.Users_Id,
                TittleName: $scope.TittleName,
                FirstName: $scope.FirstName,
                MiddleName: $scope.MiddleName,
                LastName: $scope.LastName,
                BirthDate: $scope.BirthDate,
                Birth_Place: $scope.Birth_Place,
                GenderName: $scope.GenderName,
                Civil_StatusName: $scope.Civil_StatusName,
                DepartmentName: $scope.DepartmentName,
                DesignationName: $scope.DesignationName,
                UserRoleName: $scope.UserRoleName,
                PhoneNo_1: $scope.PhoneNo_1,
                PhoneNo_2: $scope.PhoneNo_2,
                WhatsApp_PhoneNo: $scope.WhatsApp_PhoneNo,
                Email: $scope.Email,
                Address: $scope.Address,
                LocationName: $scope.LocationName,
                StateName: $scope.StateName,
                CountryName: $scope.CountryName,
                Remarks: $scope.Remarks
            };
            $http.post(baseUrl + '/api/UserMenu/Users_AddEdit/', obj).success(function (data) {            
                $location.path("/userview/" + data);
            }).error(function (data) {
                $scope.error = "An error has occurred while adding UserMenu details!" + data.ExceptionMessage;
            });
        };
        $scope.ViewRedirect = function () {     
            $location.path("/useredit/" + $scope.Id);
        }
        $scope.ListRedirect = function () {       
            $location.path("/userlist");
        }
    }
    ]);

    //This is for User List controller functions//
    EmpControllers.controller("UserListController", ['$scope', '$http', '$filter', '$routeParams', '$location',
    function ($scope, $http, $filter, $routeParams, $location) {
        $scope.listdata = [];
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }
        $scope.UserRoleName = "0";
        $scope.DesignationName = "0";
        $scope.DepartmentName = "0";
        $http.get(baseUrl + 'api/UserMenu/GetUserRoleList/').success(function (data) {
            $scope.UserRoleList = data;
        });

        $http.get(baseUrl + 'api/UserMenu/GetDesignationList/').success(function (data) {
            $scope.DesignationList = data;
        });

        $http.get(baseUrl + 'api/UserMenu/GetDepartmentList/').success(function (data) {
            $scope.DepartNames = data;
        });

        $scope.UserMenu_ListSearch = function () {
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $http.get(baseUrl + 'api/UserMenu/UsersList/?UserRole_Id=' + $scope.UserRoleName + '&FullName=' + $scope.FullName + '&Department_Id=' + $scope.DepartmentName + '&Designation_Id=' + $scope.DesignationName).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
            }).error(function (data) {           
                $scope.error = "An error has occurred while Listing Usermenu Records!" + data;
            })
        };
    }
    ]);


    //This is for Employee controller functions//
    EmpControllers.controller("EmployeeController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

            // Declaration and initialization of Scope Variables.//
            $scope.Mode = $routeParams.Mode;
            if ($routeParams.ModeType == undefined) {
                $scope.ModeType = "1";
            }
            else {
                $scope.ModeType = $routeParams.ModeType;
            }

            $scope.EmployeeId = $window.localStorage['UserId'];
            $scope.Id = 0;
            $scope.IsActive = "1";
            $scope.Title_Name = "0";
            $scope.Gender_Name = "0";
            $scope.Marital_status_Name = "0";
            $scope.Citizenship_Name = "0";
            $scope.CompanyName = "0";
            $scope.Department_Name = "0";
            $scope.Designation_Name = "0";
            $scope.Work_LocationName = "0";
            $scope.LocationName = "0";
            $scope.Grade_Name = "0";
            $scope.Branch_Name = "0";
            $scope.Blood_Group = "0";
            $scope.EmpType_Name = "0";
            $scope.Status_Name = "0";
            $scope.CityName = "0";
            $scope.StateName = "0";
            $scope.CountryName = "0";
            $scope.Location = "0";
            $scope.PerStateName = "0";
            $scope.PerCountryName = "0";
            $scope.PreLocationName = "0";
            $scope.Gender = "0";
            $scope.BloodGroupName = "0";
            $scope.Years = "";
            $scope.listPage = $routeParams.view;
            $scope.EmployeeNo = '';
            $scope.Full_Name = '';
            $scope.uploadphoto = "";
            $scope.uploadme = "";
            $scope.Photo = "";
            $scope.Document_Upload = "";
            $scope.No_of_Children = '';
            $scope.SuffixName = "0";
            $scope.SubDepartmentName = "0";
            $scope.DivisionName = "0";
            $scope.ResidenceCountry = "0";
            $scope.AdditionalCountry_CitizenshipName = "0";
            $scope.PermanentCityName = "0";
            $scope.PermanentStateName = "0";
            $scope.PermanentCountryName = "0";
            $scope.PresentCityName = "0";
            $scope.PresentStateName = "0";
            $scope.PresentCountryName = "0";
            $scope.CommunicationCityName = "0";
            $scope.CommunicationStateName = "0";
            $scope.CommunicationCountryName = "0";
            $scope.LocationNameFilterList = [];
            //$scope.Reason_Leaving_Type = "0";
            $scope.ReasonType = "0";
            $scope.Finance_LocationId="0";
            $scope.PayEffective_Date = "";
            $scope.OfficialEmail = "";

            //Method for alert cannot edit inactived employee record
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }
            /*calling Alert message for cannot edit Relieve employee record function */
            $scope.Active_ErrorFunction = function () {
                alert("Relieved employee record cannot be activated");
            };

            $scope.Active_ResetFunction = function()
            {
                alert("Relieved employee password cannot be changed");
            };
            // List Page Pagination.
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.tabList = [];


            $scope.Joiningdatecalculation = function () {

                $scope.Today_Date = $filter('date')(new Date(), 'DD-MMM-YYYY');
                $scope.Join_Day = moment(ParseDate($scope.Today_Date).subtract(18, 'years')).format("DD-MMM-YYYY");
                // console.log($scope.Join_Day);

                if ((ParseDate($scope.BirthDate)) > (ParseDate($scope.Join_Day))) {
                    alert("Age should be more than 18 years.Please enter a valid Date of Birth");
                    return false;
                }
                return true;
                //if (parseDate($scope.Join_Day <= 17)) {
                //        alert("Joining should be greater than birthdate ");
                //        return false;
                //   }

            };


       

            // Declaration and initialization of Scope Variables.
            $scope.ReasonLeaving_Type = "0";
            $scope.Id = 0;
            /* Validating the Relieve page mandatory fields not null.
            check these fields
            Employee_No,Resignation_Date,Reason_Leaving_Type,Leaving_Reason,Notice_Period,
            Last_Working_Day and showing alert message when it is null.
            */
            $scope.ValidationcontrolsExit = function () {

                //if (typeof ($scope.Employee_No) == '' || $scope.BranchSelected == undefined) {
                //    alert("Please select Employee");
                //    return false;
                //}
                if (typeof ($scope.Resignation_Date) == "undefined" || $scope.Resignation_Date == "") {
                    alert("Please select Resignation Date");
                    return false;
                }
                else if (typeof ($scope.ReasonLeaving_Type) == "undefined" || $scope.ReasonLeaving_Type == 0) {
                    alert("Please select Reason Leaving Type");
                    return false;
                }
                else if (typeof ($scope.Notice_Period) == "undefined" || $scope.Notice_Period == 0) {
                    alert("Please enter Notice Period");
                    return false;
                }
                else if (typeof ($scope.Leaving_Reason) == "undefined" || $scope.Leaving_Reason == "") {
                    alert("Please enter Leaving Reason");
                    return false;
                }
                else if (typeof ($scope.Last_Working_Day) == "undefined" || $scope.Last_Working_Day == "") {
                    alert("Please select Last Working Day");
                    return false;
                }
                    //else if ((ParseDate($scope.Last_Working_Day)) < (ParseDate($scope.Resignation_Date))) {
                    //    alert("Please select Last Working day greater than or equal to Resignation day");
                    //    return false;
                    //}
                else if ((ParseDate($scope.Payment_Date)) < (ParseDate($scope.Last_Working_Day))) {
                    alert("Please select Payment day greater than or equal to Last working day");
                    return false;
                }
                else if ((ParseDate($scope.Payment_Date)) < (ParseDate($scope.Resignation_Date))) {
                    alert("Please select Payment day greater than or equal to Resignation day");
                    return false;
                }
                else if (isDate($scope.Resignation_Date) == false) {
                    alert("Resignation Date is invalid date format, please enter dd-mm-yy");
                    return false;
                }
                    //else if (isDate($scope.Last_Working_Day) == false) {
                    //    alert("Last Working Day is invalid date format, please enter dd-mm-yy");
                    //    return false;
                    //}
                else if (isDate($scope.Payment_Date) == false) {
                    alert("Payment Date is invalid date format, please enter dd-mm-yy");
                    return false;
                }

                return true;

            };

            /* Open the create pop up window */
            $scope.AddEmployeeReleivePopUP = function (LPH) {
                //  $scope.ClearPopup();         
        
                $scope.ViewEmployeeDetails();
                $scope.Id = LPH;
                $scope.AttendanceEmployeeList(); 
                angular.element('#EmployeeReleiveModal').modal('show');
            }


            $scope.DepartmentFilterList = [];
            $scope.DepartmentList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetDepartment/').success(function (data) {
                // all Department records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DepartmentFilterList = data;
                // only active Department
                $scope.DepartmentList = $ff(data, { IsActive: 1 });
            });

            $scope.RelieveReasonList = [];
            $scope.RelieveReasonNameList = [];
            $http.get(baseUrl + 'api/Common/RelieveReasonTypeList/').success(function (data) {
                $scope.RelieveReasonList = data;
                $scope.RelieveReasonNameList = $ff(data, { Active: 1 });
            });





            $scope.DepartmentName = "0";
            $scope.Reason_Leaving_Type = "0";



            $scope.Department_Name = "";
            $scope.Name = "";
            $scope.PeriodFrom = "";
            $scope.PeriodTo = "";
            $scope.Id = 0;
            $scope.flag = 0;
            $scope.emptydata = [];
            $scope.rowCollection = [];



            /* 
            Calling api method for the dropdown list in the html page for the fields 
            RelieveReasonList,CompanyNameList,Locaiton,Company,Department,Employee List
            */
            $scope.RelieveReasonList = [];
            $http.get(baseUrl + 'api/Common/RelieveReasonTypeList/').success(function (data) {
                $scope.RelieveReasonList = data;
            });


            $scope.CompanyNameList = [];
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                $scope.CompanyNameList = data;
            });

            $scope.CommonEmployee_Filterlist = [];
            $scope.Employee_Filterlist = [];
            $scope.EmployeeList = function () {
                if ($scope.CommonEmployee_Filterlist != undefined) {
                    $scope.CommonEmployee_Filterlist = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {

                        $scope.CommonEmployee_Filterlist = $ff(data, { IsActive: 1 });
                        // console.log($scope.CommonEmployee_Filterlist);
                    });
                }
            };


            $scope.Employee_Filterlist = [];
            $scope.EmployeeListfilter = function () {
                if ($scope.Employee_Filterlist != undefined) {
                    $scope.Employee_Filterlist = [];
                    $http.get(baseUrl + 'api/EmployeeMaster/ReleiveEmployeeList/').success(function (data) {

                        $scope.Employee_Filterlist = data;
                        // console.log($scope.CommonEmployee_Filterlist);
                    });
                }
            };



            //$scope.Effective_Date = $filter('date')(new Date(), 'dd/MMM/yyyy');
            if (event.preventDefault) {
                event.preventDefault();
            } else if (typeof event.returnValue !== "undefined") {
                event.returnValue = false;
            }

            //This is for Last working day field auto fill calculation//
            $scope.calculateRelievingDate = function () {
                //if ($scope.Last_Working_Day == '')
                {
                    //if (!(angular.isDate($filter('date')(new Date(new Date($scope.Resignation_Date).getTime() + $scope.Notice_Period * 24 * 60 * 60 * 1000), 'dd-MMM-yyyy')))) {
                    //    $scope.Last_Working_Day = $filter('date')(new Date(new Date($scope.Resignation_Date).getTime() + $scope.Notice_Period * 24 * 60 * 60 * 1000), 'dd-MMM-yyyy');
                    $scope.Last_Working_Day = moment(ParseDate($scope.Resignation_Date).add('d', $scope.Notice_Period)).format("DD-MMM-YYYY");
                    // $scope.Last_Working_Day = $filter('date')(new Date(ParseDate($scope.Resignation_Date).add('days', $scope.Notice_Period)));
                }
            }

            /*This is for Auto fill Employee Details by selected Employee code */
            $scope.AttendanceEmployeeList = function () {
         
                $http.get(baseUrl + 'api/EmployeeMaster/EmployeeNameDetailsList/?Id=' + $scope.Id).success(function (data) {              
                    //  $scope.Employee_Id = data.Id;
                    $scope.Employee_No = data.Employee_No;
                    $scope.Employee_Name = data.FullName;
                    $scope.Department_Name = data.Department_Name;
                    $scope.Designation_Name = data.Designation_Name;
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };

            $scope.loading = false;

            //Calling api method for Update Employee Record set inactive //
            $scope.EmployeeDetails_Relieve = function () {
                // $scope.calculateRelievingDate();
                //return
                if ($scope.ValidationcontrolsExit() == true) {

                    //  $scope.EmployeeNo = $scope.BranchSelected.originalObject.Employee_No;
                    var obj = {
                        Id: $scope.Id,
                        Resignation_Date: $scope.Resignation_Date,
                        Reason_Leaving_Type: $scope.ReasonLeaving_Type,
                        Leaving_Reason: $scope.Leaving_Reason,
                        Notice_Period: $scope.Notice_Period,
                        Last_Working_Day: $scope.Last_Working_Day,
                        Remarks: $scope.Remarks == "" ? null : $scope.Remarks,
                        Payment_Date: $scope.Payment_Date == "" ? null : $scope.Payment_Date,
                    };

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 second

                    $http.post(baseUrl + '/api/EmployeeMaster/Employee_Relieve/', obj).success(function (data) {
                   
                        $scope.ClearPopup();
                        angular.element('#EmployeeReleiveModal').modal('hide');
                        $scope.EmployeeList_Go();
                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Patient details!" + data.ExceptionMessage;
                    });

                }
            };

            //This is for List page Redirect Function
            $scope.ListRedirect = function () {
                $location.path("/ListEmployee/0/0");

            }

            $scope.CancelPopup = function () {
                angular.element('#EmployeeReleiveModal').modal('hide');
                $scope.ClearPopup();
            }

            //This is for clear function//
            $scope.ClearPopup = function () {
                $scope.CommonEmployee_Filterlist = [];
                $scope.Last_Working_Day = "";
                //$scope.Employee_Id = "";
                //   $scope.Employee_No = "";
                //   $scope.Employee_Name = "";
                // $scope.Department_Name = "";
                //   $scope.Designation_Name = "";
                $scope.Resignation_Date = "";
                $scope.ReasonLeaving_Type = "0";
                $scope.Leaving_Reason = "";
                $scope.Notice_Period = "";
                $scope.Remarks = "";
                $scope.Payment_Date = "";
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            };


            /* Validating the create page mandatory fields not null.
               check these fields
                Employee_No,Title_Name,FirstName,LastName,BirthDate,Date_Of_Joining,Status_Name,Gender_Name,Department_Name,Designation_Name,
                Location,UserName,Date fields and showing alert message when it is null.
            */


            $scope.Validationcontrols = function () {


                if (typeof ($scope.Employee_No) == "undefined" || $scope.Employee_No == "") {
                    alert("Please enter Employee Number");
                    return false;
                }
                else if (typeof ($scope.Title_Name) == "undefined" || $scope.Title_Name == 0) {
                    alert("Please select Title Name");
                    return false;
                }
                else if (typeof ($scope.FirstName) == "undefined" || $scope.FirstName == "") {
                    alert("Please enter First Name");
                    return false;
                }
                else if (typeof ($scope.LastName) == "undefined" || $scope.LastName == "") {
                    alert("Please enter Last Name");
                    return false;
                }
                else if (typeof ($scope.BirthDate) == "undefined" || $scope.BirthDate == "") {
                    alert("Please select DOB");
                    return false;
                }

                else if (typeof ($scope.Date_Of_Joining) == "undefined" || $scope.Date_Of_Joining == "") {
                    alert("Please select Date of Joining");
                    return false;
                }
                else if (typeof ($scope.Gender_Name) == "undefined" || $scope.Gender_Name == 0) {
                    alert("Please select Gender");
                    return false;
                }
                else if (typeof ($scope.Status_Name) == "undefined" || $scope.Status_Name == 0) {
                    alert("Please select Status");
                    return false;
                }
                else if (typeof ($scope.Department_Name) == "undefined" || $scope.Department_Name == 0) {
                    alert("Please select Department");
                    return false;
                }
                else if (typeof ($scope.Designation_Name) == "undefined" || $scope.Designation_Name == 0) {
                    alert("Please select Designation");
                    return false;
                }
                else if (typeof ($scope.Location) == "undefined" || $scope.Location == 0) {
                    alert("Please select Location");
                    return false;
                }
                else if (typeof ($scope.UserName) == "undefined" || $scope.UserName == '') {
                    alert("Please enter User Name");
                    return false;
                }
                else if (typeof ($scope.Password) == "undefined" || $scope.Password == '') {
                    alert("Please enter Password");
                    return false;
                }
                else if($scope.PFApplicable == true ){
                    if (typeof ($scope.PF_Number) == "undefined" || $scope.PF_Number == '') {
                        alert("Please enter PF No.");
                        return false;
                    }
                }

                else if($scope.ESIApplicable == true ){
                    if (typeof ($scope.ESI_Number) == "undefined" || $scope.ESI_Number == '') {
                        alert("Please enter ESI No.");
                        return false;
                    }
                }

                else if (isDate($scope.BirthDate) == false) {
                    alert("Birth Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }


                else if (isDate($scope.Date_Of_Joining) == false) {
                    alert("Date Of Joining is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Date_Of_Confirmation) == false) {
                    alert("Date Of Confirmation Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.EPF_DOJ) == false) {
                    alert("Date Of EPF DOJ is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.EPF_DOE) == false) {
                    alert("Date Of Confirmation Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.EPS_DOJ) == false) {
                    alert("Date Of EPF DOE is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.EPS_DOE) == false) {
                    alert("Date Of EPS DOE is invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Spouse_DOB) == false) {
                    alert("Spouse Date Of Birth is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Anniversary_Date) == false) {
                    alert("Anniversary Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Years) == false) {
                    alert("Experience Years Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Passport_Validity) == false) {
                    alert("Passport Expiry Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Admission_Date) == false) {
                    alert("Admission Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Resignation_Date) == false) {
                    alert("Resignation Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Last_Working_Day) == false) {
                    alert("Last Working Day Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Payment_Date) == false) {
                    alert("Payment Date is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }

                //else if (EmailFormate($scope.Email1) == false) {
                //    alert("Invalid email format");
                //    return false;
                //}
                //else if (EmailFormate($scope.Email2) == false) {
                //    alert("Invalid email format");
                //    return false;
                //}
                if ($scope.Id > 0 && $scope.DuplicateId == $scope.Employee_Selected.originalObject.Id) {
                    alert("Not a Valid Reporting Manager");
                    return false;
                }

                else if (EmailFormate($scope.OfficialEmail) == false) {
                    alert("Official Email is in invalid email format");
                    return false;
                }
                else if (EmailFormate($scope.Email1) == false) {
                    alert("Primary Email is in invalid email format");
                    return false;
                }
                else if (EmailFormate($scope.Email2) == false) {
                    alert("Secondary Email is in invalid email format");
                    return false;
                }
                else if (EmailFormate($scope.Email2) == false) {
                    alert("Secondary Email is in invalid email format");
                    return false;
                }
            
                else if (ParseDate($scope.EPF_DOJ) > ParseDate($scope.EPF_DOE)) {
                    alert("EPF DOE should be greater than EPF DOJ");
                    return false;
                }

                else if (ParseDate($scope.PayEffective_Date) < ParseDate($scope.Date_Of_Confirmation)) {
                    alert("Pay Effective should be greater than Date Of Confirmation");
                    return false;
                
                }
                else if (ParseDate($scope.EPS_DOJ) > ParseDate($scope.EPS_DOE)) {
                    alert("EPF DOE should be greater than EPF DOJ");
                    return false;
                }
                else if (typeof (!($scope.Passport_Validity)) == "undefined" || (!$scope.Passport_Validity) == "") {
                    if ($scope.Passport_Number == null) {
                        alert("Please enter Passport No.");
                        return $scope.Passport_Number;
                    };
                }

          

                return true;

            };

            $scope.ListValidation = function () {
                if (($scope.Date_Of_Joining_From != "0") && ($scope.Date_Of_Joining_To != "0")) {
                    if ((ParseDate($scope.Date_Of_Joining_To) < ParseDate($scope.Date_Of_Joining_From))) {
                        alert("Joining Date From should not be greater than Joining Date To");
                        return To_Year;
                    }
                }
                if (($scope.Date_Of_Confirmation_From != "0") && ($scope.Date_Of_Confirmation_To != "0")) {
                    if ((ParseDate($scope.Date_Of_Confirmation_To) < ParseDate($scope.Date_Of_Confirmation_From))) {
                        alert("Confirmation Date From should not be greater than Confirmation Date To");
                        return To_Year;
                    }
                }
            };







            /*This is for Change Password fucntion*/

            /* Validating the create page mandatory fields
           checking mandatory for the follwing fields based on password policy
           NewPasssword,confirmpassword,minimum length,maximum length,minimum special characters,minimum characters,allow the username
           and showing alert message when it is null.
           */


            $scope.passwordpolicy = function () {
                $scope.Id = 0;
                //$scope.DuplicateId = "0";
                // if ($routeParams.Id != undefined) {
                //  $scope.Id = $routeParams.Id;
                $http.get(baseUrl + 'api/PasswordPolicy/ViewEditPasswordPolicy/?Id=' + $scope.Id).success(function (data) {

                    //$scope.DuplicateId = data.Id;
                    $scope.MinLength = data.MinLength;
                    $scope.MaxLength = data.MaxLength;
                    $scope.MinOneNumChar = data.MinOneNumChar;
                    $scope.MinOneSpecChar = data.MinOneSpecChar;
                    $scope.WithoutChar = data.WithoutChar;
                    $scope.AllowUserName = data.AllowUserName;
                    $scope.AtleastOneUpperCase = data.AtleastOneUpperCase;
                });
            };

            $scope.passwordpolicy();

            $scope.Validationcontrolspassword = function () {

                $scope.passwordpolicy();

                //if (($scope.OldPassword) != null) {

                if (typeof ($scope.OldPassword) == "undefined" || $scope.OldPassword == '') {
                    alert("Please enter Current Password");
                    return false;
                }
                else if (typeof ($scope.NewPassword) == "undefined" || $scope.NewPassword == '') {
                    alert("Please enter New Password");
                    return false;
                }
                else if (typeof ($scope.confirmpassword) == "undefined" || $scope.confirmpassword == '') {
                    alert("Please enter Confirm Password");
                    return false;
                }

                else if (($scope.confirmpassword) != ($scope.NewPassword)) {
                    alert("New password and Confirm Password mismatch Please enter same password");
                    return false;
                }

                else if (parseInt(('' + $scope.NewPassword).length) < parseInt($scope.MinLength)) {
                    alert("Your password length is too small");
                    return false;
                }

                else if (parseInt(('' + $scope.NewPassword).length) > parseInt($scope.MaxLength)) {
                    alert("Your password length is too long");
                    return false;
                }


                $scope.flag = 0;
                $scope.flagchar = 0;

                var newpass = ('' + $scope.NewPassword).length;

                /* Validation for new password have a special character password */
                if (($scope.MinOneSpecChar != null)) {

                    var newpasschar = ('' + $scope.NewPassword).length;
                    var format = /^[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]*$/;

                    while (newpasschar--) {

                        var y = $scope.NewPassword.substring(newpasschar, newpasschar + 1);

                        if (y.match(format)) {

                            $scope.flagchar += 1;
                        }
                    }

                    if ($scope.flagchar <= 0) {
                        alert("Please enter atleast one special character ");
                        return false;
                    }
                    // return false;

                }




                $scope.flagspl = 0;
                $scope.flagchars = 0;

                /* Validation for new password have not a special character and number in password */

                if (($scope.WithoutChar != null)) {

                    var newpasssplchar = ('' + $scope.NewPassword).length;
                    while (newpasssplchar--) {
                        var z = $scope.NewPassword.substring(newpasssplchar, newpasssplchar + 1);

                        var leng = ('' + $scope.WithoutChar).length;
                        while (leng--) {
                            var a = $scope.WithoutChar.substring(leng, leng + 1);

                            if (angular.equals(z, a)) {
                                //if (z.valueOf() == a.valueOf()) {
                                //if (typeof(z) == typeof(a)) {                       
                                //$scope.flagspl += 1;
                                alert($scope.WithoutChar + "  characters not allowed, please check");
                                return false;
                            }

                        }

                    }
                }


                /* Validation for new password have a number password */
                if (($scope.MinOneNumChar != null)) {

                    while (newpass--) {

                        var x = $scope.NewPassword.substring(newpass, newpass + 1);
                        if (!isNaN(x)) {

                            $scope.flag += 1;
                        }

                    }
                    if ($scope.flag <= 0) {
                        alert("Please enter atleast one number ");
                        return false;
                    }

                }




                /* Allow the user name same as password*/
                $scope.flagAllow = 0;
                if (($scope.AllowUserName == null)) {
                    $scope.username = $window.localStorage['Username'];
                    var user = $scope.username;
                    var pwd = $scope.NewPassword

                    if (user == pwd) {
                        alert("Username and password is same, please check the password");
                        return false;
                    }

                }


                $scope.flagUpper = 0;
                $scope.flagcharUpper = 0;

                var newpass = ('' + $scope.NewPassword).length;

                /* Validation for new password have a special character password */
                if (($scope.AtleastOneUpperCase != null)) {

                    var newpassupperchar = ('' + $scope.NewPassword).length;
                    var format = /[A-Z]/;

                    while (newpassupperchar--) {

                        var y = $scope.NewPassword.substring(newpassupperchar, newpassupperchar + 1);

                        if (y.match(format)) {

                            $scope.flagcharUpper += 1;
                        }
                    }

                    if ($scope.flagcharUpper <= 0) {
                        alert("Please enter atleast one uppercase letter ");
                        return false;
                    }
                    // return false;

                }


                return true;
            };



            $scope.resetpass = function () {
                $scope.NewPassword = "",
                $scope.OldPassword = "",
                $scope.confirmpassword = ""
            };

            /*
            Call the api method for insert and Update the record for a change password
            and display the record of selected change password when Id is greater than 0
            in edit.html and provide an option for create and modify the change password and save the change password record
            */
            $scope.changepassword = function () {

                $scope.ModifiedUser_Id = "0";

                $scope.PasswordId = 0;

                //  if ($scope.Changepasswordvalidation() == true) {
                if ($scope.Validationcontrolspassword() == true) {
                    //  if ($scope.Validationchangepasscontrols() == true) {


                    var obj = {
                        //Id: $scope.Id,
                        Id: $scope.PasswordId,
                        NewPassword: $scope.NewPassword,
                        OldPassword: $scope.OldPassword,
                        NewPassword: $scope.confirmpassword,
                        ModifiedUser_Id: $scope.ModifiedUser_Id
                    }

                    //  $scope.changepasswordId = $window.localStorage['UserId'];
          

                    $http.get(baseUrl + 'api/Login/ChangePassword/?Id=' + $scope.DuplicateId + '&NewPasssword=' + $scope.NewPassword + '&OldPassword=' + $scope.OldPassword + '&confirmpassword=' + $scope.confirmpassword + '&ModifiedUser_Id=' + $scope.ModifiedUser_Id).success(function (data) {

                        if (data > 0) {

                            alert('Password changed successfully  ');
                            //$scope.myFunction();
                        }

                        else {
                            alert("Not a valid password");
                        }
                        $scope.resetpass();
                    }).error(function (data) {

                        $scope.error = "Problem in checking login name duplicate!" + data.ExceptionMessage;
                    });
                }
                //  }               
            };


            $scope.Restpasswordpopup = function (R) {
                //  $scope.ClearAttendancePopup();
                $scope.Id = R;
           
                $scope.ViewEmployeePhoto();           
                angular.element('#EmployeeModel').modal('show');
          
                //$scope.resetpassword();
            }


            /* Validating the create page mandatory fields
        checking mandatory for the follwing fields
        NewPasssword,ReenterPassword
        and showing alert message when it is null.
        */
            $scope.Validationresetcontrols = function () {

                //if (typeof ($scope.FullName) == "undefined" || $scope.Employee_Selected == undefined) {
                //    alert("Please select Employee Name");
                //    return false;
                //}
                if (typeof ($scope.NewPasssword) == "undefined" || $scope.NewPasssword == '') {
                    alert("Please enter New password");
                    return false;
                }
                if (typeof ($scope.ReenterPassword) == "undefined" || $scope.ReenterPassword == '') {
                    alert("Please enter Re-enter password");
                    return false;
                }
                if (($scope.NewPasssword) != ($scope.ReenterPassword)) {
                    alert("New password and Re-enter Password mismatch please enter same password");
                    return NewPasssword;
                }

                return true;

            };

            /*
        Call the api method for insert and Update the record for a reset password
        and display the record of selected reset password when Id is greater than 0
        in edit.html and provide an option for create and modify the reset password and save the reset password record
        */
            $scope.resetpassword = function () {
                ($scope.Validationresetcontrols() == true)
            
                // $scope.MasterId = $window.localStorage['UserId'];
                //  $scope.MasterId = $routeParams.Id
     
                //$scope.Employee_Id = $routeParams.Id;             
            
           
                {

                    var obj = {
                        Id: $scope.Id,
                        Password: $scope.NewPasssword,
                        Password: $scope.ReenterPassword,
                        // FullName: $scope.FullName

                    }
                 
                 
                    $scope.ResetpasswordId = $window.localStorage['UserId'];
                    //if ($scope.ResetpasswordId == -1) {
                    //    alert("Not a valid password");
                    //    return false;
                    //}
                    //else {

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 second

                    $http.get(baseUrl + 'api/Login/ResetPassword/?Id=' + $scope.Id + '&NewPasssword=' + $scope.NewPasssword + '&ReenterPassword=' + $scope.ReenterPassword).success(function (data) {

                        if ($scope.ReenterPassword == $scope.NewPasssword) {
                            alert('Reset Password successfully  ');
                        }                    
                                                   
                        angular.element('#EmployeeModel').modal('hide');                         

                        $scope.resetclear();

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Patientdetails" + data;
                    });
                }
                //   }
                //}
                // }
            };

            /* Clear the reset password */
            $scope.resetclear = function () {
                $scope.NewPasssword = "";
                $scope.ReenterPassword = "";
                $scope.Password = "";
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.FullName = "";
            };





            $scope.clearphoto = function () {
                $scope.Photo = "";
                $scope.Photo = 0;
                $scope.Photo = null;
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.FullName = "";
            };

            //$scope.Autolist = [];
            //$scope.Autofilterlist = [];
            //$http.get(baseUrl + 'api/Login/EmployeeName_Resetpwd/').success(function (data) {
            //    $scope.Autofilterlist = data;
            //    $scope.Autolist = data;
            //    // $scope.EmpNameList = data;
            //});


            ///*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            //$scope.Autocompletefilter = function () {
            //    if ($scope.IsActive == 1) {

            //        $scope.Autolist = [];
            //        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

            //    }
            //    else if ($scope.IsActive == 0) {
            //        $scope.Autolist = [];
            //        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

            //    }
            //    else if ($scope.IsActive == -1) {
            //        $scope.Autolist = [];
            //        $scope.Autolist = $scope.Autofilterlist;
            //    }
            //};


            $scope.Employee_Savefunction = function () {

                if ($scope.NewPassword = null) {
                    $scope.EmployeeDetails_AddEdit();


                }
                else {
                    $scope.changepassword();
                }

            };


            /* Clear popup function */
            $scope.Clearbranch = function () {
                $scope.Branch_Name = "0";
                $scope.BranchName = "0";
            }

            /* Validating the list page filters date format validations
               check these fields
                Date of Joining From ,Date_Of_Joining_To,Date_Of_Confirmation_From,
            */
            $scope.ListValidationcontrols = function () {

                if (isDate($scope.Date_Of_Joining_From) == false) {
                    alert("Date of Joining From is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Date_Of_Joining_To) == false) {
                    alert("Date of Joining To is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Date_Of_Confirmation_From) == false) {
                    alert("Date of Confirmation From  is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Date_Of_Confirmation_To) == false) {
                    alert("Date of Confirmation To is in invalid date format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            }


            /* THIS IS FOR Keycode FILTER VALUE FUNCTION */
            $scope.filtervalue = function () {
                if (isNaN(String.fromCharCode($event.keyCode))) {
                    $event.preventDefault();
                }
            };

            /* 
            Calling api method for the dropdown list in the html page for the fields 
            Title,suffix,Country,State,Locaiton,Company,Department,Designation, citizenship,marital status,Reportingmanager list, 
            */
            $scope.CompanyNameFilterList = [];
            $scope.CompanyNameList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetCompanyMaster_GetCompanyName/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyNameFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { IsActive: 1 });

            });

            $scope.DepartmentFilterList = [];
            $scope.DepartmentList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetDepartment/').success(function (data) {
                // all Department records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DepartmentFilterList = data;
                // only active Department
                $scope.DepartmentList = $ff(data, { IsActive: 1 });
            });


            $scope.Autolist = [];
            $scope.AutolistDetails = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                //Employee records list(fullname and employee code) filter by company and department
                $scope.Autolist = data;
                $scope.AutolistDetails = $ff(data, { IsActive: 1 });
            });


            $scope.ReportingmanagerDetails_List = [];
            $http.get(baseUrl + 'api/EmployeeMaster/ReportingManagerList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&ReportingManagerId=0').success(function (data) {
                //ReportingManager records list(fullname and employee code) filter by company and department
                $scope.ReportingmanagerDetails_List = data;
                $scope.ReportingmanagerDetails = $ff(data, { IsActive: 1 });
            });



            /* TITLE NAME */
            $scope.TitleFilterList = [];
            $scope.TitleList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetTitle/').success(function (data) {
                // all Title records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.TitleFilterList = data;
                // only active Title
                $scope.TitleList = $ff(data, { IsActive: 1 });
            });

            /* GENDER NAME */
            $scope.GenderNameFilterList = [];
            $scope.GenderNameList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetGenderName/').success(function (data) {
                // all Gender records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.GenderNameFilterList = data;
                // only active Gender
                $scope.GenderNameList = $ff(data, { IsActive: 1 });
            });



            //$scope.mflag = 0;

            //$scope.genderlistflag = function () {

            //    $http.get(baseUrl + 'api/EmployeeMaster/GetGenderName/').success(function (data) {
                
            //        $scope.GenderNameFilterList = data;

            //        angular.forEach($scope.GenderNameFilterList, function (value, index) {

            //            $scope.Gendername = value.Gender_Name;
            //            console.log($scope.Gendername);
            //            var maleobject = "male";
            //            var maleobj = maleobject.toUpperCase();

            //            var femaleobject = "female";
            //            var femaleobj = femaleobject.toUpperCase();

            //            var otherobject = "others";
            //            var otherobj = otherobject.toUpperCase();
            //            /*
            //            var maleobject = "";
            //            var maleobject = value.Gender_Name;

            //            console.log(maleobject);
                 
            //            if ($scope.Gendername == "Male") {
                      
            //                var maleobject = "male";
            //                var maleobj = maleobject.toUpperCase();

            //                $scope.mflag = maleobj;
            //                return 1;
            //                return 1;
            //            }
            //            else if ($scope.Gendername == "Female")
            //            {
            //                var femaleobject = "female";
            //                var femaleobj = femaleobject.toUpperCase();
            //                $scope.mflag = femaleobj;
            //                return 2;
            //            }
            //            else if ($scope.Gendername == "Both") {

            //                alert("3");
            //                var otherobject = "Both";
            //                var otherobj = otherobject.toUpperCase();
            //                $scope.mflag = otherobj;
            //                return 3;
            //            }
            //            */                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
            //            console.log($scope.mflag);
            //        })
            //    });
            //};


            // $scope.genderlistflag();

            /* STATUS */
            $scope.StatusFilterList = [];
            $scope.StatusList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetStatus/').success(function (data) {
                // all Status records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.StatusFilterList = data;
                // only active Status
                $scope.StatusList = $ff(data, { IsActive: 1 });
            });


            /* MARITAL STATUS */
            $scope.MaritalStatusFilterList = [];
            $scope.MaritalStatusList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetMaritalStatus/').success(function (data) {
                // all Marital Status records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.MaritalStatusFilterList = data;
                // only active Marital Status
                $scope.MaritalStatusList = $ff(data, { IsActive: 1 });
            });


            /* BLOOD GROUP */
            $scope.BloodGroupFilterList = [];
            $scope.BloodGroupList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetBloodGroup/').success(function (data) {
                // all Blood Group records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.BloodGroupFilterList = data;
                // only active Blood Group List
                $scope.BloodGroupList = $ff(data, { IsActive: 1 });
            });

            /* DESIGNATION NAME */
            $scope.DesignationFilterList = [];
            $scope.DesignationList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetDesignation/').success(function (data) {
                // all Designation records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DesignationFilterList = data;
                // only active Designation List
                $scope.DesignationList = $ff(data, { IsActive: 1 });
            });

            /* TYPE MASTER */
            $scope.EmpTypeFilterList = [];
            $scope.EmpTypeList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetTypeMaster/').success(function (data) {
                // all Employee Type records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.EmpTypeFilterList = data;
                // only active Employee Type List
                $scope.EmpTypeList = $ff(data, { IsActive: 1 });
            });

            /* CITIZENSHIP */
            $scope.CitizenshipFilterList = [];
            $scope.CitizenshipList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetCitizenship/').success(function (data) {
                // all Citizenship records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CitizenshipFilterList = data;
                // only active Citizenship List
                $scope.CitizenshipList = $ff(data, { IsActive: 1 });
            });

            /* GRADE */
            $scope.GradeFilterList = [];
            $scope.GradeList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetGradeMaster/').success(function (data) {
                // all Grade records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.GradeFilterList = data;
                // only active Grade List
                $scope.GradeList = $ff(data, { IsActive: 1 });
            });

            ///* BRANCH NAME */
            //$scope.BranchFilterList = [];
            //$scope.BranchList = [];
            //$http.get(baseUrl + 'api/EmployeeMaster/GetBranch/').success(function (data) {
            //    // all Branch records list including active and inactive 
            //    // used for list page DD and inactive records filtering
            //    $scope.BranchFilterList = data;
            //    // only active Branch List
            //    $scope.BranchList = $ff(data, { IsActive: 1 });
            //});

            $scope.CompanyBranchList = [];
            $scope.CompanyBranchNameList = [];
            $scope.Company_Name = "0";

            $scope.Company_Name = "0";

            //populate branch for the selected company
            $scope.Branchlist = function (CompanyId) {

                if ($scope.CompanyBranchNameList != undefined) {  // to avoid going to DB each time when Search clicked
                    $scope.CompanyBranchNameList = [];
                    $http.get(baseUrl + 'api/CompanyBranchMaster/GetBranchList/?CompanyID=' + CompanyId).success(function (data) {

                        $scope.CompanyBranchList = data;
                        $scope.CompanyBranchNameList = $ff(data, { Active: 1 });

                    });
                }
            };


            /*Suffix Name*/
            $scope.SuffixFilterList = [];
            $scope.SuffixList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetSuffixList/').success(function (data) {
                // all Suffix records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.SuffixFilterList = data;
                // only active Suffix  List
                $scope.SuffixList = $ff(data, { IsActive: 1 });
            });

            /*Sub DepartmentName*/
            $scope.SubDepartmentFilterList = [];
            $scope.SubDepartmentList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetSubDepartmentList/').success(function (data) {
                // all SubDepartment records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.SubDepartmentFilterList = data;
                // only active SubDepartment  List
                $scope.SubDepartmentList = $ff(data, { IsActive: 1 });
            });

            /*Division*/
            $scope.DivisionFilterList = [];
            $scope.DivisionList = [];
            $http.get(baseUrl + 'api/EmployeeMaster/GetDivisionList/').success(function (data) {
                // all Division records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DivisionFilterList = data;
                // only active Division  List
                $scope.DivisionList = $ff(data, { IsActive: 1 });
            });

            $scope.CountryNameFilterList = [];
            $scope.CountryList = [];
            $scope.CountryNameList = [];
            //$scope.CountryList = [];
            //$scope.CountryNameList = [];
            $scope.ResidenceCountryInactiveFlag = [];
            // $scope.Aadharcountry_name = [];
            $http.get(baseUrl + 'api/Common/CountryList/').success(function (data) {

                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CountryList = data;
                // only active company
                $scope.CountryNameList = $ff(data, { IsActive: 1 });
                //$scope.Aadharcountry_name = data;
                // console.log($scope.Aadharcountry_name);
            });

            $scope.StateNameFilterList = [];
            $scope.StateList = [];
            $scope.StateNameList = [];
            $http.get(baseUrl + 'api/Common/StateList/').success(function (data) {

                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.StateList = data;
                // only active company
                $scope.StateNameList = $ff(data, { IsActive: 1 });
            });

            $scope.CityList = [];
            $scope.CityNameList = [];
            $http.get(baseUrl + 'api/Common/GetLocationList/').success(function (data) {

                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CityList = data;
                // only active company
                $scope.CityNameList = $ff(data, { Active: 1 });
            });


            $scope.RelieveReasonList = [];
            $scope.RelieveReasonNameList = [];
            $http.get(baseUrl + 'api/Common/RelieveReasonTypeList/').success(function (data) {
                $scope.RelieveReasonList = data;
                $scope.RelieveReasonNameList = $ff(data, { Active: 1 });
            });

            /* THIS IS FOR AGE COUNT FUNCTION */
            $scope.Agecount = function () {
                var yrs = $scope.Years;
                var daysInMonth = 30.436875;
                var dob = new Date(yrs);
                var aad;
                aad = new Date();
                var yearAad = aad.getFullYear();
                var yearDob = dob.getFullYear();
                var years = yearAad - yearDob;
                $scope.Birthyear = years;
                dob.setFullYear(yearAad);
                var aadMillis = aad.getTime();
                var dobMillis = dob.getTime();
                if (aadMillis < dobMillis) {
                    --years;
                    dob.setFullYear(yearAad - 1);
                    dobMillis = dob.getTime();
                }
                var days = (aadMillis - dobMillis) / 86400000;
                var monthsDec = days / daysInMonth;
                var months = Math.floor(monthsDec);
                days = Math.floor(daysInMonth * (monthsDec - months));
                var display = "";
                if (yrs != "")
                    display = years + " Years " + months + " months " + days + " days";
                return display;
            };

            //This is for count experience year function//
            $scope.yearcount = function () {
                var yrs = $scope.Years;
                var daysInMonth = 30.436875;
                var dob = new Date(yrs);
                var aad;
                aad = new Date();
                var yearAad = aad.getFullYear();
                var yearDob = dob.getFullYear();
                var years = yearAad - yearDob;
                dob.setFullYear(yearAad);
                var aadMillis = aad.getTime();
                var dobMillis = dob.getTime();
                if (aadMillis < dobMillis) {
                    --years;
                    dob.setFullYear(yearAad - 1);
                    dobMillis = dob.getTime();
                }
                var days = (aadMillis - dobMillis) / 86400000;
                var monthsDec = days / daysInMonth;
                var months = Math.floor(monthsDec);
                days = Math.floor(daysInMonth * (monthsDec - months));
                var display = "";
                if (yrs != "")
                    display = years + " Years " + months + " months " + days + " days";
                return display;
            };


            // Declaration and initialization of list page Scope Variables.
            $scope.Employee_No = "";
            $scope.FullName = "";
            $scope.Company_Name = "0"
            $scope.WorkLocationName = "0";
            $scope.BranchName = "0";
            $scope.DepartmentName = "0";
            $scope.Designation = "0";
            $scope.GradeName = "0";
            $scope.flag = 0;

            $scope.loading = false;

            /*
            Calling the api method to list the employee details matching the specified filters  Employee name,Gender,Company_Name,WorkLocationName,
            ,status,Date_Of_Joining_From, Date_Of_Joining_to,Date_Of_Confirmation_From,Date_Of_Confirmation_to,BranchName, DepartmentName
            Designation,ReportingManager,GradeName,and IsActive
            showing the result in table.
            */
        
            $scope.EmployeeList_Search = function () {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                var EmpName = '';
                if ($scope.EmployeeName_Selected != undefined) {
                    EmpName = $scope.EmployeeName_Selected.originalObject.FullName;
                };

                var ReportManagerlist = '';
                if ($scope.Reportingmanager_Selected != undefined) {
                    ReportManagerlist = $scope.Reportingmanager_Selected.originalObject.Id;
                };
                if ($routeParams.Id != undefined) {
                    $scope.Id = $routeParams.Id;

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 5 seconds

                    $http.get(baseUrl + 'api/EmployeeMaster/EmployeeDetailsList/?Id=' + $scope.Id + '&Employee_No=' + $scope.EmployeeNo
                        + '&FullName=' + EmpName + '&Gender_Id=' + $scope.Gender
                        + '&Company_Name=' + $scope.Company_Name + '&Work_LocationId=' + $scope.WorkLocationName
                        + '&Date_Of_Joining_From=' + $scope.Date_Of_Joining_From + '&Date_Of_Joining_To=' + $scope.Date_Of_Joining_To
                        + '&Date_Of_Confirmation_From=' + $scope.Date_Of_Confirmation_From + '&Date_Of_Confirmation_To=' + $scope.Date_Of_Confirmation_To
                        + '&Branch_Id=' + $scope.BranchName
                        + '&Department_Id=' + $scope.DepartmentName + '&Designation_Id=' + $scope.Designation
                        + '&ReportingManager=' + ReportManagerlist
                        + '&Grade_Id=' + $scope.GradeName + '&IsActive=' + $scope.IsActive).success(function (data) {

                            $scope.emptydata = [];
                            $scope.rowCollection = [];
                            $scope.rowCollection = data;
                            if ($scope.rowCollection.length > 0) {
                                $scope.flag = 1;
                            }
                            else {
                                $scope.flag = 0;
                            }

                            $scope.loading = false;
                            $rootScope.$broadcast('hide');
                        }).error(function (data) {

                            $scope.loading = false;
                            $rootScope.$broadcast('hide');
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        })
                    //  console.log($scope.rowCollection);
                }

            };

            /* on click Go calling the list function.*/
            $scope.EmployeeList_Go = function () {
                if ($scope.ListValidationcontrols() == true) {
                    // location.path = baseUrl + "/Home/Index#/ListEmployee/0";
                    $scope.EmployeeList_Search($routeParams.Id = 0);
                }
            };


            /* on click Add New calling the AddEdit method and Open the Employee Details Add page*/
            $scope.AddEmployee = function (CatId) {
                $scope.Id = CatId;
                // $scope.ViewEmployeeDetails();
                // window.location.href = baseUrl + "/Home/Index#/SaveEmployee/"
                $location.path("/SaveEmployee/");
            };
            /* on click View tool tip in list page calling the View method and Open the Employee Details View
            page show the employee details */
            $scope.ViewEmployee = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewEmployeeDetails();
                $location.path("/ViewEmployee/" + "1/" + $scope.Id);

                //window.location.href = baseUrl + "/Home/Index#/ViewEmployee/" + $scope.Id;
            };

            $scope.EmployeeViews = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewEmployeeDetails();
                $location.path("/ViewEmployee/" + "2/" + $scope.Id);

                //window.location.href = baseUrl + "/Home/Index#/ViewEmployee/" + $scope.Id;
            };

            //$scope.Empview = function (vid) {
            //    $scope.Id = $window.localStorage['UserId'];
            //    $scope.ViewEmployeeDetails();
            //    $location.path("/ViewEmployee/" + "2/" + $scope.Id);
            //};

            /* on click Edit tool tip in list page calling the Edit method and Open the Employee Details Edit 
            page show the employee details for edit process */
            $scope.EditEmployee = function (CatId) {
                $scope.Id = CatId;

                $scope.ViewEmployeeDetails();

                $location.path("/EditEmployee/" + $scope.ModeType + "/" + $scope.Id);
                // window.location.href = baseUrl + "/Home/Index#/EditEmployee/" + $scope.Id;
            };
            $scope.EditEmployeeProfile = function (CatId) {
                $scope.Id = $window.localStorage['UserId'];
                $scope.ViewEmployeeDetails();
                $location.path("/EditEmployee/" + $scope.ModeType + "/" + $scope.Id);
                // window.location.href = baseUrl + "/Home/Index#/EditEmployee/" + $scope.Id;
            };
            /* on calling the list function.*/
            $scope.ListEmployeepop = function (CatId) {
                if ($routeParams.Mode == 0) {
                    $scope.Id = CatId;
                    $scope.rowCollection = [];
                    //  $scope.EmployeeList_Search();
                }
                else if ($routeParams.Mode == 1) {

                    $scope.EmployeeList_Search();
                }
            };
            $scope.CommonLogin_Permission = true;
            //Calling api method for employee login user permission //
            //$scope.CommonLogindata = function ()
            {
                $http.get(baseUrl + 'api/Common/Common_LoginUser_Permission/?LoginUser_Id=' + $scope.EmployeeId).success(function (data) {
                    if (data.LoginUser_Permission_Flag == 2)
                        $scope.CommonLogin_Permission = false;
                    else
                        $scope.CommonLogin_Permission = true;
                });
            }

            //This is for some particular filed Editable false method//
            $scope.isEdit = function () {
                var retflag = $scope.CommonLogin_Permission;
                if ($scope.EmployeeId == $scope.ReportingManager) {
                    retflag = false;
                }
                //login user is HR Admin and System Admin 
                return retflag;
            };

            //$scope.Aadhar = true;
            ////This is for Aadhar No. validation function//
            ////$scope.AadharcountryList = [];
            //// {
            ////    $http.get(baseUrl + 'api/Common/CountryList/').success(function (countrydata) {
            ////        if (countrydata.CountryName == 'India')
            ////            $scope.Aadhar = true;
            ////        else
            ////            $scope.Aadhar = false;
            ////    });
            ////}
            ////This is for some particular filed Editable false method//
            // $scope.isEdit_Aadhar = function () {
            //     $http.get(baseUrl + 'api/Common/CountryList/').success(function (countrydata) {
            //         if (countrydata.CountryName == 'India')
            //             $scope.Aadhar = true;
            //         else
            //             $scope.Aadhar = false;
            //     });
            // };
            $scope.PFClear = function () {
           
                $scope.PF_Number = "";
            };
            $scope.ESIClear = function () {
                $scope.ESI_Number = "";
            };


            $scope.PermanentCityName = "0";
            /*THIS IS FOR Re Insert FUNCITON */
            $scope.ActiveEmployee = function (comId) {

                $scope.Id = comId;
                $scope.ActiveEmployeeDetails();
            };

            if ($scope.ModeType == 2) {
                $scope.MasterId = $window.localStorage['UserId'];
            }

            $scope.ViewPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.ViewEmployeePhoto();
                angular.element('#PhotoView').modal('show');
            }
            $scope.CancelPhotoPopup = function () {
                angular.element('#PhotoView').modal('hide');
                $scope.clearphoto();

            }


            $scope.ViewEmployeePhoto = function () {
                if ($scope.ModeType == 2) {
                    $scope.MasterId = $window.localStorage['UserId'];
                    //$scope.FullName = $window.localStorage['UserName'];
                }
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    // console.log($window.localStorage['UserId']);
                    //if ($scope.ModeType == 1) {
                    // alert("1");
                    //  console.log($scope.Id);
                    $scope.MasterId = $routeParams.Id;
                    $scope.Id = $routeParams.Id;
                }
                // }
                //else if ($scope.ModeType == 2) {
                //$scope.MasterId = $window.localStorage['UserId'];
                //alert("2");
                // }

                //$scope.MasterId = $routeParams.Id;
                //console.log($scope.MasterId);
                $scope.DuplicateId = $routeParams.Id;
                //$scope.Id = $window.localStorage['UserId'];
                $http.get(baseUrl + 'api/EmployeeMaster/EmployeeDetails_View/?Id=' + $scope.Id).success(function (data) {
                   
                    $scope.MasterId = data.Id;
                    $scope.Id = data.Id;
                    //console.log($scope.MasterId);
                  
                    if (($scope.ShowPermanent_address == true)) {

                        //$scope.flagstatus = 1;
                        $scope.PresentHouse_No = $scope.PermanentHouse_No,
                        $scope.PresentStreetName1 = $scope.PermanentStreetName1,
                        $scope.PresentStreetName2 = $scope.PermanentStreetName2,
                        $scope.PresentStreetName3 = $scope.PermanentStreetName3,
                        $scope.Present_Attn_CO = $scope.Permanent_Attn_CO,
                        $scope.PresentCityName = $scope.PermanentCityName,
                        $scope.PresentStateName = $scope.PermanentStateName,
                        $scope.PresentCountryName = $scope.PermanentCountryName,
                        $scope.PresentPinCode = $scope.PermanentPinCode
                    }

                    $scope.DuplicateId = data.Id;
                    $scope.Photo = data.Photo;
                    $scope.uploadphoto = data.Photo;
                    $scope.Title_Name = data.Tittle_Id.toString();
                    $scope.ViewTitleName = data.Title_Name;
                    $scope.FirstName = data.FirstName;
                    $scope.MiddleName = data.MiddleName;
                    $scope.LastName = data.LastName;
                    $scope.FullName = data.FullName;
                    $scope.BirthDate = $filter('date')(data.BirthDate, "dd-MMM-yyyy");
                    $scope.Date_Of_Joining = $filter('date')(data.Date_Of_Joining, "dd-MMM-yyyy");
                    $scope.Gender_Name = data.Gender_Id.toString();
                    $scope.ViewGenderName = data.Gender_Name;
                    $scope.Marital_status_Name = data.Marital_status_Id.toString();
                    $scope.ViewMarital_status_Name = data.Marital_status_Name;
                    $scope.Citizenship_Name = data.Citizenship_Id.toString();
                    $scope.ViewCitizenship_Name = data.Citizenship_Name;
                    $scope.CompanyName = data.Company_Name.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Department_Name = data.Department_Id.toString();
                    $scope.ViewDepartment_Name = data.Department_Name;
                    $scope.Designation_Name = data.Designation_Id.toString();
                    $scope.ViewDesignation_Name = data.Designation_Name;
                    $scope.Location = data.LocationId.toString();
                    $scope.ViewLocationName = data.Location;
                    $scope.Work_LocationName = data.Work_LocationId.toString();
                    $scope.ViewWork_LocationName = data.Work_LocationName;
                    $scope.Grade_Name = data.Grade_Id.toString();
                    $scope.ViewGrade_Name = data.Grade_Name;
                    $scope.Branch_Name = data.Branch_Id.toString();
                    $scope.ViewBranch_Name = data.Branch_Name;
                    $scope.Employee_No = data.Employee_No;
                    $scope.ShortName = data.ShortName;
                    $scope.UserName = data.UserName;
                    $scope.Password = data.Password;
                    //  $scope.OldPassword = data.Password;
                    $scope.Email1 = data.Email1;
                    $scope.Email2 = data.Email2;
                    $scope.PhoneNo_M1 = data.PhoneNo_M1;
                    $scope.PhoneNo_M2 = data.PhoneNo_M2;
                    $scope.Cell_No = data.Cell_No;
                    $scope.Date_Of_Confirmation = $filter('date')(data.Date_Of_Confirmation, "dd-MMM-yyyy");
                    $scope.Blood_Group = data.Blood_Group_Id.toString();
                    $scope.ViewBlood_Group = data.Blood_Group;
                    $scope.Status_Name = data.Emp_Status_Id.toString();
                    $scope.ViewStatus_Name = data.Status_Name;
                    $scope.EmpType_Name = data.Emp_Type_Id.toString();
                    $scope.ViewEmpType_Name = data.EmpType_Name;
                    $scope.Emg_Contact_Person = data.Emg_Contact_Person;
                    $scope.Emg_Contact_No = data.Emg_Contact_No;
                    $scope.PAN_No = data.PAN_No;
                    $scope.Aadhar_No = data.Aadhar_No;
                    $scope.Voter_Id = data.Voter_Id;
                    $scope.Bank_Acc_No = data.Bank_Acc_No;
                    $scope.Bank_Name = data.Bank_Name;
                    $scope.Bank_Branch = data.Bank_Branch;
                    $scope.IFSC_Code = data.IFSC_Code;
                    $scope.PF_Number = data.PF_Number;
                    $scope.TAN_Number = data.TAN_Number;
                    $scope.Member_Id = data.Member_Id;
                    $scope.PFApplicable = data.PFApplicable;
                    $scope.ESIApplicable = data.ESIApplicable;
                    $scope.ConsiderActual = data.ConsiderActual;
                    $scope.ESI_ConsiderActual = data.ESI_ConsiderActual;
                    $scope.ESI_Number = data.ESI_Number;
                    $scope.EPF_DOJ = $filter('date')(data.EPF_DOJ, "dd-MMM-yyyy");
                    $scope.EPF_DOE = $filter('date')(data.EPF_DOE, "dd-MMM-yyyy");
                    $scope.EPS_DOJ = $filter('date')(data.EPS_DOJ, "dd-MMM-yyyy");
                    $scope.EPS_DOE = $filter('date')(data.EPS_DOE, "dd-MMM-yyyy");
                    $scope.Father_Name = data.Father_Name;
                    $scope.Mother_Name = data.Mother_Name;
                    $scope.Spouse_Name = data.Spouse_Name;
                    $scope.Spouse_DOB = $filter('date')(data.Spouse_DOB, "dd-MMM-yyyy");
                    $scope.Anniversary_Date = $filter('date')(data.Anniversary_Date, "dd-MMM-yyyy");
                    $scope.No_of_Children = data.No_of_Children;
                    $scope.Education_Qualification = data.Education_Qualification;
                    $scope.Skills = data.Skills;
                    $scope.Experience_Months = data.Experience_Months;
                    $scope.Experience_Years = data.Experience_Years;
                    $scope.Document_Upload = data.Document_Upload;
                    $scope.uploadme = data.Document_Upload;
                    $scope.Passport_Number = data.Passport_Number;
                    $scope.Place_of_Issue = data.Place_of_Issue;
                    //$filter('date')(data.Passport_Validity, "dd-MMM-yyyy");
                    $scope.Passport_Validity = $filter('date')(data.Passport_Validity, "dd-MMM-yyyy");
                    $scope.Driving_License = data.Driving_License;
                    $scope.Admission_Date = $filter('date')(data.Admission_Date, "dd-MMM-yyyy");
                    $scope.License_Issue_Authority = data.License_Issue_Authority;
                    $scope.Frequent_Flyer_No = data.Frequent_Flyer_No;
                    $scope.Flight_Preference = data.Flight_Preference;
                    $scope.Facebook_AC = data.Facebook_AC;
                    $scope.Linked_In = data.Linked_In;
                    $scope.Google_Plus = data.Google_Plus;
                    $scope.GTalk = data.GTalk;
                    $scope.Whatsapp = data.Whatsapp;
                    $scope.Twitter_AC = data.Twitter_AC;
                    $scope.Others_1 = data.Others_1;
                    $scope.Others_2 = data.Others_2;
                    $scope.Resignation_Date = $filter('date')(data.Resignation_Date, "dd-MMM-yyyy");
                    //  console.log($scope.Resignation_Date);
                    $scope.ReasonType = data.Reason_Leaving_Type.toString();
                    $scope.ViewReasonType = data.ReasonType;
                    $scope.Leaving_Reason = data.Leaving_Reason;

                    $scope.Notice_Period = data.Notice_Period;
                    $scope.Last_Working_Day = $filter('date')(data.Last_Working_Day, "dd-MMM-yyyy");
                    $scope.Remarks = data.Remarks;
                    $scope.DocFileName = data.DocFileName;
                    $scope.DocFullpath = data.DocFullpath;
                    $scope.Payment_Date = $filter('date')(data.Payment_Date, "dd-MMM-yyyy");
                    $scope.FileName = data.FileName;
                    $scope.Photo_Fullpath = data.Photo_Fullpath;

                    //new fields//
                    $scope.SuffixName = data.SuffixId.toString();
                    $scope.ViewSuffixName = data.SuffixName;
                    $scope.SubDepartmentName = data.SubDepartmentId.toString();
                    $scope.ViewSubDepartmentName = data.SubDepartmentName;
                    $scope.DivisionName = data.DivisionId.toString();
                    $scope.ViewDivisionName = data.DivisionName;
                    $scope.ResidenceCountry = data.CountryResidence.toString();
                    $scope.ViewResidenceCountry = data.ResidenceCountry;
                    $scope.AdditionalCountry_CitizenshipName = data.AdditionalCountry_Citizenship.toString();
                    $scope.ViewAdditionalCountry_CitizenshipName = data.AdditionalCountry_CitizenshipName;

                    $scope.PermanentHouse_No = data.PermanentHouse_No;
                    $scope.PermanentStreetName1 = data.PermanentStreetName1;
                    $scope.PermanentStreetName2 = data.PermanentStreetName2;
                    $scope.PermanentStreetName3 = data.PermanentStreetName3;
                    $scope.Permanent_Attn_CO = data.Permanent_Attn_CO;
                    $scope.PermanentCityName = data.PermanentCity.toString();
                    $scope.ViewPermanentCityName = data.PermanentCityName;
                    $scope.PermanentStateName = data.PermanentState.toString();
                    $scope.ViewPermanentStateName = data.PermanentStateName;
                    $scope.PermanentCountryName = data.PermanentCountry.toString();
                    $scope.ViewPermanentCountryName = data.PermanentCountryName;
                    $scope.PermanentPinCode = data.PermanentPinCode;

                    $scope.PresentHouse_No = data.PresentHouse_No;
                    $scope.PresentStreetName1 = data.PresentStreetName1;
                    $scope.PresentStreetName2 = data.PresentStreetName2;
                    $scope.PresentStreetName3 = data.PresentStreetName3;
                    $scope.Present_Attn_CO = data.Present_Attn_CO;
                    $scope.PresentCityName = data.PresentCity.toString();
                    $scope.ViewPresentCityName = data.PresentCityName;
                    $scope.PresentStateName = data.PresentState.toString();
                    $scope.ViewPresentStateName = data.PresentStateName;
                    $scope.PresentCountryName = data.PresentCountry.toString();
                    $scope.ViewPresentCountryName = data.PresentCountryName;
                    $scope.PresentPinCode = data.PresentPinCode;

                    $scope.CommunicationHouse_No = data.CommunicationHouse_No;
                    $scope.CommunicationStreetName1 = data.CommunicationStreetName1;
                    $scope.CommunicationStreetName2 = data.CommunicationStreetName2;
                    $scope.CommunicationStreetName3 = data.CommunicationStreetName3;
                    $scope.Communication_Attn_CO = data.Communication_Attn_CO;
                    $scope.CommunicationCityName = data.CommunicationCity.toString();
                    $scope.ViewCommunicationCityName = data.CommunicationCityName;
                    $scope.CommunicationStateName = data.CommunicationState.toString();
                    $scope.ViewCommunicationStateName = data.CommunicationStateName;
                    $scope.CommunicationCountryName = data.CommunicationCountry.toString();
                    $scope.ViewCommunicationCountryName = data.CommunicationCountryName;
                    $scope.CommunicationPinCode = data.CommunicationPinCode;
                    $scope.ShowAllEmployee = data.ShowAllEmployee;
                    $scope.Different_Address1 = data.Different_Address1;
                    $scope.Different_Address2 = data.Different_Address2;
                    $scope.ShowPermanent_address = data.ShowPermanent_address;
                    $scope.ShowPresent_address = data.ShowPresent_address;
                    $scope.Different_Address2 = data.Different_Address2;
                    $scope.Different_Address3 = data.Different_Address3;
                    $scope.ReportingManager = data.ReportingManager;
                    $scope.EMPId = data.EMPId;
                    $scope.FullNamelist = data.FullNamelist;
                    $scope.PayEffective_Date = data.PayEffective_Date;
                    $scope.OfficialEmail = data.OfficialEmail;
                    $scope.Finance_LocationName = data.FinanceLocation_Id.toString();
                    $scope.ViewFinanceLocation_Name = data.FinanceLocation_Name;
                    // display employee name in autocomplete text box
                    var sel = {
                        Id: data.EMPId,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;


                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                    // $scope.ViewEmpname = data.EmpName;
                    $scope.SuffixInactiveFlag = 0;


                    // if the current viewing suffix is inactive
                    // set the flag value to 1
                    if (($ff($scope.SuffixFilterList, { Id: $scope.SuffixName, Name: $scope.ViewSuffixName, IsActive: 0 }).length) == 1) {
                        $scope.SuffixInactiveFlag = 1;
                    }
                    // if the current viewing Title is inactive
                    // set the flag value to 1
                    $scope.TitleInactiveFlag = 0;

                    if (($ff($scope.TitleFilterList, { Id: $scope.Title_Name, Title_Name: $scope.ViewTitleName, IsActive: 0 }).length) == 1) {
                        $scope.TitleInactiveFlag = 1;
                    }

                    // if the current viewing Gender is inactive
                    // set the flag value to 1
                    $scope.GenderInactiveFlag = 0;
                    if (($ff($scope.GenderNameFilterList, { Id: $scope.Gender_Name, Gender_Name: $scope.ViewGenderName, IsActive: 0 }).length) == 1) {
                        $scope.GenderInactiveFlag = 1;
                    }

                    // if the current viewing Marital status is inactive
                    // set the flag value to 1
                    $scope.MaritalInactiveFlag = 0;

                    if (($ff($scope.MaritalStatusFilterList, { Id: $scope.Marital_status_Name, Marital_status_Name: $scope.ViewMarital_status_Name, IsActive: 0 }).length) == 1) {
                        $scope.MaritalInactiveFlag = 1;
                    }

                    // if the current viewing Designation is inactive
                    // set the flag value to 1
                    $scope.DesignationInactiveFlag = 0;

                    if (($ff($scope.DesignationFilterList, { Id: $scope.Designation_Name, Designation_Name: $scope.ViewDesignation_Name, IsActive: 0 }).length) == 1) {
                        $scope.DesignationInactiveFlag = 1;
                    }
                    // if the current viewing Citizenship is inactive
                    // set the flag value to 1
                    $scope.CitizenshipInactiveFlag = 0;

                    if (($ff($scope.CitizenshipFilterList, { Id: $scope.Citizenship_Name, Citizenship_Name: $scope.ViewCitizenship_Name, IsActive: 0 }).length) == 1) {
                        $scope.CitizenshipInactiveFlag = 1;
                    }
                    // if the current viewing Department is inactive
                    // set the flag value to 1
                    $scope.DepartmentInactiveFlag = 0;

                    if (($ff($scope.DepartmentFilterList, { Id: $scope.Department_Name, Department_Name: $scope.ViewDepartment_Name, IsActive: 0 }).length) == 1) {
                        $scope.DepartmentInactiveFlag = 1;
                    }

                    // if the current viewing Grade is inactive
                    // set the flag value to 1
                    $scope.GradeInactiveFlag = 0;

                    if (($ff($scope.GradeFilterList, { Id: $scope.Grade_Name, Grade_Name: $scope.ViewGrade_Name, IsActive: 0 }).length) == 1) {
                        $scope.GradeInactiveFlag = 1;
                    }
                    // if the current viewing Company is inactive
                    // set the flag value to 1
                    $scope.CompanyInactiveFlag = 0;

                    if (($ff($scope.CompanyNameFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, IsActive: 0 }).length) == 1) {
                        $scope.CompanyInactiveFlag = 1;
                    }
                    // if the current viewing Branch is inactive
                    // set the flag value to 1
                    $scope.BranchInactiveFlag = 0;

                    if (($ff($scope.CompanyBranchList, { Id: $scope.Branch_Name, Branch_Name: $scope.ViewBranch_Name, IsActive: 0 }).length) == 1) {
                        $scope.BranchInactiveFlag = 1;
                    }
                    // if the current viewing Status is inactive
                    // set the flag value to 1
                    $scope.StatusInactiveFlag = 0;

                    if (($ff($scope.StatusFilterList, { Id: $scope.Status_Name, Status_Name: $scope.ViewStatus_Name, IsActive: 0 }).length) == 1) {
                        $scope.StatusInactiveFlag = 1;
                    }
                    // if the current viewing Sub department is inactive
                    // set the flag value to 1
                    $scope.SubdepartmentInactiveFlag = 0;

                    if (($ff($scope.SubDepartmentFilterList, { Id: $scope.SubDepartmentName, SubDepartmentName: $scope.ViewSubDepartmentName, IsActive: 0 }).length) == 1) {
                        $scope.SubdepartmentInactiveFlag = 1;
                    }
                    // if the current viewing Division is inactive
                    // set the flag value to 1
                    $scope.DivisionInactiveFlag = 0;

                    if (($ff($scope.DivisionFilterList, { Id: $scope.DivisionName, DivisionName: $scope.ViewDivisionName, IsActive: 0 }).length) == 1) {
                        $scope.DivisionInactiveFlag = 1;
                    }
                    // if the current viewing Blood Group is inactive
                    // set the flag value to 1
                    $scope.BloodGroupInactiveFlag = 0;

                    if (($ff($scope.BloodGroupFilterList, { Id: $scope.Blood_Group, Blood_Group: $scope.ViewBlood_Group, IsActive: 0 }).length) == 1) {
                        $scope.BloodGroupInactiveFlag = 1;
                    }
                    // if the current viewing Employee type is inactive
                    // set the flag value to 1
                    $scope.EmpTypeInactiveFlag = 0;

                    if (($ff($scope.EmpTypeFilterList, { Id: $scope.EmpType_Name, EmpType_Name: $scope.ViewEmpType_Name, IsActive: 0 }).length) == 1) {
                        $scope.EmpTypeInactiveFlag = 1;
                    }
                    // if the current Residance country is inactive
                    // set the flag value to 1
                    $scope.ResidenceCountryInactiveFlag = 0;

                    if (($ff($scope.CountryList, { Id: $scope.ResidenceCountry, ResidenceCountry: $scope.ViewResidenceCountry, IsActive: 0 }).length) == 1) {
                        $scope.ResidenceCountryInactiveFlag = 1;
                    }
                    // if the current Additional Citizenship is inactive
                    // set the flag value to 1
                    $scope.AdditionalCitizenshipInactiveFlag = 0;

                    if (($ff($scope.CountryNameFilterList, { Id: $scope.AdditionalCountry_CitizenshipName, AdditionalCountry_CitizenshipName: $scope.ViewAdditionalCountry_CitizenshipName, IsActive: 0 }).length) == 1) {
                        $scope.AdditionalCitizenshipInactiveFlag = 1;
                    }
                    // if the current Permanent country is inactive
                    // set the flag value to 1
                    $scope.PermanentcountryInactiveFlag = 0;

                    if (($ff($scope.CountryList, { Id: $scope.PermanentCountryName, PermanentCountryName: $scope.ViewPermanentCountryName, IsActive: 0 }).length) == 1) {
                        $scope.PermanentcountryInactiveFlag = 1;
                    }
                    // if the current Permanent state is inactive
                    // set the flag value to 1
                    $scope.PermanentStateInactiveFlag = 0;

                    if (($ff($scope.StateNameFilterList, { Id: $scope.PermanentStateName, PermanentStateName: $scope.ViewPermanentStateName, IsActive: 0 }).length) == 1) {
                        $scope.PermanentStateInactiveFlag = 1;
                    }
                    // if the current Permanent city is inactive
                    // set the flag value to 1
                    $scope.PermanentCityInactiveFlag = 0;

                    if (($ff($scope.LocationNameFilterList, { Id: $scope.PermanentCityName, PermanentCityName: $scope.ViewPermanentCityName, IsActive: 0 }).length) == 1) {
                        $scope.PermanentCityInactiveFlag = 1;
                    }

                    // if the current Present country is inactive
                    // set the flag value to 1
                    $scope.PresentcountryInactiveFlag = 0;

                    if (($ff($scope.CountryList, { Id: $scope.PresentCountryName, PresentCountryName: $scope.ViewPresentCountryName, IsActive: 0 }).length) == 1) {
                        $scope.PresentcountryInactiveFlag = 1;
                    }
                    // if the current Present state is inactive
                    // set the flag value to 1
                    $scope.PresentStateInactiveFlag = 0;

                    if (($ff($scope.StateNameFilterList, { Id: $scope.StateName, PresentStateName: $scope.ViewPresentStateName, IsActive: 0 }).length) == 1) {
                        $scope.PresentStateInactiveFlag = 1;
                    }
                    // if the current Present city is inactive
                    // set the flag value to 1
                    $scope.PresentCityInactiveFlag = 0;

                    if (($ff($scope.LocationNameFilterList, { Id: $scope.PresentCityName, PresentCityName: $scope.ViewPresentCityName, IsActive: 0 }).length) == 1) {
                        $scope.PresentCityInactiveFlag = 1;
                    }
                    // if the current Communication country is inactive
                    // set the flag value to 1
                    $scope.CommunicationcountryInactiveFlag = 0;

                    if (($ff($scope.CountryList, { Id: $scope.CommunicationCountryName, CommunicationCountryName: $scope.ViewCommunicationCountryName, IsActive: 0 }).length) == 1) {
                        $scope.CommunicationcountryInactiveFlag = 1;
                    }
                    // if the current Communication state is inactive
                    // set the flag value to 1
                    $scope.CommunicationStateInactiveFlag = 0;

                    if (($ff($scope.StateNameFilterList, { Id: $scope.CommunicationStateName, CommunicationStateName: $scope.ViewCommunicationStateName, IsActive: 0 }).length) == 1) {
                        $scope.CommunicationStateInactiveFlag = 1;
                    }
                    // if the current Communication City is inactive
                    // set the flag value to 1
                    $scope.CommunicationCityInactiveFlag = 0;

                    if (($ff($scope.LocationNameFilterList, { Id: $scope.CommunicationCityName, CommunicationCityName: $scope.ViewCommunicationCityName, IsActive: 0 }).length) == 1) {
                        $scope.CommunicationCityInactiveFlag = 1;
                    }

                    // if the current Location is inactive
                    // set the flag value to 1
                    $scope.LocationInactiveFlag = 0;

                    if (($ff($scope.LocationNameFilterList, { Id: $scope.Location, Location: $scope.ViewLocationName, IsActive: 0 }).length) == 1) {
                        $scope.LocationInactiveFlag = 1;
                    }
                    // if the current Work location is inactive
                    // set the flag value to 1
                    $scope.WorkLocationInactiveFlag = 0;

                    if (($ff($scope.LocationNameFilterList, { Id: $scope.Work_LocationName, Work_LocationName: $scope.ViewWork_LocationName, IsActive: 0 }).length) == 1) {
                        $scope.WorkLocationInactiveFlag = 1;
                    }

                    //// if the current Work location is inactive
                    //// set the flag value to 1
                    $scope.FinanceLocationInactiveFlag = 0;

                    if (($ff($scope.LocationNameFilterList, { Id: $scope.Finance_LocationName, Finance_LocationName: $scope.ViewFinance_LocationName, IsActive: 0 }).length) == 1) {
                        $scope.FinanceLocationInactiveFlag = 1;
                    }

                    //if the current Reason Leaving type is inactive
                    //set the flag value to 1

                    $scope.LeaveReasonInactiveFlag = 0;

                    if (($ff($scope.RelieveReasonList, { Id: $scope.ReasonType, ReasonType: $scope.ViewReasonType, Active: 0 }).length) == 1) {
                        $scope.LeaveReasonInactiveFlag = 1;
                    }
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Employee details!" + data;
                });

            };

            /*
            Calling the api method to view the details of the employee
            it matching the specified employee Id 
            and display the details in the view page
            */

            // console.log($scope.ViewMode);
            $scope.ViewEmployeeDetails = function () {
                if ($scope.ModeType == 2) {
                    $scope.MasterId = $window.localStorage['UserId'];
                }
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    // console.log($window.localStorage['UserId']);
                    //if ($scope.ModeType == 1) {
                    // alert("1");
                    //  console.log($scope.Id);
                    $scope.MasterId = $routeParams.Id;
                    $scope.Id = $routeParams.Id;
                    // }
                    //else if ($scope.ModeType == 2) {
                    //$scope.MasterId = $window.localStorage['UserId'];
                    //alert("2");
                    // }

                    //$scope.MasterId = $routeParams.Id;
                    //console.log($scope.MasterId);
                    $scope.DuplicateId = $routeParams.Id;
                    //$scope.Id = $window.localStorage['UserId'];
                    $http.get(baseUrl + 'api/EmployeeMaster/EmployeeDetails_View/?Id=' + $scope.MasterId).success(function (data) {
                      
                        // $scope.MasterId = data.Id;
                        //$scope.Id = data.Id;
                        if ($scope.ModeType == 1) {
                            //alert("1");
                            //  console.log($scope.Id);
                            $scope.MasterId = data.Id;
                            $scope.Id = data.Id;
                            // $scope.DuplicateId = $routeParams.Id;
                            //console.log($scope.MasterId);
                        }
                        else if ($scope.ModeType == 2) {
                            $scope.Id = $window.localStorage['UserId'];
                            //  $scope.DuplicateId = $routeParams.Id;
                            // console.log($scope.MasterId);
                            //alert("2");
                        }

                        if (($scope.ShowPermanent_address == true)) {

                            //$scope.flagstatus = 1;
                            $scope.PresentHouse_No = $scope.PermanentHouse_No,
                            $scope.PresentStreetName1 = $scope.PermanentStreetName1,
                            $scope.PresentStreetName2 = $scope.PermanentStreetName2,
                            $scope.PresentStreetName3 = $scope.PermanentStreetName3,
                            $scope.Present_Attn_CO = $scope.Permanent_Attn_CO,
                            $scope.PresentCityName = $scope.PermanentCityName,
                            $scope.PresentStateName = $scope.PermanentStateName,
                            $scope.PresentCountryName = $scope.PermanentCountryName,
                            $scope.PresentPinCode = $scope.PermanentPinCode
                        }

                        $scope.DuplicateId = data.Id;

                        $scope.Photo = data.Photo;
                        $scope.uploadphoto = data.Photo;
                        $scope.Title_Name = data.Tittle_Id.toString();
                        $scope.ViewTitleName = data.Title_Name;
                        $scope.FirstName = data.FirstName;
                        $scope.MiddleName = data.MiddleName;
                        $scope.LastName = data.LastName;
                        $scope.FullName = data.FullName;
                        $scope.BirthDate = $filter('date')(data.BirthDate, "dd-MMM-yyyy");
                        $scope.Date_Of_Joining = $filter('date')(data.Date_Of_Joining, "dd-MMM-yyyy");
                        $scope.Gender_Name = data.Gender_Id.toString();
                        $scope.ViewGenderName = data.Gender_Name;
                        $scope.Marital_status_Name = data.Marital_status_Id.toString();
                        $scope.ViewMarital_status_Name = data.Marital_status_Name;
                        $scope.Citizenship_Name = data.Citizenship_Id.toString();
                        $scope.ViewCitizenship_Name = data.Citizenship_Name;
                        $scope.CompanyName = data.Company_Name.toString();
                        $scope.ViewCompanyName = data.CompanyName;
                        $scope.Department_Name = data.Department_Id.toString();
                        $scope.ViewDepartment_Name = data.Department_Name;
                        $scope.Designation_Name = data.Designation_Id.toString();
                        $scope.ViewDesignation_Name = data.Designation_Name;
                        $scope.Location = data.LocationId.toString();
                        $scope.ViewLocationName = data.Location;
                        $scope.Work_LocationName = data.Work_LocationId.toString();
                        $scope.ViewWork_LocationName = data.Work_LocationName;
                        $scope.Grade_Name = data.Grade_Id.toString();
                        $scope.ViewGrade_Name = data.Grade_Name;
                        $scope.Branch_Name = data.Branch_Id.toString();
                        $scope.ViewBranch_Name = data.Branch_Name;
                        $scope.Employee_No = data.Employee_No;
                        $scope.ShortName = data.ShortName;
                        $scope.UserName = data.UserName;
                        $scope.Password = data.Password;
                        //  $scope.OldPassword = data.Password;
                        $scope.Email1 = data.Email1;
                        $scope.Email2 = data.Email2;
                        $scope.PhoneNo_M1 = data.PhoneNo_M1;
                        $scope.PhoneNo_M2 = data.PhoneNo_M2;
                        $scope.Cell_No = data.Cell_No;
                        $scope.Date_Of_Confirmation = $filter('date')(data.Date_Of_Confirmation, "dd-MMM-yyyy");
                        $scope.Blood_Group = data.Blood_Group_Id.toString();
                        $scope.ViewBlood_Group = data.Blood_Group;
                        $scope.Status_Name = data.Emp_Status_Id.toString();
                        $scope.ViewStatus_Name = data.Status_Name;
                        $scope.EmpType_Name = data.Emp_Type_Id.toString();
                        $scope.ViewEmpType_Name = data.EmpType_Name;
                        $scope.Emg_Contact_Person = data.Emg_Contact_Person;
                        $scope.Emg_Contact_No = data.Emg_Contact_No;
                        $scope.PAN_No = data.PAN_No;
                        $scope.Aadhar_No = data.Aadhar_No;
                        $scope.Voter_Id = data.Voter_Id;
                        $scope.Bank_Acc_No = data.Bank_Acc_No;
                        $scope.Bank_Name = data.Bank_Name;
                        $scope.Bank_Branch = data.Bank_Branch;
                        $scope.IFSC_Code = data.IFSC_Code;
                        $scope.PF_Number = data.PF_Number;
                        $scope.TAN_Number = data.TAN_Number;
                        $scope.Member_Id = data.Member_Id;
                        $scope.PFApplicable = data.PFApplicable;
                        $scope.ESIApplicable = data.ESIApplicable;
                        $scope.ConsiderActual = data.ConsiderActual;
                        $scope.ESI_ConsiderActual = data.ESI_ConsiderActual;
                        $scope.ESI_Number = data.ESI_Number;
                        $scope.EPF_DOJ = $filter('date')(data.EPF_DOJ, "dd-MMM-yyyy");
                        $scope.EPF_DOE = $filter('date')(data.EPF_DOE, "dd-MMM-yyyy");
                        $scope.EPS_DOJ = $filter('date')(data.EPS_DOJ, "dd-MMM-yyyy");
                        $scope.EPS_DOE = $filter('date')(data.EPS_DOE, "dd-MMM-yyyy");
                        $scope.Father_Name = data.Father_Name;
                        $scope.Mother_Name = data.Mother_Name;
                        $scope.Spouse_Name = data.Spouse_Name;
                        $scope.Spouse_DOB = $filter('date')(data.Spouse_DOB, "dd-MMM-yyyy");
                        $scope.Anniversary_Date = $filter('date')(data.Anniversary_Date, "dd-MMM-yyyy");
                        $scope.No_of_Children = data.No_of_Children;
                        $scope.Education_Qualification = data.Education_Qualification;
                        $scope.Skills = data.Skills;
                        $scope.Experience_Months = data.Experience_Months;
                        $scope.Experience_Years = data.Experience_Years;
                        $scope.Document_Upload = data.Document_Upload;
                        $scope.uploadme = data.Document_Upload;
                        $scope.Passport_Number = data.Passport_Number;
                        $scope.Place_of_Issue = data.Place_of_Issue;
                        //$filter('date')(data.Passport_Validity, "dd-MMM-yyyy");
                        $scope.Passport_Validity = $filter('date')(data.Passport_Validity, "dd-MMM-yyyy");
                        $scope.Driving_License = data.Driving_License;
                        $scope.Admission_Date = $filter('date')(data.Admission_Date, "dd-MMM-yyyy");
                        $scope.License_Issue_Authority = data.License_Issue_Authority;
                        $scope.Frequent_Flyer_No = data.Frequent_Flyer_No;
                        $scope.Flight_Preference = data.Flight_Preference;
                        $scope.Facebook_AC = data.Facebook_AC;
                        $scope.Linked_In = data.Linked_In;
                        $scope.Google_Plus = data.Google_Plus;
                        $scope.GTalk = data.GTalk;
                        $scope.Whatsapp = data.Whatsapp;
                        $scope.Twitter_AC = data.Twitter_AC;
                        $scope.Others_1 = data.Others_1;
                        $scope.Others_2 = data.Others_2;
                        $scope.Resignation_Date = $filter('date')(data.Resignation_Date, "dd-MMM-yyyy");
                        //  console.log($scope.Resignation_Date);
                        $scope.ReasonType = data.Reason_Leaving_Type.toString();
                        $scope.ViewReasonType = data.ReasonType;
                        $scope.Leaving_Reason = data.Leaving_Reason;

                        $scope.Notice_Period = data.Notice_Period;
                        $scope.Last_Working_Day = $filter('date')(data.Last_Working_Day, "dd-MMM-yyyy");
                        $scope.Remarks = data.Remarks;
                        $scope.DocFileName = data.DocFileName;
                        $scope.DocFullpath = data.DocFullpath;
                        $scope.Payment_Date = $filter('date')(data.Payment_Date, "dd-MMM-yyyy");
                        $scope.FileName = data.FileName;
                        $scope.Photo_Fullpath = data.Photo_Fullpath;

                        //new fields//
                        $scope.SuffixName = data.SuffixId.toString();
                        $scope.ViewSuffixName = data.SuffixName;
                        $scope.SubDepartmentName = data.SubDepartmentId.toString();
                        $scope.ViewSubDepartmentName = data.SubDepartmentName;
                        $scope.DivisionName = data.DivisionId.toString();
                        $scope.ViewDivisionName = data.DivisionName;
                        $scope.ResidenceCountry = data.CountryResidence.toString();
                        $scope.ViewResidenceCountry = data.ResidenceCountry;
                        $scope.AdditionalCountry_CitizenshipName = data.AdditionalCountry_Citizenship.toString();
                        $scope.ViewAdditionalCountry_CitizenshipName = data.AdditionalCountry_CitizenshipName;

                        $scope.PermanentHouse_No = data.PermanentHouse_No;
                        $scope.PermanentStreetName1 = data.PermanentStreetName1;
                        $scope.PermanentStreetName2 = data.PermanentStreetName2;
                        $scope.PermanentStreetName3 = data.PermanentStreetName3;
                        $scope.Permanent_Attn_CO = data.Permanent_Attn_CO;
                        $scope.PermanentCityName = data.PermanentCity.toString();
                        $scope.ViewPermanentCityName = data.PermanentCityName;
                        $scope.PermanentStateName = data.PermanentState.toString();
                        $scope.ViewPermanentStateName = data.PermanentStateName;
                        $scope.PermanentCountryName = data.PermanentCountry.toString();
                        $scope.ViewPermanentCountryName = data.PermanentCountryName;
                        $scope.PermanentPinCode = data.PermanentPinCode;

                        $scope.PresentHouse_No = data.PresentHouse_No;
                        $scope.PresentStreetName1 = data.PresentStreetName1;
                        $scope.PresentStreetName2 = data.PresentStreetName2;
                        $scope.PresentStreetName3 = data.PresentStreetName3;
                        $scope.Present_Attn_CO = data.Present_Attn_CO;
                        $scope.PresentCityName = data.PresentCity.toString();
                        $scope.ViewPresentCityName = data.PresentCityName;
                        $scope.PresentStateName = data.PresentState.toString();
                        $scope.ViewPresentStateName = data.PresentStateName;
                        $scope.PresentCountryName = data.PresentCountry.toString();
                        $scope.ViewPresentCountryName = data.PresentCountryName;
                        $scope.PresentPinCode = data.PresentPinCode;

                        $scope.CommunicationHouse_No = data.CommunicationHouse_No;
                        $scope.CommunicationStreetName1 = data.CommunicationStreetName1;
                        $scope.CommunicationStreetName2 = data.CommunicationStreetName2;
                        $scope.CommunicationStreetName3 = data.CommunicationStreetName3;
                        $scope.Communication_Attn_CO = data.Communication_Attn_CO;
                        $scope.CommunicationCityName = data.CommunicationCity.toString();
                        $scope.ViewCommunicationCityName = data.CommunicationCityName;
                        $scope.CommunicationStateName = data.CommunicationState.toString();
                        $scope.ViewCommunicationStateName = data.CommunicationStateName;
                        $scope.CommunicationCountryName = data.CommunicationCountry.toString();
                        $scope.ViewCommunicationCountryName = data.CommunicationCountryName;
                        $scope.CommunicationPinCode = data.CommunicationPinCode;
                        $scope.ShowAllEmployee = data.ShowAllEmployee;
                        $scope.Different_Address1 = data.Different_Address1;
                        $scope.Different_Address2 = data.Different_Address2;
                        $scope.ShowPermanent_address = data.ShowPermanent_address;
                        $scope.ShowPresent_address = data.ShowPresent_address;
                        $scope.Different_Address2 = data.Different_Address2;
                        $scope.Different_Address3 = data.Different_Address3;
                        $scope.ReportingManager = data.ReportingManager;
                        $scope.EMPId = data.EMPId;
                        $scope.FullNamelist = data.FullNamelist;
                        $scope.PayEffective_Date = $filter('date')(data.PayEffective_Date, "dd-MMM-yyyy");
                        $scope.OfficialEmail = data.OfficialEmail;
                        $scope.Finance_LocationName = data.Finance_LocationId.toString();
                        $scope.ViewFinanceLocation_Name = data.Finance_LocationName;
                        // display employee name in autocomplete text box
                        var sel = {
                            Id: data.EMPId,
                            FullName: data.FullName,
                            FullNamelist: data.FullNamelist
                        };
                        $scope.DisplayFullName = sel;


                        $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                        // $scope.ViewEmpname = data.EmpName;
                        $scope.SuffixInactiveFlag = 0;


                        // if the current viewing suffix is inactive
                        // set the flag value to 1
                        if (($ff($scope.SuffixFilterList, { Id: $scope.SuffixName, Name: $scope.ViewSuffixName, IsActive: 0 }).length) == 1) {
                            $scope.SuffixInactiveFlag = 1;
                        }
                        // if the current viewing Title is inactive
                        // set the flag value to 1
                        $scope.TitleInactiveFlag = 0;

                        if (($ff($scope.TitleFilterList, { Id: $scope.Title_Name, Title_Name: $scope.ViewTitleName, IsActive: 0 }).length) == 1) {
                            $scope.TitleInactiveFlag = 1;
                        }

                        // if the current viewing Gender is inactive
                        // set the flag value to 1
                        $scope.GenderInactiveFlag = 0;
                        if (($ff($scope.GenderNameFilterList, { Id: $scope.Gender_Name, Gender_Name: $scope.ViewGenderName, IsActive: 0 }).length) == 1) {
                            $scope.GenderInactiveFlag = 1;
                        }

                        // if the current viewing Marital status is inactive
                        // set the flag value to 1
                        $scope.MaritalInactiveFlag = 0;

                        if (($ff($scope.MaritalStatusFilterList, { Id: $scope.Marital_status_Name, Marital_status_Name: $scope.ViewMarital_status_Name, IsActive: 0 }).length) == 1) {
                            $scope.MaritalInactiveFlag = 1;
                        }

                        // if the current viewing Designation is inactive
                        // set the flag value to 1
                        $scope.DesignationInactiveFlag = 0;

                        if (($ff($scope.DesignationFilterList, { Id: $scope.Designation_Name, Designation_Name: $scope.ViewDesignation_Name, IsActive: 0 }).length) == 1) {
                            $scope.DesignationInactiveFlag = 1;
                        }
                        // if the current viewing Citizenship is inactive
                        // set the flag value to 1
                        $scope.CitizenshipInactiveFlag = 0;

                        if (($ff($scope.CitizenshipFilterList, { Id: $scope.Citizenship_Name, Citizenship_Name: $scope.ViewCitizenship_Name, IsActive: 0 }).length) == 1) {
                            $scope.CitizenshipInactiveFlag = 1;
                        }
                        // if the current viewing Department is inactive
                        // set the flag value to 1
                        $scope.DepartmentInactiveFlag = 0;

                        if (($ff($scope.DepartmentFilterList, { Id: $scope.Department_Name, Department_Name: $scope.ViewDepartment_Name, IsActive: 0 }).length) == 1) {
                            $scope.DepartmentInactiveFlag = 1;
                        }

                        // if the current viewing Grade is inactive
                        // set the flag value to 1
                        $scope.GradeInactiveFlag = 0;

                        if (($ff($scope.GradeFilterList, { Id: $scope.Grade_Name, Grade_Name: $scope.ViewGrade_Name, IsActive: 0 }).length) == 1) {
                            $scope.GradeInactiveFlag = 1;
                        }
                        // if the current viewing Company is inactive
                        // set the flag value to 1
                        $scope.CompanyInactiveFlag = 0;

                        if (($ff($scope.CompanyNameFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, IsActive: 0 }).length) == 1) {
                            $scope.CompanyInactiveFlag = 1;
                        }
                        // if the current viewing Branch is inactive
                        // set the flag value to 1
                        $scope.BranchInactiveFlag = 0;

                        if (($ff($scope.CompanyBranchList, { Id: $scope.Branch_Name, Branch_Name: $scope.ViewBranch_Name, IsActive: 0 }).length) == 1) {
                            $scope.BranchInactiveFlag = 1;
                        }
                        // if the current viewing Status is inactive
                        // set the flag value to 1
                        $scope.StatusInactiveFlag = 0;

                        if (($ff($scope.StatusFilterList, { Id: $scope.Status_Name, Status_Name: $scope.ViewStatus_Name, IsActive: 0 }).length) == 1) {
                            $scope.StatusInactiveFlag = 1;
                        }
                        // if the current viewing Sub department is inactive
                        // set the flag value to 1
                        $scope.SubdepartmentInactiveFlag = 0;

                        if (($ff($scope.SubDepartmentFilterList, { Id: $scope.SubDepartmentName, SubDepartmentName: $scope.ViewSubDepartmentName, IsActive: 0 }).length) == 1) {
                            $scope.SubdepartmentInactiveFlag = 1;
                        }
                        // if the current viewing Division is inactive
                        // set the flag value to 1
                        $scope.DivisionInactiveFlag = 0;

                        if (($ff($scope.DivisionFilterList, { Id: $scope.DivisionName, DivisionName: $scope.ViewDivisionName, IsActive: 0 }).length) == 1) {
                            $scope.DivisionInactiveFlag = 1;
                        }
                        // if the current viewing Blood Group is inactive
                        // set the flag value to 1
                        $scope.BloodGroupInactiveFlag = 0;

                        if (($ff($scope.BloodGroupFilterList, { Id: $scope.Blood_Group, Blood_Group: $scope.ViewBlood_Group, IsActive: 0 }).length) == 1) {
                            $scope.BloodGroupInactiveFlag = 1;
                        }
                        // if the current viewing Employee type is inactive
                        // set the flag value to 1
                        $scope.EmpTypeInactiveFlag = 0;

                        if (($ff($scope.EmpTypeFilterList, { Id: $scope.EmpType_Name, EmpType_Name: $scope.ViewEmpType_Name, IsActive: 0 }).length) == 1) {
                            $scope.EmpTypeInactiveFlag = 1;
                        }
                        // if the current Residance country is inactive
                        // set the flag value to 1
                        $scope.ResidenceCountryInactiveFlag = 0;

                        if (($ff($scope.CountryList, { Id: $scope.ResidenceCountry, ResidenceCountry: $scope.ViewResidenceCountry, IsActive: 0 }).length) == 1) {
                            $scope.ResidenceCountryInactiveFlag = 1;
                        }
                        // if the current Additional Citizenship is inactive
                        // set the flag value to 1
                        $scope.AdditionalCitizenshipInactiveFlag = 0;

                        if (($ff($scope.CountryNameFilterList, { Id: $scope.AdditionalCountry_CitizenshipName, AdditionalCountry_CitizenshipName: $scope.ViewAdditionalCountry_CitizenshipName, IsActive: 0 }).length) == 1) {
                            $scope.AdditionalCitizenshipInactiveFlag = 1;
                        }
                        // if the current Permanent country is inactive
                        // set the flag value to 1
                        $scope.PermanentcountryInactiveFlag = 0;

                        if (($ff($scope.CountryList, { Id: $scope.PermanentCountryName, PermanentCountryName: $scope.ViewPermanentCountryName, IsActive: 0 }).length) == 1) {
                            $scope.PermanentcountryInactiveFlag = 1;
                        }
                        // if the current Permanent state is inactive
                        // set the flag value to 1
                        $scope.PermanentStateInactiveFlag = 0;

                        if (($ff($scope.StateNameFilterList, { Id: $scope.PermanentStateName, PermanentStateName: $scope.ViewPermanentStateName, IsActive: 0 }).length) == 1) {
                            $scope.PermanentStateInactiveFlag = 1;
                        }
                        // if the current Permanent city is inactive
                        // set the flag value to 1
                        $scope.PermanentCityInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.PermanentCityName, PermanentCityName: $scope.ViewPermanentCityName, IsActive: 0 }).length) == 1) {
                            $scope.PermanentCityInactiveFlag = 1;
                        }

                        // if the current Present country is inactive
                        // set the flag value to 1
                        $scope.PresentcountryInactiveFlag = 0;

                        if (($ff($scope.CountryList, { Id: $scope.PresentCountryName, PresentCountryName: $scope.ViewPresentCountryName, IsActive: 0 }).length) == 1) {
                            $scope.PresentcountryInactiveFlag = 1;
                        }
                        // if the current Present state is inactive
                        // set the flag value to 1
                        $scope.PresentStateInactiveFlag = 0;

                        if (($ff($scope.StateNameFilterList, { Id: $scope.StateName, PresentStateName: $scope.ViewPresentStateName, IsActive: 0 }).length) == 1) {
                            $scope.PresentStateInactiveFlag = 1;
                        }
                        // if the current Present city is inactive
                        // set the flag value to 1
                        $scope.PresentCityInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.PresentCityName, PresentCityName: $scope.ViewPresentCityName, IsActive: 0 }).length) == 1) {
                            $scope.PresentCityInactiveFlag = 1;
                        }
                        // if the current Communication country is inactive
                        // set the flag value to 1
                        $scope.CommunicationcountryInactiveFlag = 0;

                        if (($ff($scope.CountryList, { Id: $scope.CommunicationCountryName, CommunicationCountryName: $scope.ViewCommunicationCountryName, IsActive: 0 }).length) == 1) {
                            $scope.CommunicationcountryInactiveFlag = 1;
                        }
                        // if the current Communication state is inactive
                        // set the flag value to 1
                        $scope.CommunicationStateInactiveFlag = 0;

                        if (($ff($scope.StateNameFilterList, { Id: $scope.CommunicationStateName, CommunicationStateName: $scope.ViewCommunicationStateName, IsActive: 0 }).length) == 1) {
                            $scope.CommunicationStateInactiveFlag = 1;
                        }
                        // if the current Communication City is inactive
                        // set the flag value to 1
                        $scope.CommunicationCityInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.CommunicationCityName, CommunicationCityName: $scope.ViewCommunicationCityName, IsActive: 0 }).length) == 1) {
                            $scope.CommunicationCityInactiveFlag = 1;
                        }

                        // if the current Location is inactive
                        // set the flag value to 1
                        $scope.LocationInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.Location, Location: $scope.ViewLocationName, IsActive: 0 }).length) == 1) {
                            $scope.LocationInactiveFlag = 1;
                        }
                        // if the current Work location is inactive
                        // set the flag value to 1
                        $scope.WorkLocationInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.Work_LocationName, Work_LocationName: $scope.ViewWork_LocationName, IsActive: 0 }).length) == 1) {
                            $scope.WorkLocationInactiveFlag = 1;
                        }

                        //if the current Reason Leaving type is inactive
                        //set the flag value to 1

                        $scope.LeaveReasonInactiveFlag = 0;

                        if (($ff($scope.RelieveReasonList, { Id: $scope.ReasonType, ReasonType: $scope.ViewReasonType, Active: 0 }).length) == 1) {
                            $scope.LeaveReasonInactiveFlag = 1;
                        }
                    }).error(function (data) {
                        $scope.error = "An error has occcurred while viewing Employee details!" + data;
                    });
                }

            };

            $scope.Permenantadd = function () {

                $scope.EmployeeId = $window.localStorage['UserId'];
                if (($scope.ShowPermanent_address == false) && ($scope.Id == $scope.EmployeeId)) {

                    $scope.Returnval = 1;
                    $scope.PermanentHouse_No = $scope.PermanentHouse_No,
                    $scope.PermanentStreetName1 = $scope.PermanentStreetName1,
                    $scope.PermanentStreetName2 = $scope.PermanentStreetName2,
                    $scope.PermanentStreetName3 = $scope.PermanentStreetName3,
                    $scope.Permanent_Attn_CO = $scope.Permanent_Attn_CO,
                    $scope.ViewPermanentCityName = $scope.ViewPermanentCityName,
                    $scope.ViewPermanentStateName = $scope.ViewPermanentStateName,
                    $scope.ViewPermanentCountryName = $scope.ViewPermanentCountryName,
                    $scope.PermanentPinCode = $scope.PermanentPinCode
                    return false;
                }


                if (($scope.ShowPermanent_address == true) && ($scope.Id != $scope.EmployeeId)) {
                    $scope.Returnval = 2;
                    $scope.PermanentHouse_No = $scope.PermanentHouse_No,
                   $scope.PermanentStreetName1 = $scope.PermanentStreetName1,
                   $scope.PermanentStreetName2 = $scope.PermanentStreetName2,
                   $scope.PermanentStreetName3 = $scope.PermanentStreetName3,
                   $scope.Permanent_Attn_CO = $scope.Permanent_Attn_CO,
                   $scope.ViewPermanentCityName = $scope.ViewPermanentCityName,
                   $scope.ViewPermanentStateName = $scope.ViewPermanentStateName,
                   $scope.ViewPermanentCountryName = $scope.ViewPermanentCountryName,
                   $scope.PermanentPinCode = $scope.PermanentPinCode
                    return false;
                };



                if (($scope.ShowPermanent_address == false) && ($scope.Id != $scope.EmployeeId)) {
                    $scope.Returnval = 3;
                    $scope.PermanentHouse_No = "",
                     $scope.PermanentStreetName1 = "",
                     $scope.PermanentStreetName2 = "",
                     $scope.PermanentStreetName3 = "",
                     $scope.Permanent_Attn_CO = "",
                     $scope.ViewPermanentCityName = "",
                     $scope.ViewPermanentStateName = "",
                     $scope.ViewPermanentCountryName = "",
                     $scope.PermanentPinCode = ""
                    return false;

                };

                if (($scope.ShowPermanent_address == true) && ($scope.Id == $scope.EmployeeId)) {
                    $scope.Returnval = 4;
                    //  alert($scope.Returnval);

                    $scope.PermanentHouse_No = $scope.PermanentHouse_No,
                    $scope.PermanentStreetName1 = $scope.PermanentStreetName1,
                    $scope.PermanentStreetName2 = $scope.PermanentStreetName2,
                    $scope.PermanentStreetName3 = $scope.PermanentStreetName3,
                    $scope.Permanent_Attn_CO = $scope.Permanent_Attn_CO,
                    $scope.ViewPermanentCityName = $scope.ViewPermanentCityName,
                    $scope.ViewPermanentStateName = $scope.ViewPermanentStateName,
                    $scope.ViewPermanentCountryName = $scope.ViewPermanentCountryName,
                    $scope.PermanentPinCode = $scope.PermanentPinCode
                    return false;
                };
                return true;
            };


            $scope.present = function () {

                if (($scope.ShowPresent_address == false) && ($scope.Id == $scope.EmployeeId)) {

                    $scope.Returnval = 5;
                    $scope.PresentHouse_No = $scope.PresentHouse_No,
                    $scope.ViewPresentCountryName = $scope.ViewPresentCountryName,
                    $scope.PresentStreetName1 = $scope.PresentStreetName1,
                    $scope.ViewPresentStateName = $scope.ViewPresentStateName,
                    $scope.PresentStreetName2 = $scope.PresentStreetName2,
                    $scope.ViewPresentCityName = $scope.ViewPresentCityName,
                    $scope.PresentStreetName3 = $scope.PresentStreetName3,
                    $scope.PresentPinCode = $scope.PresentPinCode,
                    $scope.Present_Attn_CO = $scope.Present_Attn_CO
                    return false;
                };

                if ((($scope.ShowPresent_address == true) && ($scope.Id != $scope.EmployeeId))) {

                    $scope.Returnval = 6;

                    $scope.PresentHouse_No = $scope.PresentHouse_No,
                    $scope.ViewPresentCountryName = $scope.ViewPresentCountryName,
                    $scope.PresentStreetName1 = $scope.PresentStreetName1,
                    $scope.ViewPresentStateName = $scope.ViewPresentStateName,
                    $scope.PresentStreetName2 = $scope.PresentStreetName2,
                    $scope.ViewPresentCityName = $scope.ViewPresentCityName,
                    $scope.PresentStreetName3 = $scope.PresentStreetName3,
                    $scope.PresentPinCode = $scope.PresentPinCode,
                    $scope.Present_Attn_CO = $scope.Present_Attn_CO
                    return false;
                };

                if (($scope.ShowPresent_address == false) && ($scope.Id != $scope.EmployeeId)) {
                    $scope.Returnval = 7;
                    $scope.PresentHouse_No = "",
                    $scope.ViewPresentCountryName = "",
                    $scope.PresentStreetName1 = "",
                    $scope.ViewPresentStateName = "",
                    $scope.PresentStreetName2 = "",
                    $scope.ViewPresentCityName = "",
                    $scope.PresentStreetName3 = "",
                    $scope.PresentPinCode = "",
                    $scope.Present_Attn_CO = ""
                    return false;
                }
                else if (($scope.ShowPresent_address == true) && ($scope.Id == $scope.EmployeeId)) {
                    $scope.Returnval = 4;
                    $scope.PresentHouse_No = $scope.PresentHouse_No,
                   $scope.ViewPresentCountryName = $scope.ViewPresentCountryName,
                   $scope.PresentStreetName1 = $scope.PresentStreetName1,
                   $scope.ViewPresentStateName = $scope.ViewPresentStateName,
                   $scope.PresentStreetName2 = $scope.PresentStreetName2,
                   $scope.ViewPresentCityName = $scope.ViewPresentCityName,
                   $scope.PresentStreetName3 = $scope.PresentStreetName3,
                   $scope.PresentPinCode = $scope.PresentPinCode,
                   $scope.Present_Attn_CO = $scope.Present_Attn_CO
                    return false;
                };
                return true;

            };


            $scope.communication = function () {
                if (($scope.ShowAllEmployee == false) && ($scope.Id == $scope.EmployeeId)) {

                    $scope.Returnval = 1;
                    $scope.CommunicationHouse_No = $scope.CommunicationHouse_No,
                    $scope.ViewCommunicationCountryName = $scope.ViewCommunicationCountryName,
                    $scope.CommunicationStreetName1 = $scope.CommunicationStreetName1,
                    $scope.ViewCommunicationStateName = $scope.ViewCommunicationStateName,
                    $scope.CommunicationStreetName2 = $scope.CommunicationStreetName2,
                    $scope.ViewCommunicationCityName = $scope.ViewCommunicationCityName,
                    $scope.CommunicationStreetName3 = $scope.CommunicationStreetName3,
                    $scope.CommunicationPinCode = $scope.CommunicationPinCode,
                    $scope.Communication_Attn_CO = $scope.Communication_Attn_CO
                    return false;
                };
                if ((($scope.ShowAllEmployee == true) && ($scope.Id != $scope.EmployeeId))) {

                    $scope.Returnval = 2;

                    $scope.CommunicationHouse_No = $scope.CommunicationHouse_No,
                    $scope.ViewCommunicationCountryName = $scope.ViewCommunicationCountryName,
                    $scope.CommunicationStreetName1 = $scope.CommunicationStreetName1,
                    $scope.ViewCommunicationStateName = $scope.ViewCommunicationStateName,
                    $scope.CommunicationStreetName2 = $scope.CommunicationStreetName2,
                    $scope.ViewCommunicationCityName = $scope.ViewCommunicationCityName,
                    $scope.CommunicationStreetName3 = $scope.CommunicationStreetName3,
                    $scope.CommunicationPinCode = $scope.CommunicationPinCode,
                    $scope.Communication_Attn_CO = $scope.Communication_Attn_CO
                    return false;
                };
                if (($scope.ShowAllEmployee == false) && ($scope.Id != $scope.EmployeeId)) {
                    $scope.Returnval = 3;
                    $scope.CommunicationHouse_No = "",
                    $scope.ViewCommunicationCountryName = "",
                    $scope.CommunicationStreetName1 = "",
                    $scope.ViewCommunicationStateName = "",
                    $scope.CommunicationStreetName2 = "",
                    $scope.ViewCommunicationCityName = "",
                    $scope.CommunicationStreetName3 = "",
                    $scope.CommunicationPinCode = "",
                    $scope.Communication_Attn_CO = ""
                    return false;

                };
                if (($scope.ShowAllEmployee == true) && ($scope.Id == $scope.EmployeeId)) {
                    $scope.Returnval = 4;
                    $scope.CommunicationHouse_No = $scope.CommunicationHouse_No,
                     $scope.ViewCommunicationCountryName = $scope.ViewCommunicationCountryName,
                     $scope.CommunicationStreetName1 = $scope.CommunicationStreetName1,
                     $scope.ViewCommunicationStateName = $scope.ViewCommunicationStateName,
                     $scope.CommunicationStreetName2 = $scope.CommunicationStreetName2,
                     $scope.ViewCommunicationCityName = $scope.ViewCommunicationCityName,
                     $scope.CommunicationStreetName3 = $scope.CommunicationStreetName3,
                     $scope.CommunicationPinCode = $scope.CommunicationPinCode,
                     $scope.Communication_Attn_CO = $scope.Communication_Attn_CO
                    return false;
                };

                return true;

            };
            $scope.
                address = function () {


                    if (($scope.ShowPermanent_address == true) && ($scope.Id == $scope.EmployeeId)) {
                        $scope.PresentHouse_No = $scope.PermanentHouse_No,
                        $scope.PresentStreetName1 = $scope.PermanentStreetName1,
                        $scope.PresentStreetName2 = $scope.PermanentStreetName2,
                        $scope.PresentStreetName3 = $scope.PermanentStreetName3,
                        $scope.Present_Attn_CO = $scope.Permanent_Attn_CO,
                        $scope.PresentCityName = $scope.PermanentCityName,
                        $scope.PresentStateName = $scope.PermanentStateName,
                        $scope.PresentCountryName = $scope.PermanentCountryName,
                        $scope.PresentPinCode = $scope.PermanentPinCode
                    }
                };



            /* 
            Calling the api method to detele the details of the employee 
           matching the specified company Id,
           and redirected to the list page.
           */
            $scope.DeleteEmployeeDetails = function () {
                var del = confirm("Do you like to inactivate the selected employee?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EmployeeMaster/Employee_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee has been inactivated successfully");
                        // window.location.href = "/Home/Index#/ListEmployee";
                        $scope.EmployeeList_Go();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting employee details" + data;
                    });
                };
            };
            /*on click inactive tool tip calling delete function*/
            $scope.EmployeeDetailsDelete = function (EmpId) {
                $scope.Id = EmpId;
                $scope.DeleteEmployeeDetails();
            };



            /* 
             Calling the api method to Re insert the details of the employee 
            matching the specified company Id,
            and redirected to the list page.
            */
            $scope.ActiveEmployeeDetails = function () {

                var del = confirm("Do you like to activate the selected employee?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EmployeeMaster/Employee_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee has been activated successfully");
                        $scope.EmployeeList_Go();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while active employee details" + data;
                    });
                };


            };
            //Active Employee//
            $scope.ActiveEmployee = function (empid) {
                $scope.Id = empid;
                $scope.ActiveEmployeeDetails();

            };


            /* Read the file path of the image uploaded  and file upload*/
            $scope.downloadfile = function (url, defaultFileName) {
                var self = this;
                var deferred = $q.defer();
                $http.get(url, { responseType: "blob" }).then(
                   function (data) {
                       saveAs(data.data, defaultFileName)
                       deferred.resolve(defaultFileName);
                   }, function (data) {
                       var e = /* error */
                        deferred.reject(e);
                   });
                return deferred.promise;
            };
            $scope.dataURItoBlob = function (dataURI) {
                var binary = atob(dataURI.split(',')[1]);
                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                var array = [];
                for (var i = 0; i < binary.length; i++) {
                    array.push(binary.charCodeAt(i));
                }
                return new Blob([new Uint8Array(array)], {
                    type: mimeString
                });
            }


            /* Read file name for the  Photo and file */
            $scope.logoChange = function () {

                if ($('#companyphoto')[0].files[0] != undefined) {
                    $scope.FileName = $('#companyphoto')[0].files[0]['name'];
                }
            }
            $scope.empdocChange = function () {

                if ($('#documentfile')[0].files[0] != undefined) {
                    $scope.DocFileName = $('#documentfile')[0].files[0]['name'];
                }
            }
            $scope.uploadImage = function (Photo) {
                var filename = "";
                //var fd = new FormData();
                if ($('#companyphoto')[0].files[0] != undefined) {
                    filename = $('#companyphoto')[0].files[0]['name'];
                    //var imgBlob = $scope.dataURItoBlob($scope.CompanyLogo);
                    //fd.append('file', imgBlob);
                }
            }


            //This is for Address Copy function//
            $scope.statusfunction = function () {
                if ($scope.Different_Address1) {
                    $scope.PresentHouse_No = $scope.PermanentHouse_No,
                    $scope.PresentStreetName1 = $scope.PermanentStreetName1,
                    $scope.PresentStreetName2 = $scope.PermanentStreetName2,
                    $scope.PresentStreetName3 = $scope.PermanentStreetName3,
                    $scope.Present_Attn_CO = $scope.Permanent_Attn_CO,
                    $scope.PresentCityName = $scope.PermanentCityName,
                    $scope.PresentStateName = $scope.PermanentStateName,
                    $scope.PresentCountryName = $scope.PermanentCountryName,
                    $scope.PresentPinCode = $scope.PermanentPinCode
                }
                if ($scope.Different_Address1 == false) {
                    $scope.PresentHouse_No = "",
                    $scope.ViewPresentCountryName = "",
                    $scope.PresentStreetName1 = "",
                    $scope.ViewPresentStateName = "",
                    $scope.PresentStreetName2 = "",
                    $scope.ViewPresentCityName = "",
                    $scope.PresentStreetName3 = "",
                    $scope.PresentPinCode = "",
                    $scope.Present_Attn_CO = "",
                    $scope.PresentCityName = "0",
                    $scope.PresentStateName = "0",
                    $scope.PresentCountryName = "0"
                    return false;
                }
            };
            //This is for Address Copy function//
            $scope.status3function = function () {
                if ($scope.Different_Address2) {
                    $scope.CommunicationHouse_No = $scope.PermanentHouse_No,
                    $scope.CommunicationStreetName1 = $scope.PermanentStreetName1,
                    $scope.CommunicationStreetName2 = $scope.PermanentStreetName2,
                    $scope.CommunicationStreetName3 = $scope.PermanentStreetName3,
                    $scope.Communication_Attn_CO = $scope.Permanent_Attn_CO,
                    $scope.CommunicationCountryName = $scope.PermanentCountryName,
                    $scope.CommunicationPinCode = $scope.PermanentPinCode
                    $scope.CommunicationCityName = $scope.PermanentCityName,
                    $scope.CommunicationStateName = $scope.PermanentStateName
                }
                if ($scope.Different_Address2 == false) {
                    $scope.CommunicationHouse_No = "",
                    $scope.ViewCommunicationCountryName = "",
                    $scope.CommunicationStreetName1 = "",
                    $scope.ViewCommunicationStateName = "",
                    $scope.CommunicationStreetName2 = "",
                    $scope.ViewCommunicationCityName = "",
                    $scope.CommunicationStreetName3 = "",
                    $scope.CommunicationPinCode = "",
                    $scope.Communication_Attn_CO = "",
                    $scope.CommunicationCityName = "0",
                    $scope.CommunicationStateName = "0",
                    $scope.CommunicationCountryName = "0"
                    return false;
                }
            };

            //This is for Address Copy function//
            $scope.status4function = function () {
                if ($scope.Different_Address3) {
                    $scope.CommunicationHouse_No = $scope.PresentHouse_No,
                    $scope.CommunicationStreetName1 = $scope.PresentStreetName1,
                    $scope.CommunicationStreetName2 = $scope.PresentStreetName2,
                    $scope.CommunicationStreetName3 = $scope.PresentStreetName3,
                    $scope.Communication_Attn_CO = $scope.Present_Attn_CO,
                    $scope.CommunicationCountryName = $scope.PresentCountryName,
                    $scope.CommunicationPinCode = $scope.PresentPinCode,
                    $scope.CommunicationCityName = $scope.PresentCityName,
                    $scope.CommunicationStateName = $scope.PresentStateName

                }
                if ($scope.Different_Address3 == false) {
                    $scope.CommunicationHouse_No = "",
                    $scope.ViewCommunicationCountryName = "",
                    $scope.CommunicationStreetName1 = "",
                    $scope.ViewCommunicationStateName = "",
                    $scope.CommunicationStreetName2 = "",
                    $scope.ViewCommunicationCityName = "",
                    $scope.CommunicationStreetName3 = "",
                    $scope.CommunicationPinCode = "",
                    $scope.Communication_Attn_CO = "",
                    $scope.CommunicationCityName = "0",
                    $scope.CommunicationStateName = "0",
                    $scope.CommunicationCountryName = "0"
                    return false;
                }
            };



            /*This is for calling api method for list the Employee name list 
            with specified filters like Company and Department*/
            $scope.NameList = [];
            $scope.EmployeeAttendancelist = function () {
                if ($scope.NameList != undefined) {  // to avoid going to DB each time when Patient Search clicked
                    $scope.NameList = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName + '&Department_Id=0' +'&LocationId=0').success(function (data) {
                        $scope.NameList = data;

                    });
                }
            };

            $scope.DuplicateId = 0;
            $scope.MasterId = 0;

            // $scope.ReportingManagerId = 0;

            /*Call the api method for insert and Update the record for a Employee
            and display the record of selected Employee when Id is greater than 0
            in edit.html and provide an option for create and modify the Employee and save the Employee record*/
            $scope.EmployeeDetails_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    if ($scope.Joiningdatecalculation() == true) {

                        if ($scope.Employee_Selected != undefined) {
                            $scope.ReportingManager = $scope.Employee_Selected.originalObject.Id;
                        }

                        else {
                            $scope.ReportingManager = null;
                        }
                        $http.get(baseUrl + '/api/EmployeeMaster/EmployeeCode_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Employee_No=' + $scope.Employee_No).success(function (data) {

                        
                            if (data == 1) {
                                alert("Employee No. already exists,cannot duplicate");
                                return false;
                            }
                            else {
                                var filename = "";
                                var Licensefilename = "";

                                var fd = new FormData();
                                var imgBlob;
                                var imgBlobfile;
                                var itemIndexLogo = -1;
                                var itemIndexdoc = -1;

                                var fd = new FormData();
                                if ($('#companyphoto')[0].files[0] != undefined) {
                                    filename = $('#companyphoto')[0].files[0]['name'];
                                    imgBlob = $scope.dataURItoBlob($scope.uploadphoto);
                                    itemIndexLogo = 0;
                                }
                                if ($('#documentfile')[0].files[0] != undefined) {
                                    Licensefilename = $('#documentfile')[0].files[0]['name'];
                                    imgBlobfile = $scope.dataURItoBlob($scope.uploadme);
                                    if (itemIndexLogo == -1) {
                                        itemIndexdoc = 0;
                                    }
                                    else {
                                        itemIndexdoc = 1;
                                    }
                                }
                                if (itemIndexLogo != -1) {
                                    fd.append('file', imgBlob);
                                }

                                if (itemIndexdoc != -1) {
                                    fd.append('file1', imgBlobfile);
                                }
                                /*
                                calling the api method for read the file path 
                                and saving the image uploaded in the local server. 
                                */
                                $http.post(baseUrl + 'api/Common/AttachFile',
                            fd,
                             {
                                 transformRequest: angular.identity,
                                 headers: {
                                     'Content-Type': undefined
                                 }
                             }
                           )
                            .success(function (response) {
                                if ($scope.FileName == "") {
                                    $scope.Photo = "";
                                }

                                else if (itemIndexLogo > -1) {
                                    if ($scope.FileName != "" && response[itemIndexLogo] != "") {
                                        $scope.Photo = response[itemIndexLogo];
                                    }
                                }
                                if ($scope.DocFileName == "") {
                                    $scope.Document_Upload = "";
                                }
                                else if (itemIndexdoc > -1) {
                                    if ($scope.DocFileName != "" && response[itemIndexdoc] != "") {
                                        $scope.Document_Upload = response[itemIndexdoc];
                                    }
                                }
                                //if (!$scope.flagstatus) {
                                //    //$scope.flagstatus = true;
                                //    $scope.PresentHouse_No = $scope.PermanentHouse_No,
                                //    $scope.PresentStreetName1 = $scope.PermanentStreetName1,
                                //    $scope.PresentStreetName2 = $scope.PermanentStreetName2,
                                //    $scope.PresentStreetName3 = $scope.PermanentStreetName3,
                                //    $scope.Present_Attn_CO = $scope.Permanent_Attn_CO,
                                //    $scope.PresentCityName = $scope.PermanentCityName == 0 ? null : $scope.PermanentCityName,
                                //    $scope.PresentStateName = $scope.PermanentStateName == 0 ? null : $scope.PermanentStateName,
                                //    $scope.PresentCountryName = $scope.PermanentCountryName == 0 ? null : $scope.PermanentCountryName,
                                //    $scope.PresentPinCode = $scope.PermanentPinCode
                                //}

                                //if (!$scope.flagstatuspermanent) {
                                //    // $scope.flagstatuspermanent = false;
                                //    $scope.CommunicationHouse_No = $scope.PermanentHouse_No,
                                //    $scope.CommunicationStreetName1 = $scope.PermanentStreetName1,
                                //    $scope.CommunicationStreetName2 = $scope.PermanentStreetName2,
                                //    $scope.CommunicationStreetName3 = $scope.PermanentStreetName3,
                                //    $scope.Communication_Attn_CO = $scope.Permanent_Attn_CO,
                                //    $scope.CommunicationCountryName = $scope.PermanentCountryName == 0 ? null : $scope.PermanentCountryName,
                                //    $scope.CommunicationPinCode = $scope.PermanentPinCode
                                //    $scope.CommunicationCityName = $scope.PermanentCityName == 0 ? null : $scope.PermanentCityName,
                                //    $scope.CommunicationStateName = $scope.PermanentStateName == 0 ? null : $scope.PermanentStateName
                                //}

                                var obj = {
                                    Id: $scope.MasterId,
                                    Title_Name: $scope.Title_Name,
                                    FirstName: $scope.FirstName,
                                    MiddleName: $scope.MiddleName == "" ? null : $scope.MiddleName,
                                    LastName: $scope.LastName == "" ? null : $scope.LastName,
                                    BirthDate: $scope.BirthDate,
                                    Date_Of_Joining: $scope.Date_Of_Joining,
                                    Gender_Name: $scope.Gender_Name,
                                    Marital_status_Name: $scope.Marital_status_Name == 0 ? null : $scope.Marital_status_Name,
                                    Citizenship_Name: $scope.Citizenship_Name == 0 ? null : $scope.Citizenship_Name,
                                    CompanyName: $scope.CompanyName == 0 ? null : $scope.CompanyName,
                                    Department_Name: $scope.Department_Name,
                                    Designation_Name: $scope.Designation_Name,
                                    Location: $scope.Location,
                                    Work_LocationName: $scope.Work_LocationName == 0 ? null : $scope.Work_LocationName,
                                    Grade_Name: $scope.Grade_Name == 0 ? null : $scope.Grade_Name,
                                    Branch_Name: $scope.Branch_Name == 0 ? null : $scope.Branch_Name,
                                    Employee_No: $scope.Employee_No == "" ? null : $scope.Employee_No,
                                    ShortName: $scope.ShortName == "" ? null : $scope.ShortName,
                                    UserName: $scope.UserName == "" ? null : $scope.UserName,
                                    Password: $scope.Password == "" ? null : $scope.Password,
                                    // Password: $scope.NewPassword = "" ? null : $scope.NewPassword,
                                    Email1: $scope.Email1 == "" ? null : $scope.Email1,
                                    Email2: $scope.Email2 == "" ? null : $scope.Email2,
                                    PhoneNo_M1: $scope.PhoneNo_M1 == "" ? null : $scope.PhoneNo_M1,
                                    PhoneNo_M2: $scope.PhoneNo_M2 == "" ? null : $scope.PhoneNo_M2,
                                    Cell_No: $scope.Cell_No == "" ? null : $scope.Cell_No,
                                    Date_Of_Confirmation: $scope.Date_Of_Confirmation,
                                    Blood_Group: $scope.Blood_Group == 0 ? null : $scope.Blood_Group,
                                    Status_Name: $scope.Status_Name == 0 ? null : $scope.Status_Name,
                                    EmpType_Name: $scope.EmpType_Name == 0 ? null : $scope.EmpType_Name,
                                    Emg_Contact_Person: $scope.Emg_Contact_Person == "" ? null : $scope.Emg_Contact_Person,
                                    Emg_Contact_No: $scope.Emg_Contact_No == "" ? null : $scope.Emg_Contact_No,
                                    PAN_No: $scope.PAN_No == "" ? null : $scope.PAN_No,
                                    Aadhar_No: $scope.Aadhar_No == "" ? null : $scope.Aadhar_No,
                                    Voter_Id: $scope.Voter_Id == "" ? null : $scope.Voter_Id,
                                    Bank_Acc_No: $scope.Bank_Acc_No == "" ? null : $scope.Bank_Acc_No,
                                    Bank_Name: $scope.Bank_Name == "" ? null : $scope.Bank_Name,
                                    Bank_Branch: $scope.Bank_Branch == "" ? null : $scope.Bank_Branch,
                                    IFSC_Code: $scope.IFSC_Code == "" ? null : $scope.IFSC_Code,
                                    PF_Number: $scope.PF_Number == "" ? null : $scope.PF_Number,
                                    TAN_Number: $scope.TAN_Number == "" ? null : $scope.TAN_Number,
                                    Member_Id: $scope.Member_Id == "" ? null : $scope.Member_Id,
                                    PFApplicable: $scope.PFApplicable,
                                    ESIApplicable: $scope.ESIApplicable,
                                    ConsiderActual: $scope.ConsiderActual,
                                    ESI_ConsiderActual: $scope.ESI_ConsiderActual,
                                    ESI_Number: $scope.ESI_Number == "" ? null : $scope.ESI_Number,
                                    EPF_DOJ: $scope.EPF_DOJ,
                                    EPF_DOE: $scope.EPF_DOE,
                                    EPS_DOJ: $scope.EPS_DOJ,
                                    EPS_DOE: $scope.EPS_DOE,
                                    Father_Name: $scope.Father_Name == "" ? null : $scope.Father_Name,
                                    Mother_Name: $scope.Mother_Name == "" ? null : $scope.Mother_Name,
                                    Spouse_Name: $scope.Spouse_Name == "" ? null : $scope.Spouse_Name,
                                    Spouse_DOB: $scope.Spouse_DOB,
                                    Anniversary_Date: $scope.Anniversary_Date,
                                    No_of_Children: $scope.No_of_Children == "" ? null : $scope.No_of_Children,
                                    Education_Qualification: $scope.Education_Qualification == "" ? null : $scope.Education_Qualification,
                                    Skills: $scope.Skills == "" ? null : $scope.Skills,
                                    Experience_Months: $scope.Experience_Months == "" ? null : $scope.Experience_Months,
                                    Experience_Years: $scope.Experience_Years,
                                    Document_Upload: $scope.Document_Upload == "" ? null : $scope.Document_Upload,
                                    Passport_Number: $scope.Passport_Number == "" ? null : $scope.Passport_Number,
                                    Place_of_Issue: $scope.Place_of_Issue == "" ? null : $scope.Place_of_Issue,
                                    Passport_Validity: $scope.Passport_Validity,
                                    Driving_License: $scope.Driving_License == "" ? null : $scope.Driving_License,
                                    License_Issue_Authority: $scope.License_Issue_Authority == "" ? null : $scope.License_Issue_Authority,
                                    Frequent_Flyer_No: $scope.Frequent_Flyer_No == "" ? null : $scope.Frequent_Flyer_No,
                                    Flight_Preference: $scope.Flight_Preference == "" ? null : $scope.Flight_Preference,
                                    Facebook_AC: $scope.Facebook_AC == "" ? null : $scope.Facebook_AC,
                                    Linked_In: $scope.Linked_In == "" ? null : $scope.Linked_In,
                                    Google_Plus: $scope.Google_Plus == "" ? null : $scope.Google_Plus,
                                    GTalk: $scope.GTalk == "" ? null : $scope.GTalk,
                                    Whatsapp: $scope.Whatsapp == "" ? null : $scope.Whatsapp,
                                    Twitter_AC: $scope.Twitter_AC == "" ? null : $scope.Twitter_AC,
                                    Others_1: $scope.Others_1 == "" ? null : $scope.Others_1,
                                    Others_2: $scope.Others_2 == "" ? null : $scope.Others_2,
                                    Resignation_Date: $scope.Resignation_Date == 0 ? null : $scope.Resignation_Date,
                                    Reason_Leaving_Type: $scope.ReasonType == 0 ? null : $scope.ReasonType,
                                    Leaving_Reason: $scope.Leaving_Reason == "" ? null : $scope.Leaving_Reason,
                                    Notice_Period: $scope.Notice_Period == 0 ? null : $scope.Notice_Period,
                                    Last_Working_Day: $scope.Last_Working_Day == 0 ? null : $scope.Last_Working_Day,
                                    Remarks: $scope.Remarks == "" ? null : $scope.Remarks,
                                    Payment_Date: $scope.Payment_Date,
                                    DocFullpath: "",
                                    DocFileName: $scope.DocFileName,
                                    FileName: $scope.FileName == "" ? null : $scope.FileName,
                                    Photo_Fullpath: null,
                                    Photo: $scope.Photo,

                                    //new fields//
                                    SuffixName: $scope.SuffixName == 0 ? null : $scope.SuffixName,
                                    SubDepartmentName: $scope.SubDepartmentName == 0 ? null : $scope.SubDepartmentName,
                                    DivisionName: $scope.DivisionName == 0 ? null : $scope.DivisionName,
                                    ResidenceCountry: $scope.ResidenceCountry == 0 ? null : $scope.ResidenceCountry,
                                    AdditionalCountry_CitizenshipName: $scope.AdditionalCountry_CitizenshipName == 0 ? null : $scope.AdditionalCountry_CitizenshipName,

                                    PermanentHouse_No: $scope.PermanentHouse_No,
                                    PermanentStreetName1: $scope.PermanentStreetName1,
                                    PermanentStreetName2: $scope.PermanentStreetName2,
                                    PermanentStreetName3: $scope.PermanentStreetName3,
                                    Permanent_Attn_CO: $scope.Permanent_Attn_CO,

                                    PermanentCityName: $scope.PermanentCityName == 0 ? null : $scope.PermanentCityName,
                                    PermanentStateName: $scope.PermanentStateName == 0 ? null : $scope.PermanentStateName,
                                    PermanentCountryName: $scope.PermanentCountryName == 0 ? null : $scope.PermanentCountryName,
                                    PermanentPinCode: $scope.PermanentPinCode,

                                    PresentHouse_No: $scope.PresentHouse_No,
                                    PresentStreetName1: $scope.PresentStreetName1,
                                    PresentStreetName2: $scope.PresentStreetName2,
                                    PresentStreetName3: $scope.PresentStreetName3,
                                    Present_Attn_CO: $scope.Present_Attn_CO,
                                    PresentCityName: $scope.PresentCityName == 0 ? null : $scope.PresentCityName,
                                    PresentStateName: $scope.PresentStateName == 0 ? null : $scope.PresentStateName,
                                    PresentCountryName: $scope.PresentCountryName == 0 ? null : $scope.PresentCountryName,
                                    PresentPinCode: $scope.PresentPinCode,

                                    CommunicationHouse_No: $scope.CommunicationHouse_No,
                                    CommunicationStreetName1: $scope.CommunicationStreetName1,
                                    CommunicationStreetName2: $scope.CommunicationStreetName2,
                                    CommunicationStreetName3: $scope.CommunicationStreetName3,
                                    Communication_Attn_CO: $scope.Communication_Attn_CO,
                                    CommunicationCity: $scope.CommunicationCity,
                                    CommunicationCityName: $scope.CommunicationCityName == 0 ? null : $scope.CommunicationCityName,
                                    CommunicationStateName: $scope.CommunicationStateName == 0 ? null : $scope.CommunicationStateName,
                                    CommunicationCountryName: $scope.CommunicationCountryName == 0 ? null : $scope.CommunicationCountryName,
                                    CommunicationPinCode: $scope.CommunicationPinCode,
                                    ShowAllEmployee: $scope.ShowAllEmployee,
                                    Different_Address1: $scope.Different_Address1,
                                    Different_Address2: $scope.Different_Address2,
                                    Different_Address3: $scope.Different_Address3,
                                    ShowPermanent_address: $scope.ShowPermanent_address,
                                    ShowPresent_address: $scope.ShowPresent_address,
                                    Finance_LocationId: $scope.Finance_LocationName,
                                    PayEffective_Date: $scope.PayEffective_Date == 0 ? null : $scope.PayEffective_Date,
                                    OfficialEmail: $scope.OfficialEmail == "" ? null : $scope.OfficialEmail,
                                                               
                                };
                             
                                $scope.loading = true;
                                $timeout(function () {
                                    if ($scope.loading == true) {
                                        $rootScope.$broadcast('show');
                                    }
                                }, 3000); // 5 seconds

                          
                                $http.post(baseUrl + '/api/EmployeeMaster/Employee_AddEdit/', obj).success(function (data) {
                                    // console.log(data);
                                    $scope.MasterId = data;

                                    if ($scope.ModeType == '1') {
                                        $location.path("/ListEmployee/" + $scope.MasterId + "/1");
                                    }
                                    else {
                                        $location.path("/ViewEmployee/" + "2/" + $scope.MasterId);
                                        //$location.path("/ListEmployee/" + $scope.MasterId + "/1");
                                    }
                                    // window.location.href = baseUrl + "/Home/Index#/ListEmployee/" + $scope.MasterId + "/1";
                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');
                                }).error(function (data) {
                                    $scope.error = "An error has occurred while adding Employee details!" + data.ExceptionMessage;
                                });
                            }).error(function (response) {
                                $scope.Photo = "";
                                $scope.Document_Upload = "";
                            });
                                $("#companyphoto").val('');
                                $("#documentfile").val('');
                            }
                        }).error(function (data) {

                            $scope.error = "Problem in checking Employee No duplicate!" + data.ExceptionMessage;
                        });
                    }

                }
            };

            // console.log(PermanentCountryName);

            $scope.clearReportingmanager = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            }

            /* This is for calling View/Edit page redirect Method */
            $scope.ViewRedirect = function () {
                $location.path("/EditEmployee/" + $scope.ModeType + "/" + $scope.MasterId + "/1");
                //window.location.href = baseUrl + "/Home/Index#/EditEmployee/" + $scope.MasterId + "/1";
            }
            $scope.MasterId = 0;

            /* This is for List page redirect method*/
            $scope.ListRedirect = function () {
                if ($scope.MasterId == 0) {
                    $location.path("/ListEmployee/0/0");
                    //window.location.href = baseUrl + "/Home/Index#/ListEmployee/0/0";
                }
                else if ($scope.MasterId > 0) {
                    $location.path("/ListEmployee/0/1");
                    // window.location.href = baseUrl + "/Home/Index#/ListEmployee/0/1";
                    $scope.EmployeeList_Go();
                }
            }

            /*calling clear function */
            $scope.ClearPresentListfunction = function () {
                $scope.PresentState = "0";
                $scope.PresentStateName = "0";
                $scope.PresentCity = "0";
                $scope.PresentCityName = "0";
            };
            /*calling clear function */
            $scope.ClearPresentstatefunction = function () {
                $scope.PresentCity = "0";
                $scope.PresentCityName = "0";
            };

            $scope.ClearPremenentListfunction = function () {
                //  $scope.PermanentState = "0";
                $scope.PermanentStateName = "0";
                //  $scope.PermanentCity = "0";
                $scope.PermanentCityName = "0";
            };
            /*calling clear function */
            $scope.ClearPremenentstatefunction = function () {
                //   $scope.PermanentCity = "0";
                $scope.PermanentCityName = "0";
            };


            $scope.ClearCommunicationListfunction = function () {
                //   $scope.CommunicationState = "0";
                $scope.CommunicationStateName = "0";
                //    $scope.CommunicationCity = "0";
                $scope.CommunicationCityName = "0";
            };
            /*calling clear function */
            $scope.ClearCommunicationstatefunction = function () {
                $scope.CommunicationCity = "0";
                $scope.CommunicationCityName = "0";
            };


            //$scope.CancelPopup = function () {
            //    angular.element('#CreateModal').modal('hide');
            //    angular.element('#ViewModal').modal('hide');
            //    // $scope.ClearPopup();
            //    $scope.EmployeeList_Search();
            //}

            //This is for image clear functions//
            $scope.imageclear = function () {
                $scope.uploadphoto = "";
                $('#companyphoto').val = '';
                Photo_Fullpath = "";
                $scope.FileName = "";
            };

            //This is for Document file clear functions//
            $scope.fileclear = function () {
                $('#documentfile').val = ('');
                $scope.DocFileName = "";
            };

        }
    ]);


    EmpControllers.controller("RequirementController", ['$scope', '$http', '$filter', '$routeParams', '$location', 'filterFilter', '$window', '$rootScope', '$timeout',
         function ($scope, $http, $filter, $routeParams, $location, $ff, $window, $rootScope, $timeout) {

             // Declaration and initialization of Scope Variables.
             $scope.MasterId = 0;
             $scope.AddQualification = [];
             $scope.AddTechnical_Skill = [];
             $scope.AddTools = [];
             $scope.WorkFlowInitialStatus = [];
             $scope.QualificaitonRow = -1;
             $scope.SkillRow = -1;
             $scope.ToolsRow = -1;
             $scope.Citizenship = "0";
             $scope.Add_Citizenship = "0";
             $scope.GenderName = "0";
             $scope.Position = "0";
             $scope.IsActive = "1";
             //$scope.IsActive = "-1";
             $scope.Name = "0";
             $scope.Status = "0";
             //$scope.Status = "0";
             $scope.ToStatus = "0";
             //$scope.listPage = $routeParams.view;
             $scope.Gender_Name = "0";
             $scope.PositionName = "0";
             $scope.Common_Status_Id = "0";
             var DuplicateSkills = '';
             var DuplicateQualification = '';
             var DuplicateTools = '';
             $scope.ChangeStatus = "0";
             $scope.Id = 0;

             $scope.EmployeeId = $window.localStorage['UserId'];

             $scope.listPage = $routeParams.view;
             $scope.Mode = $routeParams.Mode;

             if ($scope.Mode == 1) {
                 $scope.Statusflag = 1;
             }
             else {
                 $scope.Statusflag = 0;
             }

             $scope.Transaction = 'Resource Requirement';
             // $scope.Mode = $routeParams.Mode;
             if ($scope.listPage == 1) {
                 $scope.Status_List = "0";
             }
             else {
                 $scope.Status_List = "-1";
             }


             // List Page Pagination.
             $scope.listdata = [];
             $scope.current_page = 1;
             $scope.page_size = 30;
             $scope.rembemberCurrentPage = function (p) {
                 $scope.current_page = p
             }
             //$scope.Mode = $routeParams.Mode;
             //$scope.Status_List = "-1";

             /* 
             Calling api method to populate dropdown list in the list html page for the field 
             Status and its list of work flow initial status
             */
             $http.get(baseUrl + 'api/Common/WorkFlow_InitialStatus/?Transaction=' + $scope.Transaction).success(function (data) {
                 // $scope.WorkFlowInitialStatus = data;

                 $scope.WorkFlowInitialStatus = $ff(data, { Status: 'Open' });
                 $scope.WorkFlow = data;

                 //$scope.WorkFlow = $ff(data, { Status: 'Closed' });
                 // $sc
                 // Processed
             });

             /*Calling api method to populate the status dropdown and its list of work flow
            status by transaction*/
             $scope.CommonList = [];
             $http.get(baseUrl + 'api/Common/CommonTransaction/?Transaction=' + $scope.Transaction).success(function (data) {
                 // console.log(data);
                 $scope.TransactionId = data.Id;
                 $http.get(baseUrl + 'api/Common/WorkFlowStatus/?TransactionName=' + $scope.Transaction).success(function (data) {
                     // console.log(data);
                     $scope.CommonList = data;
                 });
             });

             $scope.ProcessedFunction = function () {
                 alert("Closed Requirement cannot be edited");
             }


             /* Validating the mandatory fields in create page to not null.
             check those fields
             No_Of_Position,Year_of_Experience,Status,Technical Skill,
             and displays alert message when it is null.
 
             Checking duplications for Technical skill, Qualification, Tools and 
             displays alert message when it already exists
             */
             $scope.Validationcontrols = function () {

                 var TSitem = 0;
                 angular.forEach($scope.AddTechnical_Skill, function (value, index) {
                     if (value.Tec_Skill_Id > 0) {
                         TSitem = 1;
                     }
                 });

                 var TSDuplicate = 0;
                 var DuplicateSkills = '';
                 angular.forEach($scope.AddTechnical_Skill, function (value1, index1) {
                     angular.forEach($scope.AddTechnical_Skill, function (value2, index2) {

                         if (index1 > index2 && value1.Tec_Skill_Id == value2.Tec_Skill_Id) {
                             TSDuplicate = 1;
                             DuplicateSkills = DuplicateSkills + $scope.GetSkillName(value2.Tec_Skill_Id) + ',';

                         }
                         if (index1 != null && value2.Tec_Skill_Id == null && $scope.AddTechnical_Skill.length > 1) {
                             alert("Please select Technical Skills");
                             return Tec_Skill_Id;

                         }

                     });
                 });

                 var GCDuplicate = 0;
                 var DuplicateQualification = '';
                 angular.forEach($scope.AddQualification, function (value1, index1) {
                     angular.forEach($scope.AddQualification, function (value2, index2) {


                         //if ($scope.MasterId > 0) {                       

                         //    angular.forEach($scope.AddQualification, function (value1, index1) {
                         //        angular.forEach($scope.AddQualification, function (value2, index2) {

                         //            if (value1.Qualification_Id == null || value2.Qualification_Id == null) {
                         //                if (index1 == 0 || index2 == 0) {
                         //                    alert("ss");
                         //                    GCDuplicatess = 2;
                         //                };
                         //            }
                         //            //else if (value2.Qualification_Id == null) {

                         //            //    if (index2 == 0) {
                         //            //        GCDuplicatesss = 2;
                         //            //    };
                         //            //};
                         //        });
                         //    });
                         //};

                         if (index1 > index2 && value1.Qualification_Id == value2.Qualification_Id) {
                             GCDuplicate = 1;
                             DuplicateQualification = DuplicateQualification + $scope.GetQualificationName(value2.Qualification_Id) + ',';
                         }
                         if (index1 != null && value2.Qualification_Id == null && $scope.AddQualification.length > 1) {
                             alert("Please select Qualification");
                             return Tools_Id;

                         }
                     });
                 });



                 var TooleDuplicate = 0;
                 var DuplicateTools = '';
                 angular.forEach($scope.AddTools, function (value1, index1) {
                     angular.forEach($scope.AddTools, function (value2, index2) {

                         if (index1 > index2 && value1.Tools_Id == value2.Tools_Id) {
                             TooleDuplicate = 1;
                             DuplicateTools = DuplicateTools + $scope.GetToolName(value2.Tools_Id) + ',';

                         }
                         if (index1 != null && value2.Tools_Id == null && $scope.AddTools.length > 1) {
                             alert("Please select Tools");
                             return Tools_Id;

                         }

                     });
                 });

                 //angular.forEach($scope.AddTools, function (value1, index1) {
                 //    angular.forEach($scope.AddTools, function (value2, index2) {
                 //        if (index1 != "" && index2 == "" && value1.Tools_Id == value2.Tools_Id) {
                 //            TooleDuplicate = 2;
                 //        }


                 //    });
                 //});

                 if (typeof ($scope.No_Of_Position) == "undefined" || $scope.No_Of_Position == "") {
                     alert("Please enter No. of Position");
                     return false;
                 }
                 else if ((typeof ($scope.Year_of_Experience) == "undefined" || $scope.Year_of_Experience == "") && $scope.Year_of_Experience != "0") {
                     alert("Please enter Years of Experience");
                     return false;
                 }
                 else if (typeof ($scope.Name) == "undefined" || $scope.Name == 0) {
                     alert("Please select Status");
                     return false;
                 }
                 else if ($scope.AddTechnical_Skill.length < 1 || TSitem == 0) {
                     alert("Please select Technical Skill");
                     return false;
                 }
                 else if (parseInt($scope.CTC_Range_Upto) < parseInt($scope.CTC_Range_From)) {
                     alert("Please enter CTC Range Upto greater than CTC Range From");
                     return false;
                 }

                 else if (GCDuplicate == 1) {
                     alert('Qualification ' + DuplicateQualification.substring(0, DuplicateQualification.length - 1) + ' already exists');
                     //alert("Qualification already exists cannot duplicate");
                     return false;
                 }


                 else if (TSDuplicate == 1) {
                     alert('Technical Skills ' + DuplicateSkills.substring(0, DuplicateSkills.length - 1) + ' already exists');
                     //alert("Technical Skills already exists cannot duplicate");
                     return false;
                 }
                 else if (TSDuplicate == 2) {
                     alert("Please select the Technical Skills");
                     //alert("Qualification already exists cannot duplicate");
                     return false;
                 }
                 else if (TooleDuplicate == 1) {
                     alert('Tools ' + DuplicateTools.substring(0, DuplicateTools.length - 1) + ' already exists');
                     //alert("Tools already exists cannot duplicate");
                     return false;
                 }

                 return true;

             };


             /*calling Alert message for cannot edit inactive record function */
             $scope.ErrorFunction = function () {
                 alert("Inactive record cannot be edited");
             };

             /* 
             Calling api method for the dropdown list in the html page for the fields 
             Gender,Designation,Citizenship,Qualification,Tools,Technical skill,Status
             */
             $scope.CommonFilterList = [];

             /* GENDER*/
             $scope.GenderFilterList = [];
             $scope.getGender = [];
             $http.get(baseUrl + '/api/RequirementMaster/GetGenderList/').success(function (data) {
                 // all Gender records list including active and inactive 
                 // used for list page DD and inactive records filtering
                 $scope.GenderFilterList = data;
                 // only active Gender
                 $scope.getGender = $ff(data, { IsActive: 1 });
             });

             /* DESIGNATION */
             $scope.DesignationFilterList = [];
             $scope.getDesignation = [];
             $http.get(baseUrl + '/api/RequirementMaster/GetDesignationList/').success(function (data) {
                 // all Designation records list including active and inactive 
                 // used for list page DD and inactive records filtering
                 $scope.DesignationFilterList = data;
                 // only active Designation
                 $scope.getDesignation = $ff(data, { IsActive: 1 });
             });
             /* CITIZENSHIP */
             $scope.CitizenshipFilterList = [];
             $scope.getCitizenship = [];

             $http.get(baseUrl + '/api/RequirementMaster/GetCitizenshipList/').success(function (data) {
                 // all Citizenship records list including active and inactive 
                 // used for list page DD and inactive records filtering
                 $scope.CitizenshipFilterList = data;
                 // only active Citizenship
                 $scope.getCitizenship = $ff(data, { IsActive: 1 });
             });

             /* Calling api method to populate Qualification dropdown list in add/edit html pages */
             $http.get(baseUrl + '/api/RequirementMaster/GetQualificationList/').success(function (data) {
                 $scope.getQualification = data;
             });
             $scope.GetQualificationName = function (qualification) {
                 var qualificationId = qualification;
                 var qualification_Name = "";
                 var qualification_Name = $.grep($scope.getQualification, function (qualification) {
                     return qualification.Id == qualificationId;
                 })[0].Course_Name;

                 return qualification_Name;
             }

             /* Calling api method to populate Technical skill dropdown list in add/edit html pages */
             $http.get(baseUrl + '/api/RequirementMaster/GetSkillsList/').success(function (data) {
                 $scope.getSkill = data;
             });
             $scope.GetSkillName = function (skill) {
                 var skillId = skill;
                 var skill_Name = "";
                 skill_Name = $.grep($scope.getSkill, function (skill) {
                     return skill.Id == skillId;
                 })[0].Technical_Skill;

                 return skill_Name;
             }

             /* Calling api method to populate Tools dropdown list in add/edit html pages */
             $http.get(baseUrl + '/api/RequirementMaster/GetToolsList/').success(function (data) {
                 $scope.getTool = data;
             });
             $scope.GetToolName = function (tool) {
                 var toolId = tool;
                 var tool_Name = "";
                 if (tool > 0) {
                     tool_Name = $.grep($scope.getTool, function (tool) {
                         return tool.Id == toolId;
                     })[0].Tools_Name;
                 }
                 return tool_Name;
             };

             $scope.loading = false;
             /*
            Calling the api method to list the Resource details matching the specified 
            filters Position,Gender,IsActive,Status_List and
            showing the result in table.
           */
             $scope.emptydata = [];
             $scope.rowCollection = [];
             $scope.flag = 0;
             $scope.RequirementListSearch = function () {

                 if ($routeParams.Id != undefined) {
                     $scope.Id = $routeParams.Id;

                     $scope.loading = true;
                     $timeout(function () {
                         if ($scope.loading == true) {
                             $rootScope.$broadcast('show');
                         }
                     }, 3000); // 3 second

                     $http.get(baseUrl + '/api/RequirementMaster/RequirementDetailsList/?Id=' + $scope.Id + '&Position_Id=' + $scope.PositionName + '&Gender_Id=' + $scope.Gender_Name + '&IsActive=' + $scope.IsActive + '&Status=' + $scope.Status_List).success(function (data) {
                    
                         $scope.emptydata = [];
                         $scope.rowCollection = [];
                         $scope.rowCollection = data;
                         if ($scope.rowCollection.length > 0) {
                             $scope.flag = 1;
                         }
                         else {
                             $scope.flag = 0;
                         }

                         $scope.loading = false;
                         $rootScope.$broadcast('hide');

                     }).error(function (data) {
                         $scope.error = "AN error has occured while Listing the records!" + data;
                     })
                 }
             };

             /* Calling api method to populate Change status dropdown in list Requirement approval html
             page and it lists the status of work flow */
             $scope.WorkFlow_ChangeStatus = [];
             $scope.statusfunction = function () {
                 $scope.flagstatus = true;
                 $http.get(baseUrl + 'api/Common/CommonWorkFlow_GetApprovalStatus/?Id=' + $scope.EmployeeId + '&Transaction_Name=' + $scope.Transaction + '&CurrentStatus=' + $scope.Name).success(function (data) {
                     //$scope.sName = data.sName;
                     $scope.WorkFlow_ChangeStatus = data;
                 });
             };

             /*Calling list function for Requirement list page */
             $scope.RequirementListGo = function () {
                 location.path = baseUrl + "/Home/Index#/JobRequirementList/1/0";
                 $scope.RequirementListSearch($routeParams.Id = 0);
             };

             /*Calling list function for Requirement Approval list page */
             $scope.RequirementListapprovalGo = function () {
                 location.path = baseUrl + "/Home/Index#/JobRequirementList/2/0";
                 $scope.RequirementListSearchapproval($routeParams.Id = 0);
                 //$scope.RequirementListSearch($routeParams.Id = 0);

             };


             /*on clicking ----> addnew ----> calls the Add/Edit function */
             $scope.AddReq = function (CatId) {
                 $scope.Id = CatId;
                 // $scope.ViewRequirement();
                 $location.path("/JobRequirement/");
                 //  window.location.href = baseUrl + "/Home/Index#/JobRequirement/"
             };

             /*on clicking ----> view tool tip ----> calls View function */
             $scope.ViewReq = function (CatId) {
                 $scope.Id = CatId;
                 $scope.ViewRequirement();
                 // window.location.href = baseUrl + "/Home/Index#/JobRequirementView/" + $scope.Id + "/" + $scope.listPage;
                 $location.path("/JobRequirementView/" + $scope.Id + "/" + $scope.listPage);

             };

             /*on clicking ----> edit tool tip ----> calls Add/Edit function */
             $scope.EditReq = function (CatId) {
                 $scope.Id = CatId;
                 $scope.ViewRequirement();
                 $location.path("/JobRequirementEdit/" + $scope.Id);
                 // window.location.href = baseUrl + "/Home/Index#/JobRequirementEdit/" + $scope.Id;
             };

             //Calling list function//
             $scope.ListReq = function (CatId) {
                 if ($scope.Mode == 0) {
                     //  $scope.Id = CatId;
                     $scope.rowCollection = [];
                     //  $scope.EmployeeList_Search();
                 }
                 else if ($scope.Mode == 1) {
                     $scope.RequirementListSearch();
                 }
             };




             /*
             Calling the api method to view the details of the Resource 
             it matching the specified Resource Id 
             and display the details in the view pop up window.
             */
             $scope.ViewRequirement = function () {
                 if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                     $scope.Id = $routeParams.Id;
                     $scope.MasterId = $routeParams.Id;
                     $scope.DuplicateId = $routeParams.Id;
                     $scope.RequirementId = $routeParams.Id;
                 }
                 $http.get(baseUrl + '/api/RequirementMaster/RequirementDetails_View/?Id=' + $scope.Id).success(function (data) {
                     $scope.RequirementId = data.Id;
                     $scope.DuplicateId = data.Id;
                     $scope.Reference_No = data.Reference_No;
                     $scope.Citizenship = data.Citizenship_Id.toString();
                     $scope.ViewCitizenship = data.Citizenship;
                     $scope.Add_Citizenship = data.AddCitizenship_Id.toString();
                     $scope.ViewAdd_Citizenship = data.Add_Citizenship;
                     $scope.Year_of_Experience = data.Year_of_Experience;
                     $scope.Position = data.Position_Id.toString();
                     $scope.ViewPosition = data.Position;
                     $scope.GenderName = data.Gender_Id.toString();
                     $scope.ViewGenderName = data.GenderName;
                     $scope.No_Of_Position = data.No_Of_Position;
                     $scope.CTC_Range_From = data.CTC_Range_From;
                     $scope.CTC_Range_Upto = data.CTC_Range_Upto;
                     $scope.Joining_Days = data.Joining_Days;
                     $scope.Job_Description = data.Job_Description;
                     $scope.Name = data.Common_Status_Id.toString();
                     $scope.ViewName = data.Name;
                     //$scope.sName = data.Common_Status_Id.toString();
                     //$scope.
                     $scope.Remarks = data.Remarks;

                     // if the current viewing Citizenship is inactive
                     // set the flag value to 1
                     $scope.CitizenshipInactiveFlag = 0;
                     if (($ff($scope.CitizenshipFilterList, { Id: $scope.Citizenship, Citizenship: $scope.ViewCitizenship, IsActive: 0 }).length) == 1) {
                         $scope.CitizenshipInactiveFlag = 1;
                     }

                     // if the current viewing Designation is inactive
                     // set the flag value to 1
                     $scope.DesignationInactiveFlag = 0;
                     if (($ff($scope.DesignationFilterList, { Id: $scope.Position, Position: $scope.ViewPosition, IsActive: 0 }).length) == 1) {
                         $scope.DesignationInactiveFlag = 1;
                     }

                     // if the current viewing Gender is inactive
                     // set the flag value to 1
                     $scope.GenderInactiveFlag = 0;
                     if (($ff($scope.GenderFilterList, { Id: $scope.GenderName, GenderName: $scope.ViewGenderName, IsActive: 0 }).length) == 1) {
                         $scope.GenderInactiveFlag = 1;
                     }

                     // if the current viewing Additional Citizenship is inactive
                     // set the flag value to 1
                     $scope.AdditionalCitizenshipInactiveFlag = 0;
                     if (($ff($scope.CitizenshipFilterList, { Id: $scope.Add_Citizenship, Add_Citizenship: $scope.ViewAdd_Citizenship, IsActive: 0 }).length) == 1) {
                         $scope.AdditionalCitizenshipInactiveFlag = 1;
                     }

                     // if the current viewing Common status is inactive
                     // set the flag value to 1
                     $scope.CommonstatusInactiveFlag = 0;
                     if (($ff($scope.CommonFilterList, { Id: $scope.Name, Name: $scope.ViewName, IsActive: 0 }).length) == 1) {
                         $scope.CommonstatusInactiveFlag = 1;
                     }


                     $http.get(baseUrl + '/api/RequirementMaster/Qualification_View/?Id=' + $scope.Id).success(function (Qualificationdata) {
                         $scope.AddQualification = Qualificationdata;
                         $http.get(baseUrl + '/api/RequirementMaster/Requirement_Skills_View/?Id=' + $scope.Id).success(function (Technical_Skilldata) {
                             $scope.AddTechnical_Skill = Technical_Skilldata;
                             $http.get(baseUrl + '/api/RequirementMaster/Requirement_Tools_View/?Id=' + $scope.Id).success(function (Toolsdata) {
                                 $scope.AddTools = Toolsdata;
                             }).error(function (Toolsdata) {
                                 $scope.error = "AN error has occured while view" + Toolsdata;
                             });
                         }).error(function (Technical_Skilldata) {
                             $scope.error = "AN error has occured while view" + Technical_Skilldata;
                         });
                     }).error(function (Qualificationdata) {
                         $scope.error = "AN error has occured while view" + Qualificaitondata;
                     });
                 }).error(function (data) {
                     $scope.error = "AN error has occured while view" + data;
                 });

             };

             /*This is array function to display default row from Qualification details */
             $scope.AddQualification = [{
                 'Id': $scope.ChildId,
                 'Qualification_Id': $scope.Qualification_Id,
                 'Course_Name': $scope.Course_Name
             }];
             /*This is Addrow function to add new row and save Qualifiction details*/
             $scope.QualificationSave = function () {
                 if ($scope.QualificationRow >= 0) {
                     var obj = {
                         'Id': $scope.ChildId,
                         'Qualification_Id': $scope.Qualification_Id,
                         'Course_Name': $scope.Course_Name
                     }
                     $scope.AddQualification[$scope.QualificationRow] = obj;
                 }
                 else {
                     $scope.AddQualification.push({
                         'Id': $scope.ChildId,
                         'Qualification_Id': $scope.Qualification_Id,
                         'Course_Name': $scope.Course_Name
                     })
                 }

             };

             /*This is an array function to display default row from Technical Skill details*/
             $scope.AddTechnical_Skill = [{
                 'Id': $scope.ChildId,
                 'Tec_Skill_Id': $scope.Tec_Skill_Id,
                 'Technical_Skill': $scope.Technical_Skill
             }];
             /*This is Addrow function to add new row and save Technical skill details */
             $scope.TechnicalSave = function () {
                 if ($scope.SkillsRow >= 0) {
                     var obj = {
                         'Id': $scope.ChildId,
                         'Tec_Skill_Id': $scope.Tec_Skill_Id,
                         'Technical_Skill': $scope.Technical_Skill,
                     }
                     $scope.AddTechnical_Skill[$scope.SkillsRow] = obj;
                 }
                 else {
                     $scope.AddTechnical_Skill.push({
                         'Id': $scope.ChildId,
                         'Tec_Skill_Id': $scope.Tec_Skill_Id,
                         'Technical_Skill': $scope.Technical_Skill
                     })
                 }
             };

             /*This is an array function to display default row from Tools*/
             $scope.AddTools = [{
                 'Id': $scope.ChildId,
                 'Tools_Id': $scope.Tools_Id,
                 'Tools_Name': $scope.Tools_Name
             }];
             /*This is a Addrow function to add new row and save Tools details*/
             $scope.ToolsSave = function () {
                 if ($scope.ToolsRow >= 0) {
                     var obj = {
                         'Id': $scope.ChildId,
                         'Tools_Id': $scope.Tools_Id,
                         'Tools_Name': $scope.Tools_Name
                     }
                     $scope.AddTools[$scope.ToolsRow] = obj;
                 }
                 else {
                     $scope.AddTools.push({
                         'Id': $scope.ChildId,
                         'Tools_Id': $scope.Tools_Id,
                         'Tools_Name': $scope.Tools_Name
                     })
                 }
             };

             // Declaration and initialization of Scope Variables.
             $scope.DuplicateId = 0;

             /*on clicking Save ---> calling the insert update function
             and check the Reference number already exists,if exists it displays alert message or  
             calls the insert update function*/
             $scope.RequirementAddEdit = function () {
                 if ($scope.Validationcontrols() == true) {
                     if ($scope.Reference_No != "") {
                         $http.get(baseUrl + '/api/RequirementMaster/Reference_number_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Reference_No=' + $scope.Reference_No).success(function (data) {

                             if (data == 1) {
                                 alert("Reference No. already exists, cannot duplicate");
                                 return Reference_No;
                             }
                             $scope.InsertUpdateRecruite();
                         }).error(function (data) {
                             $scope.error = "Problem in checking Reference duplicate!" + data.ExceptionMessage;
                         });
                     }
                     else {
                         $scope.InsertUpdateRecruite();
                     }


                 }

             };


             $scope.loading = false;
             /*Call the api method for inserting and Updating the record for a Resource
             and displays the record of selected Resource when Id is greater than 0
             in edit.html and provide an option for creating and modifying the Resource and save the Resource record*/
             $scope.InsertUpdateRecruite = function () {

                 var obj = {
                     Id: $scope.MasterId,
                     Reference_No: $scope.Reference_No == "" ? null : $scope.Reference_No,
                     Citizenship: $scope.Citizenship == 0 ? null : $scope.Citizenship,
                     Add_Citizenship: $scope.Add_Citizenship == 0 ? null : $scope.Add_Citizenship,
                     Year_of_Experience: $scope.Year_of_Experience,
                     Position: $scope.Position == 0 ? null : $scope.Position,
                     GenderName: $scope.GenderName == 0 ? null : $scope.GenderName,
                     No_Of_Position: $scope.No_Of_Position,
                     CTC_Range_From: $scope.CTC_Range_From,
                     CTC_Range_Upto: $scope.CTC_Range_Upto,
                     Joining_Days: $scope.Joining_Days,
                     Job_Description: $scope.Job_Description == "" ? null : $scope.Job_Description,
                     Common_Status_Id: $scope.Name == 0 ? null : $scope.Name,
                     Remarks: $scope.Remarks == "" ? null : $scope.Remarks
                 }

                 $scope.loading = true;
                 $timeout(function () {
                     if ($scope.loading == true) {
                         $rootScope.$broadcast('show');
                     }
                 }, 3000); // 3 second


                 $http.post(baseUrl + '/api/RequirementMaster/Requirement_Details_AddEdit/', obj).success(function (data) {
                     $scope.Requirement_Id = data;
                     $scope.MasterId = data;
                     angular.forEach($scope.AddQualification, function (value, index) {
                         value.Requirement_Id = $scope.Requirement_Id
                     });
                     $http.post(baseUrl + '/api/RequirementMaster/Qualification_AddEdit/', $scope.AddQualification).success(function (data) {
                         angular.forEach($scope.AddTechnical_Skill, function (value, index) {
                             value.Requirement_Id = $scope.Requirement_Id
                         });
                         $http.post(baseUrl + '/api/RequirementMaster/Techinical_AddEdit/', $scope.AddTechnical_Skill).success(function (data) {
                             angular.forEach($scope.AddTools, function (value, index) {
                                 value.Requirement_Id = $scope.Requirement_Id
                             });
                             $http.post(baseUrl + '/api/RequirementMaster/Tools_AddEdit/', $scope.AddTools).success(function (data) {
                                 window.location.href = baseUrl + "/Home/Index#/JobRequirementList/1/" + $scope.MasterId + "/1";


                             }).error(function (data) {
                                 $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                             });
                         }).error(function (data) {
                             $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                         });
                     }).error(function (data) {
                         $scope.error = "An error has occurred while adding " + data.ExceptionMessage;
                     });

                     $scope.loading = false;
                     $rootScope.$broadcast('hide');

                 }).error(function (data) {
                     $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                 });
             }


             //on clicking ---> active tool tip ---> list page calling delete function// 
             $scope.DeleteRequirement = function (reqId) {
                 $scope.Id = reqId;
                 $scope.Requirement_Delete();
             };

             /* 
             Calling the api method to detele the details of the Resource 
             matching the specified Resource Id,
             and redirected to the list page.
             */
             $scope.Requirement_Delete = function () {
                 var del = confirm("Do you like to inactivate the selected requirement details?");
                 if (del == true) {
                     $http.get(baseUrl + '/api/RequirementMaster/RequirementDetails_Delete/?Id=' + $scope.Id).success(function (data) {
                         alert("Selected requirement details has been inactivated successfully");
                         $scope.RequirementListGo();
                     }).error(function (data) {
                         $scope.error = "AN error has occured while deleting records" + data;
                     });
                 };
             };

             /* 
             Calling the api method to activate the details of the Resource 
             matching the specified Resource Id,
             and redirected to the list page.
             */
             $scope.ReInsertRequirementDetails = function () {
                 var Ins = confirm("Do you like to activate the selected requirement details?");
                 if (Ins == true) {
                     $http.get(baseUrl + 'api/RequirementMaster/RequirementDetails_ReInsert/?Id=' + $scope.Id).success(function (data) {
                         alert("Selected requirement details has been activated successfully");
                         $scope.RequirementListSearch($scope.Id = 0);
                         // $scope.CompanyBranchMaster_ListSearch();
                         //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                     }).error(function (data) {
                         $scope.error = "An error has occurred while reinserting requirement detail" + data;
                     });
                 };
             }

             //on clicking Active tool tip ----> calls Reinsert function//
             $scope.ReInsertRequirement = function (ReqId) {
                 $scope.Id = ReqId;
                 $scope.ReInsertRequirementDetails();
             };

             /*This is to view/Edit page redirect function */
             $scope.ViewRedirect = function () {

                 $location.path("/JobRequirementEdit/" + $scope.MasterId);
             }


             /* $scope.ListRedirect = function () {
  
                 if ($scope.listPage == 1 && $scope.MasterId == 0) {
                      window.location.href = baseUrl + "/Home/Index#/JobRequirementList/1/0/0";
                      $scope.RequirementListGo();
                  }
                  else if ($scope.MasterId > 0) {
                      //window.location.href = baseUrl + "/Home/Index#/JobRequirementList/1/1/1";
                      window.location.href = baseUrl + "/Home/Index#/JobRequirementList/" + $scope.Mode + "/0/1";
                      $scope.RequirementListGo();
                  }
                  else {
                      window.location.href = baseUrl + "/Home/Index#/JobRequirementList/2/0/1";
                      //$scope.RequirementListGo();
                  }
              };*/

             /*This is for List page Redirect function*/
             $scope.RequirementListRedirect = function () {
                 $location.path("/JobRequirementList/1/0/1");
                 $scope.RequirementListGo();

             };

             /*This is to List page Redirect function*/
             $scope.ListRedirect = function () {

                 //if (!($location.path("/JobRequirementEdit/Id"))) {
                 //    alert("oo");
                 if ($scope.Mode == 2) {
                     $location.path("/JobRequirementList/2/0/0");
                 }
                 else {
                     $location.path("/JobRequirementList/1/0/1");
                     $scope.RequirementListGo();
                 }


             };

             /*Calling api method to delete selected Tools Details for the resource */
             $scope.RequirementTools_Delete = function () {
                 $http.get(baseUrl + '/api/RequirementMaster/Tools_Delete/?Id=' + $scope.ToolId).success(function (Historydata) {
                 }).error(function (Historydata) {
                     $scope.error = "AN error has occured while deleting records" + Historydata;
                 });

             };

             /*Calling api method to delete selected Technical skill details for the resource*/
             $scope.RequirementSkills_Delete = function () {
                 $http.get(baseUrl + '/api/RequirementMaster/Skills_Delete/?Id=' + $scope.SkillId).success(function (Vitaldata) {
                 }).error(function (Vitaldata) {
                     $scope.error = "AN error has occured while deleting records" + Vitaldata;
                 });
             };

             /*Calling api method to delete selected Qualification details for the resource*/
             $scope.RequirementQualification_Delete = function () {
                 $http.get(baseUrl + '/api/RequirementMaster/Qualification_Delete/?Id=' + $scope.QuaId).success(function (Generaldata) {
                 }).error(function (Generaldata) {
                     $scope.error = "AN error has occured while deleting records" + Generaldata;
                 });

             };

             // This is for clear function //
             $scope.ResetRequirementdetails = function () {

                 $scope.Reference_No = "";
                 $scope.Citizenship = "0";
                 $scope.Add_Citizenship = "0";
                 $scope.Year_of_Experience = "";
                 $scope.Position = "0";
                 $scope.GenderName = "0";
                 $scope.No_Of_Position = "";
                 $scope.CTC_Range_From = "";
                 $scope.CTC_Range_Upto = "";
                 $scope.Joining_Days = "";
                 $scope.Job_Description = "";
                 $scope.Name = "0";
                 $scope.getQualification.Course_Name = "0";
                 $scope.AddQualification = [];
                 $scope.AddTechnical_Skill = [];
                 $scope.AddTools = [];
                 //$scope.AddQualification = [[]
                 //$scope.AddTools = "";
                 //$scope.AddTechnical_Skill = "";
                 $scope.Remarks = "";
             }



             /*on clicking Remove in Qualification Filed its calling the Qualification delete funtion */
             $scope.RemoveQualification_Item = function () {
                 var Qualification_Item = [];
                 if ($scope.MasterId <= 0) {
                     //angular.forEach($scope.AddQualification, function (selectedQual) {

                     //    console.log(selectedQual);
                     //    if (!selectedQual.selectedQual) {
                     //        Qualification_Item.push(selectedQual);
                     //        $scope.RequirementQualification_Delete();
                     //    }
                     angular.forEach($scope.AddQualification, function (row) {
                         row.selectedQual = $scope.selectedQual;
                     });
                     $scope.AddQualification = Qualification_Item;

                     //});
                 }
                 else if ($scope.MasterId > 0) {
                     angular.forEach($scope.AddQualification, function (selectedQual, index) {
                         if (selectedQual.selectedQual) {
                             $scope.QuaId = selectedQual.Id;
                             $scope.RequirementQualification_Delete();
                             IsItemSelected = true;
                         }
                         if (!selectedQual.selectedQual) {
                             Qualification_Item.push(selectedQual);
                         }
                         $scope.AddQualification = Qualification_Item;
                     });
                 }
                 if (IsItemSelected == false) {
                     alert("Please select atleast one Qualification item to remove");
                 }
             };
             //This is Check box select function for Qualification//
             $scope.checkAllQualification = function () {
                 if (!$scope.selectedallQual) {
                     $scope.selectedallQual = true;
                 } else {
                     $scope.selectedallQual = false;
                 }
                 angular.forEach($scope.AddQualification, function (row) {
                     row.selectedQual = $scope.selectedallQual;
                 });
             };

             /*on click Remove in Technical skill Filed its calling the Technical skill delete funtion */
             $scope.RemoveSkill_Item = function () {
                 var Skill_Item = [];
                 if ($scope.MasterId <= 0) {
                     angular.forEach($scope.AddTechnical_Skill, function (row) {
                         row.selectedskill = $scope.selectedskill;
                     });
                     $scope.AddTechnical_Skill = Skill_Item;

                 }

                 else if ($scope.MasterId > 0) {
                     angular.forEach($scope.AddTechnical_Skill, function (selectedskill, index) {

                         if (selectedskill.selectedskill) {
                             $scope.SkillId = selectedskill.Id;
                             $scope.RequirementSkills_Delete();
                             IsItemSelected = true;
                         }
                         if (!selectedskill.selectedskill) {
                             Skill_Item.push(selectedskill);
                         }
                         $scope.AddTechnical_Skill = Skill_Item;

                     });
                 }
                 if (IsItemSelected == false) {
                     alert("Please select atleast one Technical skill item to remove");
                 }
             };
             //This is Check box select function for Technical skill //
             $scope.checkAllSkill = function () {
                 if (!$scope.selectedallskill) {
                     $scope.selectedallskill = true;
                 } else {
                     $scope.selectedallskill = false;
                 }
                 angular.forEach($scope.AddTechnical_Skill, function (row) {
                     row.selectedskill = $scope.selectedallskill;
                 });
             };

             /*on click Remove in Tools Filed its calling the Technical skill delete funtion */
             $scope.RemoveTools_Item = function () {
                 var Tools_Item = [];
                 if ($scope.MasterId <= 0) {

                     angular.forEach($scope.AddTools, function (row) {
                         row.selectedtool = $scope.selectedtool;
                     });
                     $scope.AddTools = Tools_Item;

                     //});
                 }
                 else if ($scope.MasterId > 0) {
                     angular.forEach($scope.AddTools, function (selectedtool, index) {

                         if (selectedtool.selectedtool) {
                             $scope.ToolId = selectedtool.Id;
                             $scope.RequirementTools_Delete();
                             IsItemSelected = true;
                         }
                         if (!selectedtool.selectedtool) {
                             Tools_Item.push(selectedtool);
                         }
                         $scope.AddTools = Tools_Item;

                     });

                 }

                 if (IsItemSelected == false) {
                     alert("Please select atleast one Tools item to remove");
                 }
             };
             //This is Check box select function for Technical skill //
             $scope.checkAllTools = function () {
                 if (!$scope.selectedalltool) {
                     $scope.selectedalltool = true;
                 } else {
                     $scope.selectedalltool = false;
                 }
                 angular.forEach($scope.AddTools, function (row) {
                     row.selectedtool = $scope.selectedalltool;
                 });
             };


             //Approval controller//
             /*Calling api method for list the Requirement approval 
             details in Requirement approval List page for the specified filters like 
             EmployeeId,PositionName,Gender_Name,Isactive,Status list */
             $scope.emptydata = [];
             $scope.rowCollection = [];
             $scope.flag = 0;


             $scope.RequirementListSearchapproval = function () {

                 $scope.loading = true;
                 $timeout(function () {
                     if ($scope.loading == true) {
                         $rootScope.$broadcast('show');
                     }
                 }, 3000); // 3 second

                 $http.get(baseUrl + '/api/Common/RequirementApprovalList/?&UserId=' + $scope.EmployeeId + '&Id=' + $scope.Id + '&Position_Id=' + $scope.PositionName + '&Gender_Id=' + $scope.Gender_Name + '&IsActive=' + $scope.IsActive + '&Status=' + $scope.Status_List).success(function (data) {
                     $scope.emptydata = [];
                     $scope.rowCollection = [];

                
                     $scope.rowCollection = data;
                     if ($scope.rowCollection.length > 0) {
                         $scope.flag = 1;
                     }
                     else {
                         $scope.flag = 0;
                     }

                     $scope.loading = false;
                     $rootScope.$broadcast('hide');
                 }).error(function (data) {
                     $scope.error = "AN error has occured while Listing the records!" + data;
                 })

             };

             //on click view tool tip calling the view function//
             $scope.ViewReqapproval = function (CatId) {
                 $scope.Id = CatId;
                 $scope.ViewRequirementApproval();
                 window.location.href = baseUrl + "/Home/Index#/JobRequirementApprovalView/" + $scope.Id;
             };


             /*Validating the Requirement approval view page Change status field not null check these 
             fields To status,Remarks*/
             $scope.changeStatusValidation = function () {
                 var retflag = true;
                 if (typeof ($scope.ToStatus) == "undefined" || $scope.ToStatus == 0) {
                     alert("Please select Change Status");
                     retflag = false;
                 }


                 angular.forEach($scope.WorkFlow_ChangeStatus, function (value, index) {
                     if ($scope.ToStatus == value.Id) {
                         // && (value.Status == 'Closed')) {

                         if (typeof ($scope.RemarksStatus) == "undefined" || $scope.RemarksStatus == "") {
                             alert("Please enter Remarks");
                             retflag = false;
                         }
                     }
                 });
                 return retflag;
             };


             /*Calling the api method for Update the To status for a Resource
             and display the record of selected Resource when Id is greater than 0
             in Requirementapprovalview.html and provide an option for modify the 
             Resource status and save the Resource record*/
             $scope.UpdateStatus = function () {

                 if ($scope.changeStatusValidation() == true) {
                     var obj = {
                         Id: $scope.AddId,
                         TransactionId: $scope.TransactionId,
                         PkId: $scope.RequirementId,
                         EmployeeId: $scope.EmployeeId,
                         StatusId: $scope.ToStatus,
                         Remarks: $scope.RemarksStatus
                     };


                     $scope.loading = true;
                     $timeout(function () {
                         if ($scope.loading == true) {
                             $rootScope.$broadcast('show');
                         }
                     }, 3000); // 3 second

                     $http.post(baseUrl + '/api/Common/StatusAudit_AddEdit/', obj).success(function (data) {
                         $scope.ClearRequirementApprovalPopup();
                         window.location.href = baseUrl + "/Home/Index#/JobRequirementApproval/2/0/0";

                         $scope.loading = false;
                         $rootScope.$broadcast('hide');

                     }).error(function (data) {
                         $scope.error = "An error has occurred while adding Leave Request Details!" + data.ExceptionMessage;
                     });

                 }
             }

             //This is for clear fuction//
             $scope.ClearRequirementApprovalPopup = function (){
                 $scope.Name = "0";
                 $scope.Remarks = "";
                 $scope.flagstatus = false;
             };
         }
    ]);

    EmpControllers.controller("CandidateController", ['$scope', '$http', '$filter', '$routeParams', '$location', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $filter, $routeParams, $location, $ff, $rootScope, $timeout) {



            $scope.Qualification_Id = "0";
            $scope.Course_Name = "0";
            /* Validating the Candidate create page mandatory fields not null and check duplication entry 
              check these fields for mandatory Reference_No,Candidate_Name,Email, Position, years of experience, 
              Applied date,Tecnical skill, Current job status, and candidate resume when it is null showing alert message please select/enter details 
              for specified field
              Check  duplication entries for Technical skill, Qualification, Tools and 
              showing alert message when it is already exist
              Check date format validation for joining date, Passport expiry date, visa date
              check Email format validation for Candidate Email ID
              */
            $scope.Validationcontrols = function () {

                var TSDuplicate = 0;
                var DuplicateSkills = '';
                angular.forEach($scope.AddTechnical_Skill, function (value1, index1) {
                    angular.forEach($scope.AddTechnical_Skill, function (value2, index2) {

                        if (index1 > index2 && value1.Tec_Skill_Id == value2.Tec_Skill_Id) {
                            TSDuplicate = 1;
                            DuplicateSkills = DuplicateSkills + $scope.GetSkillName(value2.Tec_Skill_Id) + ',';

                        };

                        if (index1 != null && value2.Tec_Skill_Id == null && $scope.AddTechnical_Skill.length > 1) {
                            alert("Please select Technical Skills");
                            return Tec_Skill_Id;

                        }

                    });
                });


                var GCDuplicate = 0;
                var DuplicateQualification = '';
                angular.forEach($scope.AddQualification, function (value1, index1) {
                    angular.forEach($scope.AddQualification, function (value2, index2) {

                        if (index1 > index2 && value1.Qualification_Id == value2.Qualification_Id) {
                            GCDuplicate = 1;
                            DuplicateQualification = DuplicateQualification + $scope.GetQualificationName(value2.Qualification_Id) + ',';
                        }

                        if (index1 != null && value2.Qualification_Id == null && $scope.AddQualification.length > 1) {
                            alert("Please select Qualification");
                            return Qualification_Id;

                        }
                    });
                });

                // $scope.validationarray = function () {
                var GCDuplicates = 0;

                //angular.forEach($scope.AddQualification, function (value1, index1) {
                //    angular.forEach($scope.AddQualification, function (value2, index2) {

                //        if (index1 != null && value2.Qualification_Id == null && $scope.AddQualification.length > 1) {
                //           // alert("Please select the qualification");
                //            GCDuplicates = 1;                           
                //        }
                //    });
                //});
                // };

                var TooleDuplicate = 0;
                var DuplicateTools = '';
                angular.forEach($scope.AddTools, function (value1, index1) {
                    angular.forEach($scope.AddTools, function (value2, index2) {

                        if (index1 > index2 && value1.Tools_Id == value2.Tools_Id) {
                            TooleDuplicate = 1;
                            DuplicateTools = DuplicateTools + $scope.GetToolName(value2.Tools_Id) + ',';
                        }

                        if (index1 != null && value2.Tools_Id == null && $scope.AddTools.length > 1) {
                            alert("Please select Tools");
                            return Tools_Id;

                        }

                    });
                });



                var LanguageDuplicate = 0;
                var DuplicateLanguage = '';
                angular.forEach($scope.AddLanguage, function (value1, index1) {
                    angular.forEach($scope.AddLanguage, function (value2, index2) {

                        if (index1 > index2 && value1.Language_Id == value2.Language_Id) {
                            LanguageDuplicate = 1;
                            DuplicateLanguage = DuplicateLanguage + $scope.GetLanguageName(value2.Language_Id) + ',';
                        }

                        if (index1 != null && value2.Language_Id == null && $scope.AddLanguage.length > 1) {
                            alert("Please select Languages");
                            return Tools_Id;

                        }

                    });
                });


                var TSitem = 0;
                angular.forEach($scope.AddTechnical_Skill, function (value, index) {

                    if (value.Tec_Skill_Id > 0) {
                        TSitem = 1;
                    }
                });

                var from = 0;
                angular.forEach($scope.AddPrevious, function (value, index) {


                    if ((ParseDate(value.Start_Date)) > (ParseDate(value.End_Date))) {
                        from = 1;
                    }
                });


                startdate = 0;
                angular.forEach($scope.AddPrevious, function (value, index) {

                    if (isDate(value.Start_Date) == false) {

                        startdate = 1;
                    }
                });

                enddate = 0;
                angular.forEach($scope.AddPrevious, function (value, index) {

                    if (isDate(value.End_Date) == false) {
                        enddate = 1;
                    }
                });
                if (($scope.AddPrevious.length) != null) {
                    if (startdate == 1) {
                        alert("Start date is invalid date format, please enter dd-mm-yy");
                        return false
                    }
                };

                if (($scope.AddPrevious.length) != null) {
                    if (enddate == 1) {
                        alert("End date is invalid date format, please enter dd-mm-yy");
                        return false
                    }
                };

                if (($scope.AddPrevious.length) != null) {

                    if (from == 1) {

                        alert("Please enter Start date is greater than End date");
                        return false;
                    }
                }

                if (typeof ($scope.Reference_No) == "undefined" || $scope.Reference_No == "") {
                    alert("Please enter Reference No.");
                    return false;
                }
                else if (typeof ($scope.Candidate_Name) == "undefined" || $scope.Candidate_Name == "") {
                    alert("Please enter Candidate Name");
                    return false;
                }
                else if (typeof ($scope.Email) == "undefined" || $scope.Email == "") {
                    alert("Please enter Email");
                    return false;
                }
                else if (($scope.Citizenship == $scope.Add_Citizenship) && ($scope.Citizenship != 0 && $scope.Add_Citizenship != 0)) {
                    alert("Citizenship and Additional Citizenship should not be same");
                    return false;
                }

                else if (typeof ($scope.Position) == "undefined" || $scope.Position == 0) {
                    alert("Please select Position applied for");
                    return false;
                }
                else if (typeof ($scope.Year_of_Experience) == "undefined" || $scope.Year_of_Experience == "") {
                    alert("Please enter Experience");
                    return false;
                }
            

                if ($scope.Year_of_RelevantExperience > $scope.Year_of_Experience) {
                    alert("Relevant Experience should not be greater than Total Experience");
                    return false;
                }

                else if (($scope.Year_of_RelevantExperience == $scope.Year_of_Experience) && ($scope.Month_Of_RelevantExperience > $scope.Month_Of_Experience)) {
                    alert("Relevant Experience should not be greater than Total Experience");
                    return false;
                }
         
                else if (typeof ($scope.Applied_Date) == "undefined" || $scope.Applied_Date == 0) {
                    alert("Please select Applied Date");
                    return false;
                }
                else if ($scope.AddTechnical_Skill.length < 1 || TSitem == 0) {
                    alert("Please enter Technical Skill");
                    return false;
                }


                else if (typeof ($scope.Current_Job_Status) == "undefined" || $scope.Current_Job_Status == 0) {
                    alert("Please select Current Job Status");
                    return false;
                }

                else if (typeof ($scope.ResumeFileName) == "undefined" || $scope.ResumeFileName == '') {
                    alert("Please Upload Resume");
                    return false;
                }



                else if (GCDuplicate == 1) {
                    alert('Qualification ' + DuplicateQualification.substring(0, DuplicateQualification.length - 1) + ' already exists');
                    //alert("Qualification already exists cannot duplicate");
                    return false;
                }
                else if (GCDuplicates == 2) {
                    alert("Please select the qualification");
                    return false;
                }
                else if (TSDuplicate == 1) {
                    alert('Technical Skills ' + DuplicateSkills.substring(0, DuplicateSkills.length - 1) + ' already exists');
                    //alert("Technical Skills already exists cannot duplicate");
                    return false;
                }
                else if (TooleDuplicate == 1) {
                    alert('Tools ' + DuplicateTools.substring(0, DuplicateTools.length - 1) + ' already exists');
                    //alert("Tools already exists cannot duplicate");
                    return false;
                }
                else if (LanguageDuplicate == 1) {
                    alert('Languages ' + DuplicateLanguage.substring(0, DuplicateLanguage.length - 1) + ' already exists');
                    //alert("Tools already exists cannot duplicate");
                    return false;
                }

                else if (isDate($scope.Applied_Date) == false) {
                    alert("Applied Date is invalid date format, please enter dd-mm-yy");
                    return false;
                }
                else if (isDate($scope.No_of_Days_joining) == false) {
                    alert("Joining Date is invalid date format, please enter dd-mm-yy");
                    return false;
                }
                else if (isDate($scope.Passport_Expiry_Date) == false) {
                    alert("Passport Expiry Date is invalid date format, please enter dd-mm-yy");
                    return false;
                }
                else if (isDate($scope.Visa_Expiry_Date) == false) {
                    alert("Visa Expiry Date is invalid date format, please enter dd-mm-yy");
                    return false;
                }
                else if (EmailFormate($scope.Email) == false) {
                    alert("Invalid email format");
                    return false;
                }
                else if ($scope.Month_Of_Experience >= 12) {
                    alert("Experience Months limit should not exceed the months limit");
                    return false;
                }
                else if ($scope.Month_Of_RelevantExperience >= 12) {
                    alert("Relevant Experience Months limit should not exceed the months limit");
                    return false;
                }
                else if (ParseDate($scope.No_of_Days_joining) < ParseDate($scope.Applied_Date)) {
                    alert("Applied Date should not be greater than Joining Date");
                    return false;
                }

                return true;


            };

            /*Validating the list page filters fields
            Check Email format for Candidate Email field filter when it is not correct format 
            it showing alert message for enter correct email format*/
            $scope.ListValidationcontrols = function () {
                if (EmailFormate($scope.Candidate_Email) == false) {
                    alert("Invalid email format");
                    return false;
                }
                return true;
            };


            //This is for Address Copy function//
            $scope.statusfunction = function () {
                if ($scope.Different_Address1) {
                    //$scope.flagstatus = 1;
                    $scope.PresentHouse_No = $scope.PermanentHouse_No,
                    $scope.PresentStreetName1 = $scope.PermanentStreetName1,
                    $scope.PresentStreetName2 = $scope.PermanentStreetName2,
                    $scope.PresentStreetName3 = $scope.PermanentStreetName3,
                    $scope.Present_Attn_CO = $scope.Permanent_Attn_CO,
                    $scope.PresentCityName = $scope.PermanentCityName,
                    $scope.PresentStateName = $scope.PermanentStateName,
                    $scope.PresentCountryName = $scope.PermanentCountryName,
                    $scope.PresentPinCode = $scope.PermanentPinCode
                }
                if ($scope.Different_Address1 == false) {
                    $scope.PresentHouse_No = "",
                    $scope.ViewPresentCountryName = "",
                    $scope.PresentStreetName1 = "",
                    $scope.ViewPresentStateName = "",
                    $scope.PresentStreetName2 = "",
                    $scope.ViewPresentCityName = "",
                    $scope.PresentStreetName3 = "",
                    $scope.PresentPinCode = "",
                    $scope.Present_Attn_CO = "",
                    $scope.PresentCityName = "0",
                    $scope.PresentStateName = "0",
                    $scope.PresentCountryName = "0"
                    return false;
                }
            };
            //This is for Address Copy function//
            $scope.status3function = function () {
                if ($scope.Different_Address2) {
                    // $scope.flagstatuspermanent = 1;
                    $scope.CommunicationHouse_No = $scope.PermanentHouse_No,
                    $scope.CommunicationStreetName1 = $scope.PermanentStreetName1,
                    $scope.CommunicationStreetName2 = $scope.PermanentStreetName2,
                    $scope.CommunicationStreetName3 = $scope.PermanentStreetName3,
                    $scope.Communication_Attn_CO = $scope.Permanent_Attn_CO,
                    $scope.CommunicationCountryName = $scope.PermanentCountryName,
                    $scope.CommunicationPinCode = $scope.PermanentPinCode
                    $scope.CommunicationCityName = $scope.PermanentCityName,
                    $scope.CommunicationStateName = $scope.PermanentStateName
                }
                if ($scope.Different_Address2 == false) {
                    $scope.CommunicationHouse_No = "",
                    $scope.ViewCommunicationCountryName = "",
                    $scope.CommunicationStreetName1 = "",
                    $scope.ViewCommunicationStateName = "",
                    $scope.CommunicationStreetName2 = "",
                    $scope.ViewCommunicationCityName = "",
                    $scope.CommunicationStreetName3 = "",
                    $scope.CommunicationPinCode = "",
                    $scope.Communication_Attn_CO = "",
                    $scope.CommunicationCityName = "0",
                    $scope.CommunicationStateName = "0",
                    $scope.CommunicationCountryName = "0"
                    return false;
                }
            };

            //This is for Address Copy function//
            $scope.status4function = function () {
                if ($scope.Different_Address3) {
                    // $scope.flagstatuspermanent = 1;
                    $scope.CommunicationHouse_No = $scope.PresentHouse_No,
                    $scope.CommunicationStreetName1 = $scope.PresentStreetName1,
                    $scope.CommunicationStreetName2 = $scope.PresentStreetName2,
                    $scope.CommunicationStreetName3 = $scope.PresentStreetName3,
                    $scope.Communication_Attn_CO = $scope.Present_Attn_CO,
                    $scope.CommunicationCountryName = $scope.PresentCountryName,
                    $scope.CommunicationPinCode = $scope.PresentPinCode,
                    $scope.CommunicationCityName = $scope.PresentCityName,
                    $scope.CommunicationStateName = $scope.PresentStateName

                }
                if ($scope.Different_Address3 == false) {
                    $scope.CommunicationHouse_No = "",
                    $scope.ViewCommunicationCountryName = "",
                    $scope.CommunicationStreetName1 = "",
                    $scope.ViewCommunicationStateName = "",
                    $scope.CommunicationStreetName2 = "",
                    $scope.ViewCommunicationCityName = "",
                    $scope.CommunicationStreetName3 = "",
                    $scope.CommunicationPinCode = "",
                    $scope.Communication_Attn_CO = "",
                    $scope.CommunicationCityName = "0",
                    $scope.CommunicationStateName = "0",
                    $scope.CommunicationCountryName = "0"
                    return false;
                }
            };

            /*calling clear function */
            $scope.ClearPresentListfunction = function () {
                $scope.PresentState = "0";
                $scope.PresentStateName = "0";
                $scope.PresentCity = "0";
                $scope.PresentCityName = "0";
            };
            /*calling clear function */
            $scope.ClearPresentstatefunction = function () {
                $scope.PresentCity = "0";
                $scope.PresentCityName = "0";
            };

            $scope.ClearPremenentListfunction = function () {
                //  $scope.PermanentState = "0";
                $scope.PermanentStateName = "0";
                //  $scope.PermanentCity = "0";
                $scope.PermanentCityName = "0";
            };

            /*calling clear function */
            $scope.ClearPremenentstatefunction = function () {
                //   $scope.PermanentCity = "0";
                $scope.PermanentCityName = "0";
            };


            $scope.ClearCommunicationListfunction = function () {
                //   $scope.CommunicationState = "0";
                $scope.CommunicationStateName = "0";
                //    $scope.CommunicationCity = "0";
                $scope.CommunicationCityName = "0";
            };
            /*calling clear function */
            $scope.ClearCommunicationstatefunction = function () {
                $scope.CommunicationCity = "0";
                $scope.CommunicationCityName = "0";
            };



            // Declaration and initialization of Scope Variables.
            $scope.MasterId = 0;
            $scope.AddQualification = [];
            $scope.AddTechnical_Skill = [];
            $scope.AddTools = [];
            $scope.Previous = [];
            $scope.AddPrevious = [];
            $scope.AddLanguage=[];
            $scope.AddLanguage.Proficiency_Id_List=[];
            $scope.QualificationRow = -1;
            $scope.SkillRow = -1;
            $scope.ToolsRow = -1;
            $scope.PreviousRow = -1;
            $scope.LanguageRow = -1;

            $scope.Citizenship = "0";
            $scope.Add_Citizenship = "0";
            $scope.Current_CTC = "0";
            $scope.Expected_CTC = "0";
            $scope.NoticePeriod = "";
            $scope.CourseName = "0";
            $scope.TechnicalSkill = "0";
            $scope.ToolsName = "0";
            $scope.GenderName = "0";
            $scope.Position = "0";
            $scope.CandidateName = "0";
            $scope.GenderName = "0";
            $scope.Marital_status_Name = "0";
            $scope.Current_Job_Status = "0";
            $scope.Location_Preference = "0";
            $scope.Already_serving_notice_period = "0";
            // $scope.IsActive = 1;
            $scope.IsActive = "1";
            $scope.Reference_No = '';
            $scope.Resume = "";
            $scope.uploadme = "";
            $scope.FileName = "";
            $scope.Photo = "";
            $scope.PhotoFullpath = "";
            $scope.PermanentCityName = "0";
            $scope.PermanentStateName = "0";
            $scope.PermanentCountryName = "0";
            $scope.PresentCityName = "0";
            $scope.PresentStateName = "0";
            $scope.PresentCountryName = "0";
            $scope.CommunicationCityName = "0";
            $scope.CommunicationStateName = "0";
            $scope.CommunicationCountryName = "0";
            $scope.LanguageName="0";
            $scope.ProficiencyName="0";


            var Tec_Id = 0;
            $scope.Mode = $routeParams.Mode;
            var DuplicateSkills = '';

            //This is for List page Pagination 
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }
            // $scope.Already_serving_notice_period = "";


            /* 
             Calling api method for populate dropdown list in the add/edit html page for the following fields 
             Gender,Designation,Citizenship,Current job Status,Citizenship,Qualification,Technical skill,Tools 
             */
            $scope.getGender = [];
            $scope.getGenderNameList = [];
            $http.get(baseUrl + '/api/CandidateResume/GetGenderList/').success(function (data) {

                // all Gender records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.getGender = data;
                // only active Gender
                $scope.getGenderNameList = $ff(data, { IsActive: 1 });

            });


            $scope.DesignationFilterList = [];
            $scope.DesignationList = [];
            $http.get(baseUrl + 'api/CandidateResume/GetDesignationList/').success(function (data) {

                // all Designation records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DesignationFilterList = data;
                // only active Designation
                $scope.DesignationList = $ff(data, { IsActive: 1 });
            });

            $scope.getCitizenship = [];
            $scope.getCitizenshipList = [];
            $http.get(baseUrl + '/api/CandidateResume/GetCitizenshipList/').success(function (data) {

                // all Citizenship records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.getCitizenship = data;
                // only active Citizenship
                $scope.getCitizenshipList = $ff(data, { Active: 1 });

            });

            $scope.StatusList = [];
            $scope.StatusNameList = [];
            $http.get(baseUrl + 'api/CandidateResume/GetStatus/').success(function (data) {
                // all current job Status records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.StatusList = data;
                // only active company
                $scope.StatusNameList = $ff(data, { Active: 1 });
            });


            $scope.MaritalStatusList = [];
            $scope.MaritalStatusNameList = [];
            $http.get(baseUrl + 'api/CandidateResume/GetMaritalStatus/').success(function (data) {

                // all Marital status records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.MaritalStatusList = data;
                // only active Marital status
                $scope.MaritalStatusNameList = $ff(data, { Active: 1 });
            });

            //$http.get(baseUrl + 'api/Common/GetLocationByState/').success(function (data) {
            //    $scope.LocationName = data;
            //});


            $scope.CandidateNameList = [];
            $scope.CandidateNamefilterList = [];
            $scope.CandidateNamelist = function () {
                if ($scope.CandidateNameList != undefined) {  // to avoid going to DB each time when Search clicked
                    $scope.CandidateNameList = [];
                    $scope.CandidateNamefilterList = [];
                    $http.get(baseUrl + 'api/CandidateResume/GetCandidate_Name/').success(function (data) {
                        $scope.CandidateNameList = data;
                        $scope.CandidateNamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            };

            $http.get(baseUrl + 'api/CandidateResume/GetCandidate_Name/').success(function (data) {
                $scope.CandidateNameList = data;
                // console.log($scope.CandidateNameList);
                $scope.CandidateNamefilterList = $ff(data, { IsActive: 1 });

            });


            $scope.LocationName = [];
            $scope.LocationFilterList = [];
            $http.get('/api/Common/GetLocationList/').success(function (data) {

                // all Location records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.LocationFilterList = data;
                // only active Location
                $scope.LocationNameList = $ff(data, { Active: 1 });
            });


            $scope.CountryNameFilterList = [];
            $scope.CountryList = [];
            $scope.CountryNameList = [];
            //$scope.CountryList = [];
            //$scope.CountryNameList = [];
            $scope.ResidenceCountryInactiveFlag = [];
            // $scope.Aadharcountry_name = [];
            $http.get(baseUrl + 'api/Common/CountryList/').success(function (data) {

                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CountryList = data;
                // only active company
                $scope.CountryNameList = $ff(data, { IsActive: 1 });
                //$scope.Aadharcountry_name = data;
                // console.log($scope.Aadharcountry_name);
            });

            $scope.StateNameFilterList = [];
            $scope.StateList = [];
            $scope.StateNameList = [];
            $http.get(baseUrl + 'api/Common/StateList/').success(function (data) {

                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.StateList = data;
                // only active company
                $scope.StateNameList = $ff(data, { IsActive: 1 });
            });

            $scope.LocationNameFilterList = [];
            $scope.CityList = [];
            $scope.CityNameList = [];
            $http.get(baseUrl + 'api/Common/GetLocationList/').success(function (data) {

                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CityList = data;
                // only active company
                $scope.CityNameList = $ff(data, { Active: 1 });
            });


            /* Calling api method for populate the Qualification dropdown list in add/edit html pages */
            // $scope.getQualification = [];
            $scope.getQualificationList = [];
            $http.get(baseUrl + '/api/CandidateResume/GetQualificationList/').success(function (data) {

                // all Qualification records list including active and inactive 
                $scope.getQualification = data;
                // only active company
                //$scope.getQualificationList = $ff(data, { Active: 1 });

            });
            $scope.GetQualificationName = function (qualification) {
                var qualificationId = qualification;
                var qualification_Name = "";
                var qualification_Name = $.grep($scope.getQualification, function (qualification) {
                    return qualification.Id == qualificationId;
                })[0].Course_Name;

                return qualification_Name;
                //            console.log(qualification_Name);
            }


            /* Calling api method for populate the Technical skill dropdown list in add/edit html pages */
            $http.get(baseUrl + '/api/CandidateResume/GetSkillsList/').success(function (data) {

                // all Technical skill records list including active and inactive 
                $scope.getSkill = data;
                // only active company
                // $scope.SkillNameList = $ff(data, { Active: 1 });
            });

            $scope.GetSkillName = function (skill) {
                var skillId = skill;
                var skill_Name = "";
                skill_Name = $.grep($scope.getSkill, function (skill) {
                    return skill.Id == skillId;
                })[0].Technical_Skill;

                return skill_Name;
            }


            /* Calling api method for populate the Tools dropdown list in add/edit html pages */
            $http.get(baseUrl + '/api/CandidateResume/GetToolsList/').success(function (data) {

                // all company records list including active and inactive 
                $scope.getTool = data;
         
                // only active company
                //$scope.ToolNameList = $ff(data, { Active: 1 });

            });
            $scope.GetToolName = function (tool) {
                var toolId = tool;
                var tool_Name = "";
                if (tool > 0) {
                    tool_Name = $.grep($scope.getTool, function (tool) {
                        return tool.Id == toolId;
                    })[0].Tools_Name;
                }
                return tool_Name;
            
            }

            /*calling Alert message for cannot edit inactive record function */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            /* Calling api method for populate the Language dropdown list in add/edit html pages */
            $http.get(baseUrl + '/api/CandidateResume/GetLanguageList/').success(function (data) {

                // all company records list including active and inactive 
                $scope.getLanguage = data;
                //console.log($scope.getLanguage);

            });


            $scope.GetLanguageName = function (Language) {
                var Language_Id = Language;
                var LanguageName = "";
                if (Language > 0) {
                    LanguageName = $.grep($scope.getLanguage, function (Language) {
                        return Language.Id == Language_Id;
                    })[0].LanguageName;
                }
                return LanguageName;            
        
            }

            /* Calling api method for populate the LanguageProficiency dropdown list in add/edit html pages */
            $http.get(baseUrl + '/api/CandidateResume/GetLanguageProficiencyList/').success(function (data) {

                // all company records list including active and inactive 
                $scope.getProficiency = data;            
            });




            /* THIS IS FOR VIEW PROCEDURE */

            /*
            Calling the api method to view the details of the Candidate 
            it matching the specified Candidate Id 
            and display the details in the view Page.
            */
            $scope.Prevflag = 0;
            $scope.ViewCandidate = function () {

                if ($routeParams.Id != undefined && $routeParams.Id > 0) {

                    $scope.Id = $routeParams.Id;

                    $scope.MasterId = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                    $scope.DuplicatsId = $routeParams.Id;

                    $scope.DuplicatemobileId = $routeParams.Id;

                    $http.get(baseUrl + '/api/CandidateResume/CandidateMaster_Details_View/?Id=' + $scope.Id).success(function (data) {
                        $scope.Id = data.Id;
                        $scope.DuplicateId = data.Id;
                        $scope.DuplicatsId = data.Id;
                        $scope.DuplicatemobileId = data.Id;
                        $scope.Reference_No = data.Reference_No;
                        $scope.Candidate_Name = data.Candidate_Name,
                        $scope.GenderName = data.Gender_Id.toString();
                        $scope.ViewGenderName = data.GenderName;
                        $scope.Phone_Home = data.Phone_Home;
                        $scope.Mobile_No = data.Mobile_No;
                        $scope.Email = data.Email;
                        $scope.Address = data.Address;
                        $scope.Location_Preference = data.Location_Preference_Id.toString();
                        $scope.ViewLocation_Preference = data.Location_Preference;
                        $scope.Photo = data.Photo;
                        $scope.uploadme = data.Photo;
                        $scope.Citizenship = data.Citizenship_Id.toString();
                        $scope.ViewCitizenship = data.Citizenship;
                        $scope.Add_Citizenship = data.AddCitizenship_Id.toString();
                        $scope.ViewAdd_Citizenship = data.Add_Citizenship;
                        $scope.Current_CTC = data.Current_CTC;
                        $scope.Expected_CTC = data.Expected_CTC;
                        $scope.NoticePeriod = data.NoticePeriod;
                        $scope.Year_of_Experience = data.Year_of_Experience;
                        $scope.Month_Of_Experience = data.Month_Of_Experience;
                        $scope.Year_of_RelevantExperience = data.Year_of_RelevantExperience;
                        $scope.Month_Of_RelevantExperience = data.Month_Of_RelevantExperience;
                        $scope.Position = data.Position_Id.toString();
                        $scope.ViewPosition = data.Position;
                        $scope.Current_Job_Status = data.Current_Job_Status_Id.toString();
                        $scope.ViewCurrent_Job_Status = data.Current_Job_Status;
                        $scope.Applied_Date = $filter('date')(data.Applied_Date, "dd-MMM-yyyy");
                        $scope.Alreadyservice(data.Already_serving_notice_period);
                        $scope.Already_serving_notice_period = data.Already_serving_notice_period.toString();
                        $scope.No_of_Days_joining = $filter('date')(data.No_of_Days_joining, "dd-MMM-yyyy");
                        $scope.Social_Network_Link = data.Social_Network_Link;
                        $scope.Reference_Person_Name = data.Reference_Person_Name;
                        $scope.Reference_Person_Mobile = data.Reference_Person_Mobile;
                        $scope.Marital_status_Name = data.Marital_status_Id.toString();
                        $scope.ViewMarital_status_Name = data.Marital_status_Name;
                        $scope.Reason_for_Leaving_Current_Job = data.Reason_for_Leaving_Current_Job;
                        $scope.Reason_for_Join_Current_Job = data.Reason_for_Join_Current_Job;
                        $scope.Passport_Number = data.Passport_Number;
                        $scope.Passport_Expiry_Date = $filter('date')(data.Passport_Expiry_Date, "dd-MMM-yyyy");
                        $scope.Visa_Availability_No = data.Visa_Availability_No;
                        $scope.Visa_Expiry_Date = $filter('date')(data.Visa_Expiry_Date, "dd-MMM-yyyy");
                        $scope.Driving_License = data.Driving_License;
                        $scope.Resume = data.Resume;
                        $scope.PhotoFullpath = data.PhotoFullpath;
                        //$scope.FileName == "" ? "" : data.FileName;
                        $scope.FileName = data.FileName;
                        $scope.ResumeFileName = data.ResumeFileName;
                        $scope.ResumeFullpath = data.ResumeFullpath;



                        $scope.PermanentHouse_No = data.PermanentHouse_No;
                        $scope.PermanentStreetName1 = data.PermanentStreetName1;
                        $scope.PermanentStreetName2 = data.PermanentStreetName2;
                        $scope.PermanentStreetName3 = data.PermanentStreetName3;
                        $scope.Permanent_Attn_CO = data.Permanent_Attn_CO;
                        $scope.PermanentCityName = data.PermanentCity.toString();
                        $scope.ViewPermanentCityName = data.PermanentCityName;
                        $scope.PermanentStateName = data.PermanentState.toString();
                        $scope.ViewPermanentStateName = data.PermanentStateName;
                        $scope.PermanentCountryName = data.PermanentCountry.toString();
                        $scope.ViewPermanentCountryName = data.PermanentCountryName;
                        $scope.PermanentPinCode = data.PermanentPinCode;



                        $scope.PresentHouse_No = data.PresentHouse_No;
                        $scope.PresentStreetName1 = data.PresentStreetName1;
                        $scope.PresentStreetName2 = data.PresentStreetName2;
                        $scope.PresentStreetName3 = data.PresentStreetName3;
                        $scope.Present_Attn_CO = data.Present_Attn_CO;
                        $scope.PresentCityName = data.PresentCity.toString();
                        $scope.ViewPresentCityName = data.PresentCityName;
                        $scope.PresentStateName = data.PresentState.toString();
                        $scope.ViewPresentStateName = data.PresentStateName;
                        $scope.PresentCountryName = data.PresentCountry.toString();
                        $scope.ViewPresentCountryName = data.PresentCountryName;
                        $scope.PresentPinCode = data.PresentPinCode;



                        $scope.CommunicationHouse_No = data.CommunicationHouse_No;
                        $scope.CommunicationStreetName1 = data.CommunicationStreetName1;
                        $scope.CommunicationStreetName2 = data.CommunicationStreetName2;
                        $scope.CommunicationStreetName3 = data.CommunicationStreetName3;
                        $scope.Communication_Attn_CO = data.Communication_Attn_CO;
                        $scope.CommunicationCityName = data.CommunicationCity.toString();
                        $scope.ViewCommunicationCityName = data.CommunicationCityName;
                        $scope.CommunicationStateName = data.CommunicationState.toString();
                        $scope.ViewCommunicationStateName = data.CommunicationStateName;
                        $scope.CommunicationCountryName = data.CommunicationCountry.toString();
                        $scope.ViewCommunicationCountryName = data.CommunicationCountryName;
                        $scope.CommunicationPinCode = data.CommunicationPinCode;
                        $scope.Different_Address1 = data.Different_Address1;
                        $scope.Different_Address2 = data.Different_Address2;
                        $scope.Different_Address3 = data.Different_Address3;
                        $scope.Hobbies = data.Hobbies;
                        $scope.Extra_Curricular_Activities = data.Extra_Curricular_Activities;
                        $scope.Language = data.Language;
                        $scope.LanguageProficiency = data.LanguageProficiency;
                        $scope.ProficiencyName = data.ProficiencyName;

                        $scope.GenderInactiveFlag = 0;
                        $scope.DesignationInactiveFlag = 0;
                        $scope.LocationInactiveFlag = 0;
                        $scope.CitizenshipInactiveFlag = 0;
                        $scope.Additional_CitizenshipInactiveFlag = 0;
                        $scope.QualificationInactiveFlag = 0;
                        $scope.StatusNameInactiveFlag = 0;
                        $scope.MaritalStatusInactiveFlag = 0;
                        $scope.SkillInactiveFlag = 0;
                        $scope.ToolInactiveFlag = 0;
                        $scope.LanguageInactiveFlag = 0;

                        // if the current viewing Gender is inactive
                        // set the flag value to 1

                        if (($ff($scope.getGender, { Id: $scope.GenderName, GenderName: $scope.ViewGenderName, IsActive: 0 }).length) == 1) {
                            $scope.GenderInactiveFlag = 1;
                        }

                        // if the current viewing Location is inactive
                        // set the flag value to 1

                        if (($ff($scope.LocationFilterList, { Id: $scope.Location_Preference, LocationName: $scope.ViewLocation_Preference, Active: 0 }).length) == 1) {
                            $scope.LocationInactiveFlag = 1;
                        }
                        // if the current viewing Designation is inactive
                        // set the flag value to 1

                        if (($ff($scope.DesignationFilterList, { Id: $scope.Position, Position: $scope.ViewPosition, IsActive: 0 }).length) == 1) {
                            $scope.DesignationInactiveFlag = 1;
                        }

                        // if the current viewing Citizenship is inactive
                        // set the flag value to 1

                        if (($ff($scope.getCitizenship, { Id: $scope.Citizenship, Citizenship: $scope.ViewCitizenship, Active: 0 }).length) == 1) {
                            $scope.CitizenshipInactiveFlag = 1;
                        }
                        // if the current viewing Additional Citizenship is inactive
                        // set the flag value to 1

                        if (($ff($scope.getCitizenship, { Id: $scope.Add_Citizenship, Citizenship: $scope.ViewAdd_Citizenship, Active: 0 }).length) == 1) {
                            $scope.Additional_CitizenshipInactiveFlag = 1;
                        }

                        // if the current viewing job Status is inactive
                        // set the flag value to 1

                        if (($ff($scope.StatusList, { Id: $scope.Current_Job_Status, Status_Name: $scope.ViewCurrent_Job_Status, Active: 0 }).length) == 1) {
                            $scope.StatusNameInactiveFlag = 1;
                        }

                        // if the current viewing job Marital Status is inactive
                        // set the flag value to 1

                        if (($ff($scope.MaritalStatusList, { Id: $scope.Marital_status_Name, Marital_status_Name: $scope.ViewMarital_status_Name, Active: 0 }).length) == 1) {
                            $scope.MaritalStatusInactiveFlag = 1;
                        }

                        // if the current Permanent country is inactive

                        // set the flag value to 1

                        $scope.PermanentcountryInactiveFlag = 0;

                        if (($ff($scope.CountryList, { Id: $scope.PermanentCountryName, PermanentCountryName: $scope.ViewPermanentCountryName, IsActive: 0 }).length) == 1) {
                            $scope.PermanentcountryInactiveFlag = 1;
                        }

                        // if the current Permanent state is inactive
                        // set the flag value to 1

                        $scope.PermanentStateInactiveFlag = 0;

                        if (($ff($scope.StateNameFilterList, { Id: $scope.PermanentStateName, PermanentStateName: $scope.ViewPermanentStateName, IsActive: 0 }).length) == 1) {
                            $scope.PermanentStateInactiveFlag = 1;
                        }

                        // if the current Permanent city is inactive
                        // set the flag value to 1

                        $scope.PermanentCityInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.PermanentCityName, PermanentCityName: $scope.ViewPermanentCityName, IsActive: 0 }).length) == 1) {
                            $scope.PermanentCityInactiveFlag = 1;
                        }
                        // if the current Present country is inactive
                        // set the flag value to 1

                        $scope.PresentcountryInactiveFlag = 0;

                        if (($ff($scope.CountryList, { Id: $scope.PresentCountryName, PresentCountryName: $scope.ViewPresentCountryName, IsActive: 0 }).length) == 1) {
                            $scope.PresentcountryInactiveFlag = 1;
                        }
                        // if the current Present state is inactive
                        // set the flag value to 1

                        $scope.PresentStateInactiveFlag = 0;

                        if (($ff($scope.StateNameFilterList, { Id: $scope.StateName, PresentStateName: $scope.ViewPresentStateName, IsActive: 0 }).length) == 1) {
                            $scope.PresentStateInactiveFlag = 1;
                        }

                        // if the current Present city is inactive
                        // set the flag value to 1

                        $scope.PresentCityInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.PresentCityName, PresentCityName: $scope.ViewPresentCityName, IsActive: 0 }).length) == 1) {
                            $scope.PresentCityInactiveFlag = 1;
                        }

                        // if the current Communication country is inactive
                        // set the flag value to 1

                        $scope.CommunicationcountryInactiveFlag = 0;

                        if (($ff($scope.CountryList, { Id: $scope.CommunicationCountryName, CommunicationCountryName: $scope.ViewCommunicationCountryName, IsActive: 0 }).length) == 1) {
                            $scope.CommunicationcountryInactiveFlag = 1;
                        }

                        // if the current Communication state is inactive
                        // set the flag value to 1

                        $scope.CommunicationStateInactiveFlag = 0;

                        if (($ff($scope.StateNameFilterList, { Id: $scope.CommunicationStateName, CommunicationStateName: $scope.ViewCommunicationStateName, IsActive: 0 }).length) == 1) {
                            $scope.CommunicationStateInactiveFlag = 1;
                        }

                        // if the current Communication City is inactive
                        // set the flag value to 1

                        $scope.CommunicationCityInactiveFlag = 0;

                        if (($ff($scope.LocationNameFilterList, { Id: $scope.CommunicationCityName, CommunicationCityName: $scope.ViewCommunicationCityName, IsActive: 0 }).length) == 1) {
                            $scope.CommunicationCityInactiveFlag = 1;
                        }

                        //if (($ff($scope.getQualification, { Id: $scope.Course_Name, Course_Name: $scope.ViewCitizenship, IsActive: 0 }).length) == 1) {
                        //    $scope.QualificationInactiveFlag = 1;
                        //}

                        $http.get(baseUrl + '/api/CandidateResume/CandidateQualification_View/?Id=' + $scope.Id).success(function (Qualificationdata) {
                            $scope.AddQualification = Qualificationdata;
                       
                            //if (($ff($scope.getQualification, { Id: Qualificationdata.Course_Name, Course_Name: Qualificationdata.Course_Name, Active: 0 }).length) == 1) {
                            //    $scope.QualificationInactiveFlag = 1;
                            //}


                            $http.get(baseUrl + '/api/CandidateResume/Candidate_Skills_View/?Id=' + $scope.Id).success(function (Technical_Skilldata) {
                                $scope.AddTechnical_Skill = Technical_Skilldata;

                                //if (($ff($scope.getSkill, { Id: Technical_Skilldata.Technical_Skill, Technical_Skill: Technical_Skilldata.Technical_Skill, Active: 0 }).length) == 1) {
                                //    $scope.SkillInactiveFlag = 1;
                                //}

                                $http.get(baseUrl + '/api/CandidateResume/Candidate_Tools_View/?Id=' + $scope.Id).success(function (Toolsdata) {
                                    $scope.AddTools = Toolsdata;

                          
                                    //if (($ff($scope.getTool, { Id: Toolsdata.Tools_Name, Tools_Name: Toolsdata.Tools_Name, Active: 0 }).length) == 1) {
                                    //    $scope.ToolInactiveFlag = 1;
                                    //}

                                    // $scope.AddPrevious = [];
                             
                                    
                                    $http.get(baseUrl + '/api/CandidateResume/Candidate_PreviousExperience_View/?Id=' + $scope.Id).success(function (Previousdata) {
                                        $scope.AddPrevious = [];
                                    

                                        angular.forEach(Previousdata, function (locationItem) {
                                            if (locationItem.Name_of_Company != '') {

                                                var locObj = {
                                                    Id: locationItem.Id,
                                                    Name_of_Company: locationItem.Name_of_Company,
                                                    Address_of_Company: locationItem.Address_of_Company,
                                                    Start_Date: $filter('date')(locationItem.Start_Date, "dd-MMM-yyyy"),
                                                    End_Date: $filter('date')(locationItem.End_Date, "dd-MMM-yyyy"),
                                                    Skills_utilized: locationItem.Skills_utilized,
                                                    Primary_Resposibilities: locationItem.Primary_Resposibilities,
                                                }

                                                $scope.AddPrevious.push(locObj);
                                            }
                                        });
                                        $scope.Monthcalculation();                          


                                        $http.get(baseUrl + '/api/CandidateResume/CandidateLanguage_View/?Id=' + $scope.Id).success(function (Languagedata) {
                                            $scope.AddLanguage=[];                                        
                                     
                                            angular.forEach(Languagedata, function (Language) {                                         
                                          
                                                $scope.profString=Language.Proficiency_Id_List;
                                                $scope.displayProfList = $.map(Language.Proficiency_Id_List.split(','), function(value){
                                                    return parseInt(value);                                              
                                                    // or return +value; which handles float values as well
                                                });
                                                //$scope.displayProfList=$scope.profString.split(',');

                                                var locObj = {
                                                    Id: Language.Id,
                                                    Language_Id :Language.Language_Id,
                                                    Candidate_Resume_Id:Language.Candidate_Resume_Id,
                                                    LanguageName: Language.LanguageName,
                                                    Proficiency_Id_List: $scope.displayProfList
                                                }                                                                                      
                                                $scope.AddLanguage.push(locObj);
                                           
                                            });
                                       
                                        }).error(function (Languagedata) {
                                            $scope.error = "AN error has occured while view" + Languagedata;
                                        });

                                    }).error(function (Previousdata) {
                                        $scope.error = "AN error has occured while view" + Previousdata;
                                    });

                                }).error(function (Toolsdata) {
                                    $scope.error = "AN error has occured while view" + Toolsdata;
                                });

                            }).error(function (Technical_Skilldata) {
                                $scope.error = "AN error has occured while view" + Technical_Skilldata;
                            });

                        }).error(function (Qualificationdata) {
                            $scope.error = "AN error has occured while view" + Qualificationdata;
                        });

                    }).error(function (data) {
                        $scope.error = "AN error has occured while view" + data;
                    });
                
                }

            };


            //This is function for initiate values for Already serving notice period field//
            $scope.Alreadyservice = function (Already_serving_notice_period) {
                $scope.Already_serving_notice_periodadd = Already_serving_notice_period;
                if ($scope.Already_serving_notice_periodadd == 1) {
                    $scope.Already_serving_notice_periodView = 'Yes';
                }
                else if ($scope.Already_serving_notice_periodadd == 2) {
                    $scope.Already_serving_notice_periodView = 'No';
                }
            };



        
            $scope.AddQualification = [];

            /* THIS IS FOR ADD A ROW IN TABLE DYNAMICALLY */
            /*This is array function for display default row from Qualification details */
            $scope.AddQualification = [{
                'Id': $scope.ChildId,
                'Qualification_Id': $scope.Qualification_Id,
                'Course_Name': $scope.Course_Name
            }];

            /*This is Addrow function for add new row and save Qualifiction details*/
            $scope.QualificationSave = function (qualification) {

                if ($scope.QualificationRow >= 0) {

                    var obj = {
                        'Id': $scope.ChildId,
                        'Qualification_Id': $scope.Qualification_Id == 0 ? null : $scope.Qualification_Id,
                        'Course_Name': $scope.Course_Name
                    }

                    $scope.AddQualification[$scope.QualificationRow] = obj;
                }

                //else {

                //    $scope.AddQualification.push({
                //        'Id': $scope.ChildId,
                //        'Qualification_Id': $scope.Qualification_Id == 0 ? null : $scope.Qualification_Id,
                //        'Course_Name': $scope.Course_Name
                //    })
                //}

            };

            $scope.AddTechnical_Skill = [];
            /*This is array function for display default row from Techinical Skill details*/
            $scope.AddTechnical_Skill = [{
                'Id': $scope.ChildId,
                'Tec_Skill_Id': $scope.Tec_Skill_Id,
                'Technical_Skill': $scope.Technical_Skill,
                'Years_Of_Experience': $scope.Years_Of_Experience
            }];

            /*This is Addrow function for add new row and save Technical skill details */
            $scope.TechnicalSave = function () {
                // $scope.validatetech($scope.Tec_Skill_Id);

                if ($scope.SkillsRow >= 0) {
                    var obj = {
                        'Id': $scope.ChildId,
                        'Tec_Skill_Id': $scope.Tec_Skill_Id,
                        'Technical_Skill': $scope.Technical_Skill,
                        'Years_Of_Experience': $scope.Years_Of_Experience
                    }
                }
                else {

                    $scope.AddTechnical_Skill.push({
                        'Id': $scope.ChildId,
                        'Tec_Skill_Id': $scope.Tec_Skill_Id,
                        'Technical_Skill': $scope.Technical_Skill,
                        'Years_Of_Experience': $scope.Years_Of_Experience
                    })
                }
            };

            //   $scope.AddTools = [];
            /*This is array function for display default row from Tools*/
            $scope.AddTools = [{
                'Id': $scope.ChildId,
                'Tools_Id': $scope.Tools_Id,
                'Tools_Name': $scope.Tools_Name
            }];

            /*This is Addrow function for add new row and save Tools details*/
            $scope.ToolsSave = function () {
                if ($scope.ToolsRow >= 0) {
                    var obj = {
                        'Id': $scope.ChildId,
                        'Tools_Id': $scope.Tools_Id,
                        'Tools_Name': $scope.Tools_Name
                    }
                    $scope.AddTools[$scope.ToolsRow] = obj;
                }
                else {
                    $scope.AddTools.push({
                        'Id': $scope.ChildId,
                        'Tools_Id': $scope.Tools_Id,
                        'Tools_Name': $scope.Tools_Name
                    })
                }           
            };


            /*This is array function for display default row from Previous Experience*/
            $scope.AddPrevious = [{
                'Id': $scope.ChildId,
                'Name_of_Company': $scope.Name_of_Company,
                'Address_of_Company': $scope.Address_of_Company,
                //'Start_Date': $scope.Start_Date,
                'Start_Date': $filter('date')($scope.Start_Date, "dd-MMM-yyyy"),
                //'End_Date': $scope.End_Date,
                'End_Date': $filter('date')($scope.End_Date, "dd-MMM-yyyy"),
                'Skills_utilized': $scope.Skills_utilized,
                'Primary_Resposibilities': $scope.Primary_Resposibilities
            }];
       
            /*This is Add row function for add new row and save Previous Experience details*/
            $scope.PreviousSave = function () {

                if ($scope.PreviousRow >= 0) {
                    var obj = {
                        'Id': $scope.ChildId,
                        'Name_of_Company': $scope.Name_of_Company,
                        'Address_of_Company': $scope.Address_of_Company,
                        'Start_Date': $filter('date')($scope.Start_Date, "dd-MMM-yyyy"),
                        'End_Date': $filter('date')($scope.End_Date, "dd-MMM-yyyy"),
                        'Skills_utilized': $scope.Skills_utilized,
                        'Primary_Resposibilities': $scope.Primary_Resposibilities
                    }
                    $scope.AddPrevious[$scope.PreviousRow] = obj;

                }
                else {
                    $scope.AddPrevious.push({
                        'Id': $scope.ChildId,
                        'Name_of_Company': $scope.Name_of_Company,
                        'Address_of_Company': $scope.Address_of_Company,
                        'Start_Date': $filter('date')($scope.Start_Date, "dd-MMM-yyyy"),
                        'End_Date': $filter('date')($scope.End_Date, "dd-MMM-yyyy"),
                        'Skills_utilized': $scope.Skills_utilized,
                        'Primary_Resposibilities': $scope.Primary_Resposibilities
                    })
                }
           
            };

          //  $scope.AddLanguage = [];
            /*This is array function for display default row from Language*/
            $scope.AddLanguage = [{
                'Id': $scope.ChildId,
                'Language_Id': $scope.Language_Id,
                'LanguageName':$scope.LanguageName,
                'Proficiency_Id_List': $scope.Proficiency_Id_List == 0 ? null : $scope.Proficiency_Id_List

            }];

           // console.log($scope.AddLanguage);

            /*This is Addrow function for add new row and save Tools details*/
            $scope.LanguageSave = function () {
                if ($scope.LanguageRow >= 0) {
                    var obj = {
                        'Id': $scope.ChildId,
                        'Language_Id': $scope.Language_Id,
                        'LanguageName':$scope.LanguageName,
                        'Proficiency_Id_List': $scope.Proficiency_Id_List == 0 ? null : $scope.Proficiency_Id_List
                    }
                    $scope.AddLanguage[$scope.LanguageRow] = obj;
                }
                else {
                    $scope.AddLanguage.push({
                        'Id': $scope.ChildId,
                        'Language_Id': $scope.Language_Id,
                        'LanguageName':$scope.LanguageName,
                        'Proficiency_Id_List': $scope.Proficiency_Id_List == 0 ? null : $scope.Proficiency_Id_List
                    })
                }          
          
            };
        


     

            /*This is for getting a file url for uploading the url into the database*/
            $scope.dataURItoBlob = function (dataURI) {
                var binary = atob(dataURI.split(',')[1]);
                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                var array = [];
            
                for (var i = 0; i < binary.length; i++) {
                    array.push(binary.charCodeAt(i));
                }
                return new Blob([new Uint8Array(array)], {
                    type: mimeString
                });
            }
            //This is for change photo function//
            $scope.photoChange = function () {

                if ($('#PhotoID')[0].files[0] != undefined) {
                    $scope.FileName = $('#PhotoID')[0].files[0]['name'];
                }
            }

            //This is for file change function//
            $scope.docfileChange = function () {

                if ($('#ResumeID')[0].files[0] != undefined) {
                    $scope.ResumeFileName = $('#ResumeID')[0].files[0]['name'];
                }
            }

            //this is for image upload function//
            $scope.uploadImage = function (Photo) {
                var filename = "";
                if ($('#PhotoID')[0].files[0] != undefined) {
                    filename = $('#PhotoID')[0].files[0]['name'];
                }
            }

            //Declaration and initialization of scope variables//
            $scope.DuplicateId = 0;
            $scope.DuplicatsId = 0;
            $scope.DuplicatemobileId = 0;


            /*on click Save calling the insert update function for candidate
            and check the Mobile number already exist,if exist it display alert message or its 
            calling the insert update function*/
            $scope.CandidateAddEdit = function () {

                if ($scope.Validationcontrols() == true) {

                    if ($scope.Mobile_No != "") {
                        $http.get(baseUrl + '/api/CandidateResume/Mobile_Number_DuplicateCheck/?Id=' + $scope.DuplicatemobileId + '&Mobile_No=' + $scope.Mobile_No).success(function (datas1) {

                            if (datas1 == 1) {
                                alert("Mobile No. already exists, cannot duplicate");
                                return false;
                            }

                            $scope.Candidateinsertupdate();
                        }).error(function (datas1) {
                            $scope.error = "Problem in checking Mobile No. duplicate!" + datas1.ExceptionMessage;
                        });
                        return true;
                    }
                    else {
                        $scope.Candidateinsertupdate();
                    }

                }

            };


            $scope.loading = false;
            /*Calling the api method for insert and Update the record for a Candidate
           and display the record of selected Resource when Id is greater than 0
           in edit.html and provide an option for create and modify the Candidate and save the Candidate record*/
            $scope.Candidateinsertupdate = function () {

                $http.get(baseUrl + '/api/CandidateResume/Reference_number_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Reference_No=' + $scope.Reference_No).success(function (data) {
                    $http.get(baseUrl + '/api/CandidateResume/EmailId_DuplicateCheck/?Id=' + $scope.DuplicatsId + '&Email=' + $scope.Email).success(function (datas) {

                        if (data == 1) {
                            alert("Reference No. already exists, cannot duplicate");
                            return false;
                        }
                        else if (datas == 1) {
                            alert("Email Id already exists, cannot duplicate");
                            return false;
                        }

                        else ((data != 1) && (datas != 1))
                        {

                            var filename = "";
                            var Resumefilename = "";

                            var fd = new FormData();
                            var imgBlob;
                            var imgBlobfile;
                            var itemIndexLogo = -1;
                            var itemIndexfile = -1;

                            var fd = new FormData();

                            if ($('#PhotoID')[0].files[0] != undefined) {
                                filename = $('#PhotoID')[0].files[0]['name'];
                                imgBlob = $scope.dataURItoBlob($scope.uploadme);
                                itemIndexLogo = 0;
                            }
                            if ($('#ResumeID')[0].files[0] != undefined) {
                                Resumefilename = $('#ResumeID')[0].files[0]['name'];
                                imgBlobfile = $scope.dataURItoBlob($scope.resumedoc);


                                if (itemIndexLogo == -1) {
                                    itemIndexfile = 0;
                                }
                                else {
                                    itemIndexfile = 1;
                                }
                            }


                            if (itemIndexLogo != -1) {
                                fd.append('file', imgBlob);

                            }
                            if (itemIndexfile != -1) {
                                fd.append('file1', imgBlobfile);
                            }

                            $http.post(baseUrl + 'api/Common/AttachFile',
                            fd,
                            {
                                transformRequest: angular.identity,
                                headers: {
                                    'Content-Type': undefined
                                }
                            }
                            )
                            .success(function (response) {
                                if ($scope.FileName == "") {
                                    $scope.Photo = "";
                                }
                                else if (itemIndexLogo > -1) {
                                    if ($scope.FileName != "" && response[itemIndexLogo] != "") {
                                        $scope.Photo = response[itemIndexLogo];
                                    }
                                }
                                if ($scope.ResumeFileName == "") {
                                    $scope.Resume = "";
                                }
                                else if (itemIndexfile > -1) {
                                    if ($scope.ResumeFileName != "" && response[itemIndexfile] != "") {
                                        $scope.Resume = response[itemIndexfile];
                                    }
                                }

                                var obj = {

                                    Id: $scope.MasterId,
                                    Reference_No: $scope.Reference_No,
                                    Candidate_Name: $scope.Candidate_Name,
                                    GenderName: $scope.GenderName == 0 ? null : $scope.GenderName,
                                    Phone_Home: $scope.Phone_Home,
                                    Mobile_No: $scope.Mobile_No == "" ? null : $scope.Mobile_No,
                                    Email: $scope.Email,
                                    Address: $scope.Address == "" ? null : $scope.Address,
                                    Location_Preference: $scope.Location_Preference == 0 ? null : $scope.Location_Preference,
                                    Photo: $scope.Photo == "" ? null : $scope.Photo,
                                    Citizenship: $scope.Citizenship == 0 ? null : $scope.Citizenship,
                                    Add_Citizenship: $scope.Add_Citizenship == 0 ? null : $scope.Add_Citizenship,
                                    Year_of_Experience: $scope.Year_of_Experience,
                                    Month_Of_Experience: $scope.Month_Of_Experience,
                                    Year_of_RelevantExperience: $scope.Year_of_RelevantExperience,
                                    Month_Of_RelevantExperience: $scope.Month_Of_RelevantExperience,
                                    Current_CTC: $scope.Current_CTC,
                                    Expected_CTC: $scope.Expected_CTC,
                                    NoticePeriod: $scope.NoticePeriod,
                                    Position: $scope.Position,
                                    Current_Job_Status: $scope.Current_Job_Status,
                                    Applied_Date: $scope.Applied_Date,
                                    Already_serving_notice_period: $scope.Already_serving_notice_period == 0 ? null : $scope.Already_serving_notice_period,
                                    No_of_Days_joining: $scope.No_of_Days_joining == "" ? null : $scope.No_of_Days_joining,
                                    Social_Network_Link: $scope.Social_Network_Link == "" ? null : $scope.Social_Network_Link,
                                    Reference_Person_Name: $scope.Reference_Person_Name == "" ? null : $scope.Reference_Person_Name,
                                    Reference_Person_Mobile: $scope.Reference_Person_Mobile == "" ? null : $scope.Reference_Person_Mobile,
                                    Marital_status_Name: $scope.Marital_status_Name == 0 ? null : $scope.Marital_status_Name,
                                    Reason_for_Leaving_Current_Job: $scope.Reason_for_Leaving_Current_Job == "" ? null : $scope.Reason_for_Leaving_Current_Job,
                                    Reason_for_Join_Current_Job: $scope.Reason_for_Join_Current_Job == "" ? null : $scope.Reason_for_Join_Current_Job,
                                    Passport_Number: $scope.Passport_Number == "" ? null : $scope.Passport_Number,
                                    Passport_Expiry_Date: $scope.Passport_Expiry_Date == "" ? null : $scope.Passport_Expiry_Date,
                                    Visa_Availability_No: $scope.Visa_Availability_No == "" ? null : $scope.Visa_Availability_No,
                                    Visa_Expiry_Date: $scope.Visa_Expiry_Date == "" ? null : $scope.Visa_Expiry_Date,
                                    Driving_License: $scope.Driving_License == "" ? null : $scope.Driving_License,
                                    Resume: $scope.Resume,
                                    PhotoFullpath: "",
                                    FileName: $scope.FileName == "" ? "" : $scope.FileName,
                                    // FileName: $scope.FileName,
                                    ResumeFullpath: "",
                                    ResumeFileName: $scope.ResumeFileName == "" ? "" : $scope.ResumeFileName,

                                    PermanentHouse_No: $scope.PermanentHouse_No,
                                    PermanentStreetName1: $scope.PermanentStreetName1,
                                    PermanentStreetName2: $scope.PermanentStreetName2,
                                    PermanentStreetName3: $scope.PermanentStreetName3,
                                    Permanent_Attn_CO: $scope.Permanent_Attn_CO,

                                    PermanentCityName: $scope.PermanentCityName == 0 ? null : $scope.PermanentCityName,
                                    PermanentStateName: $scope.PermanentStateName == 0 ? null : $scope.PermanentStateName,
                                    PermanentCountryName: $scope.PermanentCountryName == 0 ? null : $scope.PermanentCountryName,
                                    PermanentPinCode: $scope.PermanentPinCode,

                                    PresentHouse_No: $scope.PresentHouse_No,
                                    PresentStreetName1: $scope.PresentStreetName1,
                                    PresentStreetName2: $scope.PresentStreetName2,
                                    PresentStreetName3: $scope.PresentStreetName3,
                                    Present_Attn_CO: $scope.Present_Attn_CO,
                                    PresentCityName: $scope.PresentCityName == 0 ? null : $scope.PresentCityName,
                                    PresentStateName: $scope.PresentStateName == 0 ? null : $scope.PresentStateName,
                                    PresentCountryName: $scope.PresentCountryName == 0 ? null : $scope.PresentCountryName,
                                    PresentPinCode: $scope.PresentPinCode,

                                    CommunicationHouse_No: $scope.CommunicationHouse_No,
                                    CommunicationStreetName1: $scope.CommunicationStreetName1,
                                    CommunicationStreetName2: $scope.CommunicationStreetName2,
                                    CommunicationStreetName3: $scope.CommunicationStreetName3,
                                    Communication_Attn_CO: $scope.Communication_Attn_CO,
                                    CommunicationCity: $scope.CommunicationCity,
                                    CommunicationCityName: $scope.CommunicationCityName == 0 ? null : $scope.CommunicationCityName,
                                    CommunicationStateName: $scope.CommunicationStateName == 0 ? null : $scope.CommunicationStateName,
                                    CommunicationCountryName: $scope.CommunicationCountryName == 0 ? null : $scope.CommunicationCountryName,
                                    CommunicationPinCode: $scope.CommunicationPinCode,
                                    Different_Address1: $scope.Different_Address1,
                                    Different_Address2: $scope.Different_Address2,
                                    Different_Address3: $scope.Different_Address3,
                                    Hobbies: $scope.Hobbies,
                                    Extra_Curricular_Activities: $scope.Extra_Curricular_Activities
                                }

                                $scope.loading = true;
                                $timeout(function () {
                                    if ($scope.loading == true) {
                                        $rootScope.$broadcast('show');
                                    }
                                }, 3000); // 3 second

                                //console.log(obj);
                                $http.post(baseUrl + '/api/CandidateResume/CandidateResume_Details_AddEdit/', obj).success(function (data) {

                                    //console.log(data);  
                                    $scope.Candidate_Resume_Id = data;
                                    $scope.MasterId = data;

                                    angular.forEach($scope.AddQualification, function (value, index) {
                                        value.Candidate_Resume_Id = $scope.Candidate_Resume_Id
                                    });


                                    $http.post(baseUrl + '/api/CandidateResume/CandidateQualification_AddEdit/', $scope.AddQualification).success(function (data) {
                                        angular.forEach($scope.AddTechnical_Skill, function (value, index) {

                                            value.Candidate_Resume_Id = $scope.Candidate_Resume_Id
                                        });


                                        $http.post(baseUrl + '/api/CandidateResume/CandidateTechinical_AddEdit/', $scope.AddTechnical_Skill).success(function (data) {
                                            angular.forEach($scope.AddTools, function (value, index) {
                                                value.Candidate_Resume_Id = $scope.Candidate_Resume_Id
                                            });

                                            $http.post(baseUrl + '/api/CandidateResume/CandidateTools_AddEdit/', $scope.AddTools).success(function (data) {
                                                angular.forEach($scope.AddPrevious, function (value, index) {
                                                    if (value.Name_of_Company != null || value.Address_of_Company != null || value.Start_Date != null || value.End_Date != null || value.Skills_utilized != null || value.Primary_Resposibilities != null) {
                                                        value.Candidate_Resume_Id = $scope.Candidate_Resume_Id
                                                   
                                                    }
                                                    //else {  
                                                    //    $scope.Candidate_Resume_Id = null;
                                                    //}
                                                     value.Candidate_Resume_Id = $scope.Candidate_Resume_Id
                                                });  

                                         
                                                $http.post(baseUrl + '/api/CandidateResume/Candidateprevious_experience_AddEdit/', $scope.AddPrevious).success(function (data) {
                                                    //angular.forEach($scope.AddLanguage, function (value, index) {
                                                    //    // console.log(value);
                                                    //    //console.log(value.Proficiency_Id_List);
                                                    angular.forEach($scope.AddLanguage, function (value, index) {                                        
                                                        if (value.Proficiency_Id_List != null){
                                                            value.Candidate_Resume_Id = $scope.Candidate_Resume_Id;
                                                            value.Proficiency_Id_List = value.Proficiency_Id_List.toString(); 
                                                        }
                                            
                                                    });

                                                    //$location.path("/ResumeList/" + $scope.MasterId + "/1");                                              
                                            
                                                    $http.post(baseUrl + '/api/CandidateResume/CandidateLanguage_AddEdit/',$scope.AddLanguage).success(function (data) {      

                                                        $location.path("/ResumeList/" + $scope.MasterId + "/1");
                                                    

                                                }).error(function (data) {
                                                    $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                                                });

                                               
                                            }).error(function (data) {
                                                $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                                            });

                                        }).error(function (data) {
                                            $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                                        });

                                    }).error(function (data) {
                                        $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                                    });

                                    }).error(function (data) {
                                        $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                                    });
                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');

                                }).error(function (data) {
                              
                                    $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                                });

                            }).error(function (response) {
                                $scope.Photo = "";
                                $scope.Resume = "";
                            });
                            $("#PhotoID").val('');
                            $("#ResumeID").val('');
                        }

                    }).error(function (datas1) {
                        $scope.error = "Problem in checking Email duplicate!" + datas1.ExceptionMessage;
                    });

                }).error(function (data) {

                    $scope.error = "Problem in checking candidate reference no. duplicate!" + data.ExceptionMessage;
                });
           
            }

            //This is for image clear function//
            $scope.imageclear = function () {
                $scope.uploadme = "";
                $('#PhotoID').val('');
                PhotoFullpath = "";
                $scope.FileName = "";

            };
            //This is for Resume file clear function//
            $scope.fileclear = function () {
                $scope.resumedoc = "";
                $('#ResumeID').val('');
                $scope.ResumeFileName = "";
            };

            /*on click addnew calling the Add/Edit function */
            $scope.AddCandidateResumePopUP = function (CatId) {
                $scope.Id = CatId;
            }

            /*on click view tool tip calling the View function */
            $scope.ViewCandidateResumePopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewCandidate();
                $location.path("/ResumeView/" + $scope.Id);
            }

            /*on click Edit tool tip calling the Edit function */
            $scope.EditCandidateResumePopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewCandidate();
                $location.path("/ResumeEdit/" + $scope.Id);
            }

            //Calling list function//
            $scope.ListCandidateResume = function (CatId) {


                if ($scope.Mode == 0) {
                    $scope.Id = CatId;
                    $scope.rowCollection = [];
                    //  $scope.EmployeeList_Search();
                }
                else if ($scope.Mode == 1) {

                    $scope.CandidateList();
                }
            }

            //on click Go in list page calling list function//
            $scope.CandidateListGo = function () {
                if ($scope.ListValidationcontrols() == true) {
                    location.path = "/Home/Index#/ResumeList/0";
                    $scope.CandidateList($routeParams.Id = 0);

                }
            };

            //on click Inactive tool tip calling delete function//
            $scope.DeleteCandidate = function (canId) {
                $scope.Id = canId;
                $scope.Candidate_Delete();
            };



            /* 
            Calling the api method to detele the details of the Candidate 
            matching the specified Candidate Id,
            and redirected to the list page.
            */
            $scope.Candidate_Delete = function () {
                var del = confirm("Do you like to inactivate the selected candidate resume?");
                if (del == true) {
                    $http.get(baseUrl + '/api/CandidateResume/CandidateDetails_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected candidate resume has been inactivated successfully");
                        $scope.CandidateListGo();
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting records" + data;
                    });
                }
            };


            //on click active tool tip calling ReInsert function//
            $scope.ActiveCandidate = function (canId) {
                $scope.Id = canId;
                $scope.Candidate_Active();
            };


            /* 
              Calling the api method to activate the details of the Resource 
             matching the specified Resource Id,
             and redirected to the list page.
            */
            $scope.Candidate_Active = function () {
                var del = confirm("Do you like to activate the selected candidate resume?");
                if (del == true) {
                    $http.get(baseUrl + '/api/CandidateResume/CandidateDetails_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected candidate resume has been activated successfully");
                        $scope.CandidateListGo();
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting candidate resume records" + data;
                    });
                }
            };




            //Declaration of Scope variables for list page//
            $scope.Id = 0;
            $scope.Reference_No = '';
            $scope.Candidate_Email = '';
            $scope.MobileNo = '';
            $scope.PassportNumber = '';
            $scope.GenderName = "0";
            $scope.Position_Name = "0";
            $scope.Marital_Name = "0";
            $scope.Technical_Skill_Name = "0";
            $scope.Preference_Location = "0";
            $scope.YearofExperience = "=";
            $scope.ResumeFileName = "";
            //$scope.YearofExperience
            //$scope.Yearof_Experience = "0";
            $scope.Alreadyserving_notice_period = "0";
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.CandidateName = "";

            $scope.Documentdata = [];

            /*Calling api method for list the Candidate details in Candidate details List page for the specified filters like 
            Email,Mobile number,Passport number,Marital status,PositionName,Gender_Name,Technical skill,Location preference,
            Years of experience,Operator,Already serving Notice Period, Isactive,Status list */
            $scope.CandidateList = function () {
                var Candidate = '';

                if ($routeParams.Id != undefined) {
                    $scope.Id = $routeParams.Id;


                    if ($scope.Candidate_Selected != undefined) {
                        Candidate = $scope.Candidate_Selected.originalObject.Candidate_Name;

                    };
                    $http.get(baseUrl + 'api/CandidateResume/CandidateDetailsList/?Id=' + $scope.Id
                    + '&Candidate_Name=' + Candidate
                    + '&Email=' + $scope.Candidate_Email + '&Mobile_No=' + $scope.MobileNo
                    + '&Passport_Number=' + $scope.PassportNumber + '&Position_Id=' + $scope.Position_Name
                    + '&Gender_Id=' + $scope.GenderName + '&Marital_status_Id=' + $scope.Marital_Name
                    + '&Tec_Skill_Id=' + $scope.Technical_Skill_Name + '&Location_Preference_Id=' + $scope.Preference_Location + '&Year_of_Experience=' + $scope.Yearof_Experience + '&Already_serving_notice_period=' + $scope.Alreadyserving_notice_period + '&IsActive=' + $scope.IsActive + '&expoperator=' + $scope.YearofExperience).success(function (data) {

                        // console.log(data);
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;



                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    })
                }
            };

            $scope.Documentfunction = function (ResumeFile, fileType) {

                $scope.filetype = ResumeFile.split(".");

                var fileExtenstion = "";
                if ($scope.filetype.length > 0) {
                    fileExtenstion = $scope.filetype[$scope.filetype.length - 1];
                }
                return fileExtenstion == fileType;

            };



            /* This is for View/Edit page redirect function */
            $scope.ViewRedirect = function () {

                $location.path("/ResumeEdit/" + $scope.MasterId);

            }

            /* This is for list page redirect function*/
            $scope.ListRedirect = function () {


                if ($scope.MasterId == 0) {
                    $location.path("/ResumeList/0/0");
                }
                else if ($scope.MasterId > 0) {
                    $location.path("/ResumeList/0/1");
                    //$scope.EmployeeList_Go();
                }
            };


            $scope.removePrevious = function (idx) {
                if (confirm("Are you sure to delete this record in Previous Experience?")) {
                    $scope.AddPrevious.splice(idx, 1);
                }
            };

            /*on click Remove in Previous Experience Filed its calling the 
            Previous Experience delete funtion */
            $scope.RemovePrevious_Item = function (rowIndex) {
                var del = confirm("Do you like to delete this Previous Experience?");
                if (del == true) {
                    var Previous_Item = [];

                    if ($scope.MasterId <= 0) {
                        //alert('Are you sure to delete this record?');
                        angular.forEach($scope.AddPrevious, function (selectedPre, index) {
                            if(index!=rowIndex)                        
                                Previous_Item.push(selectedPre);

                        });
                        $scope.AddPrevious= Previous_Item;
                    }
                    else if ($scope.MasterId > 0) {
                        angular.forEach($scope.AddPrevious, function (selectedPre, index) {
                            if (index==rowIndex)  {
                                $scope.PreviousId = selectedPre.Id;
                                $scope.RequirementPrevious_Delete();

                            }
                            else 
                            {
                                Previous_Item.push(selectedPre);
                            }
                        });
                
                        $scope.AddPrevious = Previous_Item;
                    }
                }
            };

            //This is Check box select function for Previous Experince //
            $scope.checkAllPrevious = function () {
                if (!$scope.selectedall) {
                    $scope.selectedall = true;
                } else {
                    $scope.selectedall = false;
                }
                angular.forEach($scope.AddPrevious, function (row) {
                    row.selectedPre = $scope.selectedall;
                });
            };
            /*Calling api method for delete selected Pervious experience details for the candidate*/
            $scope.RequirementPrevious_Delete = function () {
                $http.get('/api/CandidateResume/CandidatePrevious_Experience_Delete/?Id=' + $scope.PreviousId).success(function (Prevdata) {
                    //alert("Requirement Details deleted Successfully");
                }).error(function (Prevdata) {
                    $scope.error = "AN error has occured while deleting records" + Prevdata;
                });
            };

            /*Calling api method for delete selected Tools details for the candidate*/
            $scope.RequirementTools_Delete = function () {
                $http.get(baseUrl + '/api/CandidateResume/CandidateTools_Delete/?Id=' + $scope.ToolId).success(function (Historydata) {
                     //alert("CandidateResume Details deleted Successfully");
                }).error(function (Historydata) {
                    $scope.error = "AN error has occured while deleting records" + Historydata;
                });
            };

            /*Calling api method for delete selected Skill details for the candidate*/
            $scope.RequirementSkills_Delete = function () {
                $http.get(baseUrl + '/api/CandidateResume/CandidateSkills_Delete/?Id=' + $scope.SkillId).success(function (Vitaldata) {
                      //alert("CandidateResume Details deleted Successfully");
                }).error(function (Vitaldata) {
                    $scope.error = "AN error has occured while deleting records" + Vitaldata;
                });
            };

            /*Calling api method for delete selected Qualification details for the candidate*/
            $scope.RequirementQualification_Delete = function () {
                $http.get(baseUrl + '/api/CandidateResume/CandidateQualification_Delete/?Id=' + $scope.QuaId).success(function (Generaldata) {
                    // alert("CandidateResume Details deleted Successfully");                           
                }).error(function (Generaldata) {
                    $scope.error = "AN error has occured while deleting records" + Generaldata;
                });
            };
            $scope.LangId = 0;

            /*Calling api method for delete selected Language details for the candidate*/
            $scope.RequirementLanguage_Delete = function () {
                $http.get('/api/CandidateResume/CandidateLanguage_Delete/?Id=' + $scope.LangId).success(function (Langdata) {
               
                    alert("Requirement Details deleted Successfully");
                }).error(function (Langdata) {
                    $scope.error = "AN error has occured while deleting records" + Langdata;
                });
            };
        


            //This is a function to calculate No Of Months with StartDate and EndDate
            $scope.totalmonths=[];
            $scope.Monthcalculation = function () {
            
                angular.forEach($scope.AddPrevious, function (value, index) {
                    if(value.Start_Date !=undefined && value.End_Date!=undefined )
                    {
                        var stDate=new Date(value.Start_Date);
                        var eDate=new Date(value.End_Date);
                        var startMoment = moment(stDate);
                        var endMoment = moment(eDate);                
                        $scope.totalmonths[index] = (endMoment.diff(startMoment, 'months'));
                    
                    }                
                });
              
            
            };

       
       
            $scope.removeQual = function (idx) {
                if (confirm("Are you sure to delete this record in Qualification?")) {
                    $scope.AddQualification.splice(idx, 1);
                }
            };

            $scope.RemoveQualification_Item = function (rowItem) {
                var del = confirm("Do you like to delete this Qualification?");
                if (del == true) {
                    var Qualification_Item = [];
                    if ($scope.MasterId <= 0) {
                   
                        angular.forEach($scope.AddQualification, function (selectedQual, index) {
                            if(index!=rowItem)
                            {
                                Qualification_Item.push(selectedQual);
                            }                    
                        });
                        $scope.AddQualification = Qualification_Item;

                        //});
                    }
                    else if ($scope.MasterId > 0) {
                        angular.forEach($scope.AddQualification, function (selectedQual, index) {
                            if(index==rowItem)
                            {                      
                                $scope.QuaId = selectedQual.Id;
                                $scope.RequirementQualification_Delete();
                            }
                            else 
                            {
                                Qualification_Item.push(selectedQual);
                            }                        

                        });
                        $scope.AddQualification = Qualification_Item;

                    }
                }
                ////alert(IsItemSelected);
                //if (IsItemSelected == false) {
                //    alert("Please select atleast one Qualification item to remove");
                //}
            };

            //This is Check box select function for Qualification //
            //$scope.checkAllQualification = function () {
            //    if (!$scope.selectedallQual) {
            //        $scope.selectedallQual = true;
            //    } else {
            //        $scope.selectedallQual = false;
            //        //alert("Please select atleast one qualification item to remove");
            //    }
            //    angular.forEach($scope.AddQualification, function (row) {
            //        row.selectedQual = $scope.selectedallQual;
            //    });
            //};


            /*on click Remove in Previous Experience Filed its calling the Technical skill delete funtion */
            $scope.RemoveSkill = function (idx) {
                var Skill_Item = [];
                if ($scope.MasterId <= 0) {
                    confirm("Are you sure to delete this record in Skills?")
                    $scope.AddTechnical_Skill.splice(idx, 1);

                }
                else if ($scope.MasterId > 0) {

                    angular.forEach($scope.AddTechnical_Skill, function (selectedskill,Key) {
                        alert("ss");
                        selectedskill.Id == idx;
                        $scope.RequirementSkills_Delete.splice(Key, 1);
                
                    })
               
                };
            };
            /*on click Remove in Previous Experience Filed its calling the Technical skill remove funtion */
            $scope.RemoveSkill_Item = function (rowIndex) {
                var del = confirm("Do you like to delete this Skill?");
                if (del == true) {
                    var Skill_Item = [];
                    if ($scope.MasterId <= 0) {
                        angular.forEach($scope.AddTechnical_Skill, function (selectedskill, index) {
                            if (index!=rowIndex) {
                                Skill_Item.push(selectedskill);
                            }    
                        });
                        $scope.AddTechnical_Skill = Skill_Item;
                    }
                    else if ($scope.MasterId > 0) {
                        angular.forEach($scope.AddTechnical_Skill, function (selectedskill, index) {

                            if (index==rowIndex) {
                                $scope.SkillId = selectedskill.Id;
                                $scope.RequirementSkills_Delete();
                            
                            }
                            else 
                            {
                                Skill_Item.push(selectedskill);
                            }
                            $scope.AddTechnical_Skill = Skill_Item;

                        });
                    }
                }
            };

            //This is Check box select function for Technical skill //
            $scope.checkAllSkill = function () {
                if (!$scope.selectedallskill) {
                    $scope.selectedallskill = true;
                } else {
                    $scope.selectedallskill = false;
                }
                angular.forEach($scope.AddTechnical_Skill, function (row) {
                    row.selectedskill = $scope.selectedallskill;
                });
            };
            /*on click Remove in Previous Experience Filed its calling the Tools Remove  funtion */
            $scope.RemoveTools = function (idx) {
                if (confirm("Are you sure to delete this record in Tools?")) {
                    $scope.AddTools.splice(idx, 1);
                }
            };



            /*on click Remove in Previous Experience Filed its calling the Tools delete funtion */
            $scope.RemoveTools_Item = function (rowIndex) {
                var del = confirm("Do you like to delete this Tool?");
                if (del == true) {
                    var Tools_Item = [];
                    if ($scope.MasterId <= 0) {

                        angular.forEach($scope.AddTools, function (selectedtool, index) {
                            if (index!=rowIndex) {
                                Tools_Item.push(selectedtool);
                            }                    
                        });
                        $scope.AddTools = Tools_Item;

                    }
                    else if ($scope.MasterId > 0) {
                        angular.forEach($scope.AddTools, function (selectedtool, index) {
                            if (index==rowIndex) {
                                $scope.ToolId = selectedtool.Id;
                                $scope.RequirementTools_Delete();
                            }
                            else
                            {
                                Tools_Item.push(selectedtool);
                            }                       

                        });
                        $scope.AddTools = Tools_Item;

                    }
                }
            };

       
            //This is Check box select function for Tools //
            $scope.checkAllTools = function () {
                if (!$scope.selectedalltool) {
                    $scope.selectedalltool = true;
                } else {
                    $scope.selectedalltool = false;
                }
                angular.forEach($scope.AddTools, function (row) {
                    row.selectedtool = $scope.selectedalltool;
                });
            };
            /*on click Remove its calling the Language delete funtion */
            $scope.RemoveLanguage_Item = function (rowIndex) {
                var del = confirm("Do you like to delete this Language?");
                if (del == true) {
                    var Language_Item = [];
                    if ($scope.MasterId <= 0) {

                        angular.forEach($scope.AddLanguage, function (selectedLanguage, index) {
                            if (index!=rowIndex) {
                                Language_Item.push(selectedLanguage);
                            }                    
                        });
                        $scope.AddLanguage = Language_Item;

                    }
                    else if ($scope.MasterId > 0) {
                        angular.forEach($scope.AddLanguage, function (selectedLanguage, index) {
                            if (index==rowIndex) {
                                $scope.LangId = selectedLanguage.Id;
                                $scope.RequirementLanguage_Delete();
                            }
                            else
                            {
                                Language_Item.push(selectedLanguage);
                            }                       

                        });
                        $scope.AddLanguage = Language_Item;

                    }
                }
            };


        }
    ]);

    //This is for ITSectionCategory controller functions//
    EmpControllers.controller("ITSectionCategoryController", ['$scope', '$http', '$filter', '$routeParams', '$location', '$window','filterFilter','$rootScope', '$timeout',
        function ($scope, $http, $filter, $routeParams, $location, $window, $ff, $rootScope, $timeout) {

            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.bool = function (IsAttribute) {
                if (IsAttribute == true) {
                    $scope.IsAttribute = 'Yes';
                } else if (IsAttribute == false) {
                    $scope.IsAttribute = 'No';
                }
            };
            /* THIS IS FOR VALIDATION*/
            $scope.Validationcontrols = function () {
                if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                    alert("Please select Company");
                    return false;
                }

                else if (typeof ($scope.IT_Section_Category_Name) == "undefined" || $scope.IT_Section_Category_Name == "") {
                    alert("Please enter IT Section Category Name");
                    return false;
                }
                else if (typeof ($scope.Max_Limit) == "undefined" || $scope.Max_Limit == "") {
                    alert("Please enter Max Limit");
                    return false;
                }

                else if (typeof ($scope.Validity_From_Month) == "undefined" || $scope.Validity_From_Month == 0) {
                    alert("Please select Validity From Month");
                    return false;
                }
                else if (typeof ($scope.Validity_From_Year) == "undefined" || $scope.Validity_From_Year == 0) {
                    alert("Please select Validity From Year");
                    return false;
                }
                else if (typeof ($scope.Validity_To_Month) == "undefined" || $scope.Validity_To_Month == 0) {
                    alert("Please select Validity To Month");
                    return false;
                }
                else if (typeof ($scope.Validity_To_Year) == "undefined" || $scope.Validity_To_Year == 0) {
                    alert("Please select Validity To Year");
                    return false;
                }
                else if (parseInt($scope.Validity_To_Year) < parseInt($scope.Validity_From_Year)) {
                    alert("Please enter Validity To Year greater than Validity From Year");
                    return false;
                }
                else if ($scope.Consideration_Percentage > 100.00) {
                    alert("Please enter Consideration percentage less than 100");
                    return false;
                }
                return true;
            };

            $scope.MasterId = 0;
            $scope.CompanyName = "0";
            $scope.ITSectionCategory_Name = '';
            $scope.Validity_From_Month = "0";
            $scope.Validity_To_Month = "0";
            $scope.Validity_From_Year = "0";
            $scope.Validity_To_Year = "0";
            $scope.Max_Limit = "0";
            $scope.Validity_From = "0";
            $scope.Validity_To = "0";
            /* THIS IS FOR DROP DOWN LIST CHANGE ID VALUE TO NAME*/

            $http.get(baseUrl + '/api/Common/GetMonthList/').success(function (data) {
                $scope.getMonth = data;
            });
            $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
                $scope.getYear = data;
            });
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                $scope.CompanyNameList = data;
            });
       
            $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {         
                $scope.getFyYear = data;
            });
            $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                $scope.getFyToYear = data;            
            });
        
            $scope.getFYYearList = [];
       
            $scope.populateYearPopulateList = function () {
         
           
                $http.get(baseUrl + 'api/Common/FYCompanyList/?company_id='+ $scope.CompanyName).success(function (data) {
                    $scope.getFYYearList = data;     
                    angular.forEach($scope.getFYYearList, function (value, index) {                   
                        var date = new Date();
                        var startdate = moment(value.FY_start_Dt);
                        var enddate = moment(value.FY_end_Dt);
                        var dateitem = moment(date);               
                   

                        if(startdate <=dateitem && enddate>=dateitem)
                        { 
                            $scope.Validity_From_Year = value.Fy_From_Year_Id.toString();
                            $scope.Validity_To_Year = value.Fy_To_Year_Id.toString();                            
                        }
                    });


                });
            }
            $scope.populateYearPopulateList();

            //var startMoment = moment(stDate);
            //var endMoment = moment(eDate);      
            /* THIS IS FOR VIEW PROCEDURE */
            $scope.AddITCategoryPopUP = function (CatId) {
                $scope.Id = CatId;
                // $scope.ViewITCategory();
                angular.element('#ItsectioncategoryModal').modal('show');
            }

            $scope.ViewITCategoryPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewITCategory();
                angular.element('#ItsectioncategoryViewModal').modal('show');
            }

            $scope.EditITCategoryPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewITCategory();
                angular.element('#ItsectioncategoryModal').modal('show');
            }

            $scope.ListITCategoryPopUP = function (PFESIId) {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.ITCategoryList();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.ITCategoryList();
                }
                if (PFESIId > 0) {
                    $scope.Id = PFESIId;
                    $scope.ITCategoryList($scope.Id);
                    // angular.element('#PFandESIModel').modal('show');
                }
            }

            $scope.ViewITCategory = function () {

                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }
                $http.get(baseUrl + '/api/ITSectionCategory/ITSectionCategory_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.CompanyName = data.CompanyId.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.IT_Section_Category_Name = data.IT_Section_Category_Name;
                    $scope.Max_Limit = data.Max_Limit;
                    $scope.Validity_From_Month = data.Validity_From_Month_Id.toString();
                    $scope.ViewValidity_From_Month = data.Validity_From_Month;
                    $scope.Validity_To_Month = data.Validity_To_Month_Id.toString();
                    $scope.ViewValidity_To_Month = data.Validity_To_Month;
                    $scope.Validity_From_Year = data.Validity_From_Year_Id.toString();
                    $scope.ViewValidity_From_Year = data.Validity_From_Year;
                    $scope.Validity_To_Year = data.Validity_To_Year_Id.toString();
                    $scope.ViewValidity_To_Year = data.Validity_To_Year;
                    $scope.Remarks = data.Remarks;
                    $scope.Consideration_Percentage = data.Consideration_Percentage;



                }).error(function (data) {
                    $scope.error = "AN error has occured while view" + data;
                });

            };

            /*THIS IS FOR CLEAR POPUP FUNCTION*/
            $scope.ClearITCategoryPopup = function () {
                $scope.CompanyName = "0";
                $scope.IT_Section_Category_Name = "";
                $scope.Max_Limit = "";
                $scope.Validity_From_Month = "0";
                $scope.Validity_To_Month = "0";
                $scope.Validity_From_Year = "0";
                $scope.Validity_To_Year = "0";
                $scope.Remarks = "";
                $scope.Consideration_Percentage = "";
            };


            /* THIS IS FOR ADD PROCEDURE */                                      

            $scope.DuplicateId = 0;
            $scope.Id = 0;

            $scope.ITCategoryAddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    $http.get(baseUrl + '/api/ITSectionCategory/ITSection_DuplicateCheck/?Id=' + $scope.DuplicateId + '&CompanyId='+$scope.CompanyName +'&IT_Section_Category_Name=' + $scope.IT_Section_Category_Name).success(function (data) {
                     
                        if (data == 1) {
                            alert("IT Section Category Name already exists, cannot duplicate");
                            return false;
                        }
                        else {
                            var obj = {
                                Id: $scope.Id,
                                CompanyId: $scope.CompanyName,
                                IT_Section_Category_Name: $scope.IT_Section_Category_Name,
                                Max_Limit: $scope.Max_Limit,
                                Validity_From_Month_Id: $scope.Validity_From_Month,
                                Validity_To_Month_Id: $scope.Validity_To_Month,
                                Validity_From_Year_Id: $scope.Validity_From_Year,
                                Validity_To_Year_Id: $scope.Validity_To_Year,
                                Remarks: $scope.Remarks,
                                Consideration_Percentage: $scope.Consideration_Percentage,
                            }
                         
                            $http.post(baseUrl + '/api/ITSectionCategory/ITSectionCategory_AddEdit/', obj).success(function (data) {
                             
                                $scope.AddId = data;
                                var AddId = data;
                                $scope.ListITCategoryPopUP($scope.AddId);
                                angular.element('#ItsectioncategoryModal').modal('hide');
                                //$scope.CancelPopup();
                                $scope.ClearITCategoryPopup();
                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                            });
                        }
                    }).error(function (data) {
                        $scope.error = "Problem in checking IT Section Category Name  duplicate!" + data.ExceptionMessage;
                    });
                }
            };

            $scope.DeleteITSectionCategory = function (LRId) {
                $scope.Id = LRId;
                $scope.ITCategory_Delete();
            };


            /* THIS IS FOR DELETE PROCEDURE */
            $scope.ITCategory_Delete = function () {
                var del = confirm("Do you like to inactivate the selected IT Section Category details?");
                if (del == true) {
                    $http.get(baseUrl + '/api/ITSectionCategory/ITSectionCategory_Delete/?Id=' + $scope.Id).success(function (data) {

                        alert("IT Section Category Details Inactivated Successfully");
                        $scope.ITCategoryListGo($scope.Id = 0);
                        //window.location.href = baseUrl + "/Home/Index#/ITSectionCategoryList";

                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting records" + data;
                    });
                }
            };


            /*THIS IS FOR LIST FUNCTION*/
            $scope.ITCategoryList = function () {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $http.get(baseUrl + 'api/ITSectionCategory/ITSectionCategory_List/?Id=' + $scope.Id + '&IT_Section_Category_Name=' + $scope.ITSectionCategory_Name).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };

            //This is function for List page (For List page Go button)
            $scope.ITCategoryListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                // $scope.ListITCategoryPopUP(ListId);
                $scope.Mode = 1;
                $scope.ITCategoryList($scope.Id, $scope.Mode);
            };

            /*calling Alert message for cannot edit inactive record function */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }


            //on click active tool tip calling ReInsert function//
            $scope.ActiveITSectionCategory = function (canId) {
                $scope.Id = canId;
                $scope.ITSectionCategory_Active();
            };


            /* 
             Calling the api method to activate the details of the Resource 
             matching the specified Resource Id,
             and redirected to the list page.
            */
            $scope.ITSectionCategory_Active = function () {
                var Ins = confirm("Do you like to activate the selected IT SectionCategory details?");
                if (Ins == true) {
                    $http.get(baseUrl + '/api/ITSectionCategory/ITSectionCategory_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected  IT SectionCategory details configuration details has been activated successfully");
                        $scope.ListITCategoryPopUP($scope.Id = 0);
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting financial year configuration  records" + data;
                    });
                }
            };

            $scope.Listrec = function () {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
            };
            /* THIS IS FOR EDIT PROCEDURE */

            $scope.ViewRedirect = function () {

                $location.path("/ITSectionCategoryEdit/" + $scope.Id);

            }
            /* THIS IS FOR LIST PROCEDURE */
            $scope.ListRedirect = function () {

                $location.path("/ITSectionCategoryList/" + $scope.Id);

            }

            $scope.CancelView = function () {
                angular.element('#ItsectioncategoryViewModal').modal('hide');
                $scope.ClearITCategoryPopup();
                $scope.ITCategoryListGo();
            }
            $scope.CancelPopup = function () {
                if ($scope.Id > 0) {
                    angular.element('#ItsectioncategoryModal').modal('hide');
                    $scope.ClearITCategoryPopup();
                    $scope.ITCategoryListGo();
                }

                angular.element('#ItsectioncategoryModal').modal('hide');
                $scope.ClearITCategoryPopup();
                //  $scope.Company_ListsearchGo();


            }
            $scope.CancelPopupButton = function () {
                angular.element('#FyconfigurationModal').modal('hide');
                $scope.ClearITCategoryPopup();
                $scope.ITCategoryListGo();
            }
            //$scope.CancelPopup = function () {

            //    angular.element('#ItsectioncategoryModal').modal('hide');
            //    angular.element('#ItsectioncategoryViewModal').modal('hide');
            //    $scope.ClearITCategoryPopup();
            //}
        }
    ]);

    // This is for ITSection controller functions //
    EmpControllers.controller("ITSectionController", ['$scope', '$http', '$filter', '$routeParams', '$location', '$window',
        function ($scope, $http, $filter, $routeParams, $location, $window) {
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            /* THIS IS FOR VALIDATION CONTROL */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.IT_Section_Category_Name) == "undefined" || $scope.IT_Section_Category_Name == 0) {
                    alert("Please select IT Section Category");
                    return false;
                }
                else if (typeof ($scope.IT_Section_Name) == "undefined" || $scope.IT_Section_Name == "") {
                    alert("Please enter IT Section");
                    return false;
                }
                else if (typeof ($scope.Validity_From_Month) == "undefined" || $scope.Validity_From_Month == 0) {
                    alert("Please select Validity From Month");
                    return false;
                }
                else if (typeof ($scope.Validity_From_Year) == "undefined" || $scope.Validity_From_Year == 0) {
                    alert("Please select Validity From Year");
                    return false;
                }
                else if (typeof ($scope.Validity_To_Month) == "undefined" || $scope.Validity_To_Month == 0) {
                    alert("Please select Validity To Month");
                    return false;
                }
                else if (typeof ($scope.Validity_To_Year) == "undefined" || $scope.Validity_To_Year == 0) {
                    alert("Please select Validity To Year");
                    return false;
                }
                else if (parseInt($scope.Validity_To_Year) < parseInt($scope.Validity_From_Year)) {
                    alert("Please select Validity to year greater than Validity From Year");
                    return false;
                }
                else if ($scope.Consideration > 100.00) {
                    alert("Please enter Consideration percentage less than 100");
                    return false;
                }
                return true;
            };

            $scope.Id = 0;
            $scope.IT_Section_Category_Name = "0";
            $scope.ITSectionCategoryName = "0";
            $scope.Validity_From_Month = "0";
            $scope.Validity_To_Month = "0";
            $scope.Validity_From_Year = "0";
            $scope.Validity_To_Year = "0";

            /* THIS IS FOR DROP DOWN LIST CHANGE ID VALUE TO NAME*/
            /*MONTH*/
            $http.get(baseUrl + '/api/Common/GetMonthList/').success(function (data) {
                $scope.getMonth = data;
            });
            /*ITSECTION CATEGORY*/
            $http.get(baseUrl + '/api/ITSection/GetITCategory/').success(function (data) {
                $scope.getITCategory = data;
            });
            /*YEAR*/
            $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
                $scope.getYear = data;
            });
            /*FINANCIAL FROM YEAR*/
            $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
                $scope.getFyYear = data;
            });
            /*FINANCIAL TO YEAR*/
            $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                $scope.getFyToYear = data;
            });
            /*FINANCIAL GROUP BY FROM YEAR*/
            $http.get(baseUrl + 'api/Common/GroupBy_FromYear/').success(function (data) {
                $scope.GroupFromYear = data;
            });
            /*FINANCIAL GROUP BY TO YEAR*/
            $http.get(baseUrl + 'api/Common/GroupBy_ToYear/').success(function (data) {
                $scope.GroupToYear = data;
            });

            /* THIS IS OPENING POP WINDOW FORM LIST FOR ADD,VIEW AND EDIT */

            $scope.AddITSectionPopUP = function (CatId) {
                $scope.Id = CatId;
                //  $scope.ViewITSection();
                angular.element('#ITSectionModal').modal('show');
            }
            $scope.ViewITSectionPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewITSection();
                angular.element('#ITSectionViewModal').modal('show');
            }
            $scope.EditITSectionPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewITSection();
                angular.element('#ITSectionModal').modal('show');
            }
            $scope.ListITSectionPopUP = function (CatId) {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.ITSectionList();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.ITSectionList();
                }
                if (CatId > 0) {
                    $scope.Id = CatId;
                    $scope.ITSectionList();
                }
            }

            /* THIS IS FOR VIEW PROCEDURE */

            $scope.ViewITSection = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }

                $http.get(baseUrl + '/api/ITSection/ITSection_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.IT_Section_Category_Name = data.IT_Section_Category_Id.toString();
                    $scope.ViewIT_Section_Category_Name = data.IT_Section_Category_Name;
                    $scope.IT_Section_Name = data.IT_Section_Name;
                    $scope.Max_Limit = data.Max_Limit;
                    $scope.Validity_From_Month = data.Validity_From_Month_Id.toString();
                    $scope.ViewValidity_From_Month = data.Validity_From_Month;
                    $scope.Validity_To_Month = data.Validity_To_Month_Id.toString();
                    $scope.ViewValidity_To_Month = data.Validity_To_Month;
                    $scope.Validity_From_Year = data.Validity_From_Year_Id.toString();
                    $scope.ViewValidity_From_Year = data.Validity_From_Year;
                    $scope.Validity_To_Year = data.Validity_To_Year_Id.toString();
                    $scope.ViewValidity_To_Year = data.Validity_To_Year;
                    $scope.Remarks = data.Remarks;
                    $scope.Consideration = data.Consideration;

                }).error(function (data) {
                    $scope.error = "AN error has occured while view" + data;
                });
            };

            /* THIS IS FOR CLEAR FUNCTION */
            $scope.ClearITSectionPopup = function () {
                $scope.IT_Section_Category_Name = "0";
                $scope.IT_Section_Name = "";
                $scope.Validity_From_Month = "0";
                $scope.Validity_To_Month = "0";
                $scope.Validity_From_Year = "0";
                $scope.Validity_To_Year = "0";
                $scope.Remarks = "";
                $scope.Consideration = "";
                $scope.Max_Limit = "";
            };

            /* THIS IS FOR VALIDATION FUNCTION */
            /* Showing alert when inactive record is try to edit in the list page */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }
            /* THIS IS FOR ADD/EDIT PROCEDURE */
            $scope.DuplicateId = 0;
            $scope.ITSectionAddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    $http.get(baseUrl + '/api/ITSection/IT_Section_NameCheck/?Id=' + $scope.DuplicateId + '&IT_Section_Name=' + $scope.IT_Section_Name).success(function (data) {
                        if (data == 1) {
                            alert("IT sectionName is already exists, cannot duplicate");
                            return false;
                        }
                            //alert($scope.Fy_From_Year_Id);
                            //if ($scope.Fy_From_Year_Id == 0) {
                            //    alert("Select Fy_From_Year_Id");
                            //    return false;
                            //}
                        else {

                            var obj = {
                                Id: $scope.Id,
                                IT_Section_Category_Id: $scope.IT_Section_Category_Name,
                                IT_Section_Name: $scope.IT_Section_Name,
                                Validity_From_Month_Id: $scope.Validity_From_Month,
                                Validity_To_Month_Id: $scope.Validity_To_Month,
                                Validity_From_Year_Id: $scope.Validity_From_Year,
                                Validity_To_Year_Id: $scope.Validity_To_Year,
                                Remarks: $scope.Remarks,
                                Consideration: $scope.Consideration,
                                Max_Limit: $scope.Max_Limit,
                            }
                            $http.post(baseUrl + '/api/ITSection/ITSection_AddEdit/', obj).success(function (data) {
                                $scope.AddId = data;
                                $scope.ListITSectionPopUP($scope.AddId);
                                //$scope.CancelPopup();
                                angular.element('#ITSectionModal').modal('hide');
                                $scope.ClearITSectionPopup();
                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding" + data.ExceptionMessage;
                            });
                        }
                    }).error(function (data) {

                        $scope.error = "Problem in checking IT Section Name duplicate!" + data.ExceptionMessage;
                    });
                }

            };

            /* THIS IS FOR LIST PROCEDURE */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.ITSectionList = function () {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $http.get(baseUrl + 'api/ITSection/ITSection_List/?Id=' + $scope.Id + '&IT_Section_Category_Id=' + $scope.ITSectionCategoryName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };

            /* THIS IS FOR LIST PROCEDURE  FOR GO BUTTON */
            $scope.ITSectionListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                // $scope.ListITSectionPopUP(ListId);
                $scope.Mode = 1;
                $scope.ITSectionList($scope.Id, $scope.Mode);
            };

            $scope.DeleteITSection = function (LRId) {
                $scope.Id = LRId;
                $scope.ITSection_Delete();
            };
            $scope.rowCollection = [];

            /* THIS IS FOR DELETE PROCEDURE */
            $scope.ITSection_Delete = function () {
                var del = confirm("Do you like to activate the selected IT Section detail?");
                if (del == true) {
                    $http.get(baseUrl + '/api/ITSection/ITSection_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected IT Section detail has been inactivated successfully");
                        $scope.ITSectionListGo();
                        // window.location.href = "/Home/Index#/ITSectionList";
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting records" + data;
                    });
                }
            };

            $scope.ActivateITSection = function (ITID) {
                $scope.Id = ITID;
                $scope.ITSection_Activate();
            };
            /* THIS IS FOR DELETE FUNCTION */
            $scope.ITSection_Activate = function () {
                var del = confirm("Do you like to activate the selected IT Section detail?");
                if (del == true) {
                    $http.get(baseUrl + 'api/ITSection/ITSection_Activate/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected IT Section detail has been activated successfully");
                        $scope.ITSectionListGo($scope.Id = 0);
                        //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Employeedetails" + data;
                    });
                }
            };

            /* THIS IS FOR EDIT PROCEDURE */
            $scope.ViewRedirect = function () {
                $location.path("/ITSectionEdit/" + $scope.Id);
            }
            /* THIS IS FOR LIST PROCEDURE */
            $scope.ListRedirect = function () {
                $location.path("/ITSectionList");
            }

            $scope.CancelView = function () {
                angular.element('#FyConfigurationViewModal').modal('hide');
                $scope.ClearITSectionPopup();
                // $scope.ITSectionListGo();
            }
            $scope.CancelPopup = function () {
                if ($scope.Id > 0) {
                    angular.element('#ITSectionViewModal').modal('hide');
                    $scope.ClearITSectionPopup();
                    $scope.ITSectionListGo();
                }

                angular.element('#ITSectionModal').modal('hide');
                $scope.ClearITSectionPopup();
                // $scope.Company_ListsearchGo();


            }
            $scope.CancelPopupButton = function () {
                angular.element('#ITSectionModal').modal('hide');
                $scope.ClearITSectionPopup();
                $scope.ITSectionListGo();
            }

            /* THIS IS FUNCTION FOR CLOSE POP WINDOW  */
            //$scope.CancelPopup = function () {
            //    angular.element('#ITSectionModal').modal('hide');
            //    angular.element('#ITSectionViewModal').modal('hide');
            //    $scope.ClearITSectionPopup();
            //}
        }
    ]);

    //This is for Fyconfiguration controller functions//
    EmpControllers.controller("FyconfigurationController", ['$scope', '$http', '$routeParams', '$location', '$filter','filterFilter','$window',
        function ($scope, $http, $routeParams, $location, $filter, $ff, $window) {

            // List Page Pagination.
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.rowCollection = [];
            $scope.flag = 0;
            /*THIS IS FOR VALIDATION FUNCTION */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                    alert("Please select Company");
                    return false;
                }
                else if (typeof ($scope.From_MonthName) == "undefined" || $scope.From_MonthName == 0) {
                    alert("Please select From Month");
                    return false;
                }
                else if (typeof ($scope.From_Year) == "undefined" || $scope.From_Year == 0) {
                    alert("Please select From Year");
                    return false;
                }
                else if (typeof ($scope.To_MonthName) == "undefined" || $scope.To_MonthName == 0) {
                    alert("Please select To Month");
                    return false;
                }
                else if (typeof ($scope.To_Year) == "undefined" || $scope.To_Year == 0) {
                    alert("Please select To Year");
                    return false;
                }
                else if (parseInt ($scope.From_MonthName) && (parseInt ($scope.To_MonthName)>12 )) {
                    alert("Please select To Year");
                    return false;
                }
                else if (parseInt($scope.To_Year) < parseInt($scope.From_Year)) {
                    alert("Please select Financial to year greater than Financial From Year");
                    return false;
                }
                return true;
            };

            $scope.Active_ErrorFunction = function () {
                alert("Inactive companies Financial Year configurations cannot be edited");
            };

            $scope.Company_Name = "0";
            $scope.CompanyName = "0";
            $scope.From_MonthName = "0";
            $scope.To_MonthName = "0";
            $scope.From_Year = "0";
            $scope.To_Year = "0";


            /*THIS IS FOR POPUP LIST FUNCTIONS*/

            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                $scope.CompanyMasterModel = data;
                $scope.CompanyMasterModel = $ff(data, { Active: 1 });
            });

            $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
                $scope.MonthDetailsModel = data;

            });
            $http.get(baseUrl + 'api/Common/GetYearList/').success(function (data) {
                $scope.YearDetailsModel = data;
            });


            /*THIS IS FOR VIEW POPUP FUNCTION */

            $scope.AddFyConfigurationPopUP = function (FycId) {
                $scope.Id = FycId;
                // $scope.ViewFyconfigurationDetails();
                $scope.ClearPopup();
            
                angular.element('#FyconfigurationModal').modal('show');
            }

            $scope.ViewFyConfigurationPopUP = function (FycId) {
                $scope.Id = FycId;
                $scope.ViewFyconfigurationDetails();
                angular.element('#FyConfigurationViewModal').modal('show');
            }

            $scope.EditFyConfigurationPopUP = function (FycId) {
                $scope.Id = FycId;
                $scope.ViewFyconfigurationDetails();
                angular.element('#FyconfigurationModal').modal('show');
            }

            $scope.ListFyConfigurationPopUP = function (PFESIId) {

                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.FyconfigurationList();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.FyconfigurationList();
                }
                if (PFESIId > 0) {
                    $scope.Id = PFESIId;
                    $scope.FyconfigurationList($scope.Id);
                }
            };



            /*THIS IS FOR VIEW FUNCTION*/
            $scope.ViewFyconfigurationDetails = function () {

                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }

                $http.get(baseUrl + 'api/FyconfigurationMaster/FyconfigurationDetails_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.CompanyName = data.Company_Id.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.From_MonthName = data.Fy_From_Month_Id.toString();
                    $scope.ViewMonthNameFrom = data.From_MonthName;
                    $scope.From_Year = data.Fy_From_Year_Id.toString();
                    $scope.ViewYearFrom = data.From_Year;
                    $scope.To_MonthName = data.Fy_To_Month_Id.toString();
                    $scope.ViewMonthNameTo = data.To_MonthName;
                    $scope.To_Year = data.Fy_To_Year_Id.toString();
                    $scope.ViewYearTo = data.To_Year;
                }).error(function (data) {

                    $scope.error = "An error has occcurred while viewing Fyconfiguration details!" + data;
                });
            };

            $scope.DeleteFyConfiguration = function (LRId) {
                $scope.Id = LRId;
                $scope.DeleteFyConfigurationDetails();
            };

            /*THIS IS FOR DELETE FUNCTION */
            $scope.DeleteFyConfigurationDetails = function () {
                var del = confirm("Do you like to inactivate the selected Financial Year Configuration details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/FyconfigurationMaster/FyConfiguration_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Financial Year Configuration Details has been Inactivated Successfully");
                        $scope.ListFyConfigurationPopUP($scope.Id = 0);
                        //window.location.href = baseUrl + "/Home/Index#/FYConfigurationList";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting FyConfigurationdetails" + data;
                    });
                }
            };

            $scope.DuplicateId = 0;
            $scope.Id = 0;

            /*THIS IS FOR ADD EDIT  FUNCTION */
            $scope.FyconfigAddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    $http.get(baseUrl + '/api/FyconfigurationMaster/FYConfiguration_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Fy_From_Year_Id=' + $scope.From_Year + '&Fy_To_Year_Id=' + $scope.To_Year + '&Company_Id=' + $scope.CompanyName).success(function (data) {
                        if (data == 1) {
                            alert("Financial Year Configuration for this Company  already exists, cannot duplicate");
                            return false;
                        }
                        else {
                            var obj = {
                                Id: $scope.Id,
                                Company_Id: $scope.CompanyName,
                                Fy_From_Month_Id: $scope.From_MonthName,
                                Fy_From_Year_Id: $scope.From_Year,
                                Fy_To_Month_Id: $scope.To_MonthName,
                                Fy_To_Year_Id: $scope.To_Year,
                            };

                            $http.post(baseUrl + '/api/FyconfigurationMaster/Fyconfiguration_AddEdit/', obj).success(function (data) {
                                $scope.AddId = data;
                                var AddId = data;
                                $scope.ListFyConfigurationPopUP($scope.AddId);
                                angular.element('#FyconfigurationModal').modal('hide');
                           
                                $scope.ClearPopup();
                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding Fyconfiguration details!" + data.ExceptionMessage;
                            });
                        }
                    }).error(function (data) {

                        $scope.error = "Problem in checking Fyconfiguration duplicate!" + data.ExceptionMessage;
                    });
                }
            };

            /*THIS IS FOR LIST FUNCTION */
            $scope.FyconfigurationList = function () {

                $scope.emptydata = [];
                $scope.rowCollection = [];

                $http.get(baseUrl + 'api/FyconfigurationMaster/FyconfigurationDetailList/?Id=' + $scope.Id + '&Company_Id=' + $scope.Company_Name).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };

            /*THIS IS FOR LIST FUNCTION FOR GO BUTTON*/
            $scope.FyconfigurationListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                //$scope.ListFyConfigurationPopUP(ListId);
                $scope.Mode = 1;
                $scope.FyconfigurationList($scope.Id, $scope.Mode);
            };

            /*calling Alert message for cannot edit inactive record function */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            //on click active tool tip calling ReInsert function//
            $scope.ActiveFyconfiguration = function (canId) {
                $scope.Id = canId;
                $scope.ActiveFyconfiguration_Active();
            };


            /* 
             Calling the api method to activate the details of the Resource 
             matching the specified Resource Id,
             and redirected to the list page.
            */
            $scope.ActiveFyconfiguration_Active = function () {
                var Ins = confirm("Do you like to activate the selected financial year configuration?");
                if (Ins == true) {
                    $http.get(baseUrl + '/api/FyconfigurationMaster/FyconfigurationDetails_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected financial year configuration details has been activated successfully");
                        $scope.ListFyConfigurationPopUP($scope.Id = 0);
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting financial year configuration  records" + data;
                    });
                }
            };


            $scope.ViewRedirect = function () {
                //$location.path("/EditEmployee/" + $scope.Id);
                $location.path("/FYConfigurationEdit/" + $scope.Id);
            }

            $scope.ListRedirect = function () {
                $location.path("/FYConfigurationList/");
                //$location.path("/FYConfigurationList/" + $scope.Id);
            }

            $scope.Listrec = function () {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
            };


            $scope.CancelView = function () {
                angular.element('#FyConfigurationViewModal').modal('hide');
                $scope.ClearPopup();
                $scope.FyconfigurationListGo();
            }

            $scope.CancelPopup = function () {
                if ($scope.Id > 0) {
                    angular.element('#FyconfigurationModal').modal('hide');
                    $scope.ClearPopup();
                    $scope.FyconfigurationListGo();
                }

                angular.element('#FyconfigurationModal').modal('hide');
                $scope.ClearPopup();
                //  $scope.Company_ListsearchGo();


            }


            $scope.CancelPopupButton = function () {
                angular.element('#FyconfigurationModal').modal('hide');
                $scope.ClearPopup();
                $scope.FyconfigurationListGo();
            }

            //$scope.CancelPopup = function () {
            //    $scope.ClearPopup();
            //    angular.element('#FyconfigurationModal').modal('hide');
            //    angular.element('#FyConfigurationViewModal').modal('hide');

            //}

            $scope.ClearPopup = function () {

                $scope.CompanyName = "0";
                $scope.From_MonthName = "0";
                $scope.From_Year = "0";
                $scope.To_MonthName = "0";
                $scope.To_Year = "0";
                //$scope.PeriodTo_Date = "0";
            };
        }
    ]);


    //This is for Payrollconfiguration controller functions//
    EmpControllers.controller("PayrollController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window','filterFilter',
    function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {
    
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }
        $scope.listdata = [];

        $scope.rowCollection = [];
        $scope.flag = 0;

        $scope.Company_Name = "0";
        $scope.CompanyName = "0";
        $scope.CompanyId = "0";
        $scope.Id = "0";
        $scope.Financial_FromMonth = "0";
        $scope.Financial_ToMonth = "0";
        $scope.Payroll_FromMonth = "0";
        $scope.Financial_Year_FromYear = "0";
        $scope.Financial_Year_ToYear = "0";
        $scope.Payroll_FromYear = "0";
        $scope.MonthList = [];
        $scope.getYear = [];
        $scope.MonthType =[];

        /*THIS IS FOR VALIDATION FUNCTION */
        $scope.Validationcontrols = function () {
            if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                alert("Please select Company");
                return false;
            }
                //else if (typeof ($scope.Financial_FromMonth) == "undefined" || $scope.Financial_FromMonth == 0) {
                //    alert("Please select Financial From Month");
                //    return false;
                //}
                //else if (typeof ($scope.Financial_Year_FromYear) == "undefined" || $scope.Financial_Year_FromYear == 0) {
                //    alert("Please select Financial From Year");
                //    return false;
                //}
                //else if (typeof ($scope.Financial_ToMonth) == "undefined" || $scope.Financial_ToMonth == 0) {
                //    alert("Please select Financial To Month");
                //    return false;
                //}
                //else if (typeof ($scope.Financial_Year_ToYear) == "undefined" || $scope.Financial_Year_ToYear == 0) {
                //    alert("Please select Financial To Year");
                //    return false;
                //}
            else if (typeof ($scope.Payroll_FromMonth) == "undefined" || $scope.Payroll_FromMonth == 0) {
                alert("Please select Payroll Month");
                return false;
            }
            else if (typeof ($scope.Payroll_FromYear) == "undefined" || $scope.Payroll_FromYear == 0) {
                alert("Please select Payroll Year");
                return false;
            }
            //else if(parseInt($scope.Payroll_FromYear) == parseInt($scope.Financial_Year_ToYear) && (parseInt($scope.Payroll_FromMonth) > parseInt($scope.Financial_ToMonth)  ) ){
            //    alert("Please select Payroll Month Less than Financial To Year");
            //    return false;
            //}
            else if (typeof ($scope.No_of_days < $scope.Month_days) == "undefined" || $scope.No_of_days == "") {
                alert("Please enter No of Days");
                return false;
            }
            //else if (typeof ($scope.EmployeeCount) == "undefined" || $scope.EmployeeCount == "") {
            //    alert("Please enter Employee Count");
            //    return false;
            //}
                //else if (parseInt($scope.Financial_Year_FromYear) > parseInt($scope.Financial_Year_ToYear)) {
                //    alert("Please select Financial To Year greater than Financial Year From Year");
                //    return false;
                //}
       
            else if ($scope.No_of_days > $scope.daysInMonth($scope.Payroll_FromMonth, $scope.Payroll_FromYear,$scope.CompanyName)) {
                alert("No. of days exceeds month limit");
                return false;
            }
            //else if (parseInt($scope.Payroll_FromYear) < parseInt($scope.Financial_Year_FromYear)) {
            //    alert("Please select Financial To Year greater than Payroll Year");
            //    return false;
            //}
            //else if (parseInt($scope.Payroll_FromYear) > parseInt($scope.Financial_Year_ToYear)) {
            //    alert("Please select Financial To Year less than Payroll Year");
            //    return false;
            //}
        
            return true;
        };
        
        $scope.Active_ErrorFunction = function () {
            alert("Inactive companies payroll configurations cannot be edited");
        };

    

 
        /* THIS IS FOR DROPDOWN LIST FUNCTION*/
            $scope.CompanyFilterList = [];
                $scope.CompanyNameList = [];
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.CompanyFilterList = data;
                    // only active company
                    $scope.CompanyNameList = $ff(data, { Active: 1 });
                });

        $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
            $scope.MonthList = data;
        });
        $http.get('/api/Common/GetYearList/').success(function (data) {
            $scope.getYear = data;
        
        });
        $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
            $scope.getFyYear = data;
        });
        $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
            $scope.getFyToYear = data;
        });
        $http.get(baseUrl + 'api/Common/FromTo_Year/').success(function (data) {
            $scope.FromYear = data;
       
        });




        //$scope.populateYearPopulateList = function () {
        //    $http.get(baseUrl + 'api/Common/GetYearList/').success(function (data) {
        //        $scope.getYearList = data;
        //        $scope.getToYearList = data;
        //        $scope.getYear = $ff(data, { Active: 1 });
        //        $scope.getToYear = $ff(data, { Active: 1 });

        //        $scope.FromYear = new Date().getFullYear().toString();

        //        var myDate = new Date();
        //        var nextYear = new Date(myDate);
        //        (myDate.getFullYear() + 1);

        //        $scope.ToYear = (myDate.getFullYear() + 1);

        //        $scope.Financial_Year_FromYear = $.grep($scope.getYear, function (yearitem) {
        //            return yearitem.Year == $scope.FromYear;
        //        })[0].Id.toString();

        //        $scope.Financial_Year_ToYear = $.grep($scope.getYear, function (yearitem) {
        //            return yearitem.Year == $scope.ToYear;
        //        })[0].Id.toString();

        //        console.log($scope.FromYear);
        //        console.log($scope.ToYear);
        //        // $scope.ListLeavePolicyPopup();
        //      //  $scope.LeavePolicy_ListsearchGo();
        //    });
        //}

        //$scope.daysInMonth = function (month,year) 
        //{
        //    angular.forEach($scope.getYear, function (value, index) 
        //    {
        //        console.log($scope.getYear);
        //        return new Date( month, value).getDays();
        //    });
        //};
        //console.log($scope.getYear);

        //$scope.DaysCalculation = function () {
        //    alert("aa");
        
        //    angular.forEach($scope.getYear, function (value, index) {
        //        //console.log(value.MonthDays);
        //        if(value.MonthDays == index.MonthDays)
        //        {
        //            var now =value.MonthDays;
        //            var days = moment(now).daysInMonth();
        //            $scope.MonthList[index] = moment(now).daysInMonth();
                    
        //        }               
        //        console.log(moment(now).daysInMonth());
        //    });
              
        
        //};

    
        /*THIS IS FOR CLEAR POPUP FUNCTION*/
        $scope.ClearPayrollPopup = function () {
            $scope.CompanyName = "0";
            $scope.Financial_FromMonth = "0";
            $scope.Financial_Year_FromYear = "0";
            $scope.Financial_ToMonth = "0";
            $scope.Financial_Year_ToYear = "0";
            $scope.Payroll_FromMonth = "0";
            $scope.Payroll_FromYear = "0";
            $scope.No_of_days = "";
            $scope.EmployeeCount = "";
            $scope.Remarks = "";
           // $scope.MonthName ="";
        };

        $scope.CompanySelection = function()
        {
            $scope.Financial_Year_FromYear = "0";
            $scope.Financial_Year_ToYear = "0";
            $scope.Payroll_FromYear = "0";
        };   

        /*THIS IS FOR VIEW POPUP FUNCTION */
        $scope.AddPayrollPopUP = function (PayId) {
            $scope.Id = PayId;
            //  $scope.ViewPayroll();
            $scope.ClearPayrollPopup();
            angular.element('#PayrollConfigurationModal').modal('show');
            //console.log($scope.MonthList);
            //$scope.DaysCalculation();
        
        }

        $scope.ViewPayrollPopUP = function (PayId) {
            $scope.Id = PayId;
            $scope.ViewPayroll();
            angular.element('#PayrollConfigurationModalView').modal('show');
        }

        $scope.EditPayrollPopUP = function (PayId) {
            $scope.Id = PayId;
            $scope.ViewPayroll();
            angular.element('#PayrollConfigurationModal').modal('show');
        }

        $scope.ListPayrollPopUP = function (PFESIId) {

            if ($routeParams.Id == 0) {
                $scope.rowCollection = [];
            }
            if ($scope.Id == 0 && $scope.Mode == 1) {

                $scope.Payroll_Listsearch();
            }
            else if ($scope.Id > 0 && $scope.Mode == 1) {

                $scope.Payroll_Listsearch();
            }
            if (PFESIId > 0) {
                $scope.Id = PFESIId;
                $scope.Payroll_Listsearch($scope.Id);
                // angular.element('#PFandESIModel').modal('show');
            }
        }

        /*THIS IS FOR VIEW FUNCTION*/
        $scope.ViewPayroll = function () {
            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
                $scope.DuplicateId = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/PayrollConfiguration/PayrollConfiguration_View/?Id=' + $scope.Id).success(function (data) {
                $scope.DuplicateId = data.Id;
                $scope.CompanyName = data.CompanyId.toString();
                $scope.listCompanyName = data.CompanyName;
                //$scope.Financial_FromMonth = data.Financial_Year_FromMonth_Id.toString();
                //$scope.listFinancial_FromMonth = data.Financial_FromMonth;
                //$scope.Financial_Year_FromYear = data.Financial_Year_FromYear_Id.toString();
                //$scope.listFinancial_Year_FromYear = data.Financial_Year_FromYear;
                //$scope.Financial_ToMonth = data.Financial_Year_ToMonth_Id.toString();
                //$scope.listFinancial_ToMonth = data.Financial_ToMonth;
                ////$scope.Financial_ToMonth = data.Financial_ToMonth;
                //$scope.Financial_Year_ToYear = data.Financial_Year_ToYear_Id.toString();
                //$scope.listFinancial_Year_ToYear = data.Financial_Year_ToYear;
                $scope.Payroll_FromMonth = data.Payroll_FromMonth_Id.toString();
                $scope.listPayroll_FromMonth = data.Payroll_FromMonth;
                $scope.Payroll_FromYear = data.Payroll_FromYear_Id.toString();
                $scope.listPayroll_FromYear = data.Payroll_FromYear;
                $scope.No_of_days = data.No_of_days;
                $scope.EmployeeCount = data.EmployeeCount;
                $scope.Remarks = data.Remarks;
                $scope.Stauts = data.CommonStatus_Id.toString();
                $scope.listStauts = data.Stauts;

            }).error(function (data) {
                $scope.error = "AN error has occured while list Countryname!" + data;
            });
        };


    

        $scope.DeletePayroleconfiguration = function (LRId) {
            $scope.Id = LRId;
            $scope.Payroll_Delete();
        };

        /*THIS IS FOR DELETE FUNCTION */
        $scope.Payroll_Delete = function () {
            var del = confirm("Do you like to inactivate the selected payroll configuration details?");
            if (del == true) {
                $http.get(baseUrl + 'api/PayrollConfiguration/PayrollConfiguration_Delete/?Id=' + $scope.Id).success(function (data) {
                    alert("Payroll Configuration Details inactivated Successfully");
                    // window.location.href = baseUrl + "/Home/Index#/PayrollConfigurationList";
                    $scope.Payroll_Listsearchgo($scope.Id = 0);
                }).error(function (data) {
                    $scope.error = "An error has occurred while inactivated PayrollConfiguration details" + data;
                });
            }
        };



        /*THIS IS FOR LIST FUNCTION */
        $scope.Payroll_Listsearch = function () {
            $scope.emptydata = [];
            $scope.rowCollection = [];

            $http.get(baseUrl + '/api/PayrollConfiguration/PayrollConfiguration_List/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name).success(function (data) {

                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }
            }).error(function (data) {
                $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
            });

        };

        /*THIS IS FOR LIST FUNCTION FOR GO BUTTON*/
        $scope.Payroll_Listsearchgo = function () {
            $scope.Id = 0;
            var ListId = $scope.Id;
            $scope.Mode = 1;
            $scope.Payroll_Listsearch($scope.Id, $scope.Mode);
            //$scope.ListPayrollPopUP(ListId);
        };

        /*calling Alert message for cannot edit inactive record function */
        $scope.ErrorFunction = function () {
            alert("Inactive record cannot be edited");
        };

        //on click active tool tip calling ReInsert function//
        $scope.ActivePayrollconfiguration = function (canId) {
            $scope.Id = canId;
            $scope.Payrollconfiguration_Active();
        };

        /* 
            Calling the api method to activate the details of the Resource 
            matching the specified Resource Id,
            and redirected to the list page.
           */
        $scope.Payrollconfiguration_Active = function () {
            var Ins = confirm("Do you like to activate the selected Payroll configuration?");
            if (Ins == true) {
                $http.get(baseUrl + '/api/PayrollConfiguration/PayrollConfigurationDetails_Active/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected Payroll Configuration details has been activated successfully");
                    $scope.ListPayrollPopUP($scope.Id = 0);
                }).error(function (data) {
                    $scope.error = "AN error has occured while deleting financial year configuration  records" + data;
                });
            }
        };

        $scope.Id=0;
        $scope.DuplicateId = 0;
        $scope.Financial_FromMonth =0;
        $scope.Financial_Year_FromYear =0;
        $scope.Financial_ToMonth =0;
        $scope.Financial_Year_ToYear =0;
   
        //$scope.CompanyName ="";
        /*THIS IS FOR ADD FUNCTION */
        $scope.Payroll_AddEdit = function () {
            $scope.Stauts ='3'
            if ($scope.Validationcontrols() == true) {
                $http.get(baseUrl + '/api/PayrollConfiguration/PayrollConfiguration_DuplicateCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName+ '&PayrollmonthId=' + $scope.Payroll_FromMonth+ '&PayrollyearId=' + $scope.Payroll_FromYear).success(function (data) {
                 
                    if (data == 1) {
                        alert("Payroll Configuration for this Company already exists, cannot duplicate");
                        return false;
                    }
                    else if (data == 3)
                    {
                        alert("Payroll Month and Payroll Year for this Company is not asssigned in Fy Configuration Details");
                        return false;
                    }
                    else {
                        var obj = {
                            Id: $scope.Id,
                            CompanyId: $scope.CompanyName,
                            //Financial_Year_FromMonth_Id: $scope.Financial_FromMonth,
                            //Financial_Year_FromYear_Id: $scope.Financial_Year_FromYear,
                            //Financial_Year_ToMonth_Id: $scope.Financial_ToMonth,
                            //Financial_Year_ToYear_Id: $scope.Financial_Year_ToYear,      
                            Payroll_FromMonth_Id: $scope.Payroll_FromMonth,
                            Payroll_FromYear_Id: $scope.Payroll_FromYear,
                            No_of_days: $scope.No_of_days,
                            EmployeeCount: $scope.EmployeeCount =0,
                            Remarks: $scope.Remarks,
                            CommonStatus_Id: $scope.Stauts,
                        };                    

                        $http.post(baseUrl + '/api/PayrollConfiguration/PayrollConfiguration_AddEdit/', obj).success(function (data) {
                                    
                            $scope.AddId = data;
                            var AddId = data;
                            $scope.ListPayrollPopUP($scope.AddId);
                            angular.element('#PayrollConfigurationModal').modal('hide');
                            // $scope.CancelPopup();
                            $scope.ClearPayrollPopup();


                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                        });
                    }})
            }
        };
    

        $scope.ViewRedirect = function () {
            //$location.path("/EditCompany/" + $scope.Id);
            $location.path("/EditPayroll/" + $scope.Id);
        }
        $scope.ListRedirect = function () {
            //$location.path("/ListCompany");
            $location.path("/PayrollConfigurationList" + $scope.Id);
        }

        $scope.CancelView = function () {
            angular.element('#PayrollConfigurationModalView').modal('hide');
            $scope.ClearPayrollPopup();
            $scope.Payroll_Listsearchgo();
        }

        $scope.Listrec = function () {
            if ($routeParams.Id == 0) {
                $scope.rowCollection = [];
            }
        };

        $scope.CancelPopup = function () {
            if ($scope.Id > 0) {
                angular.element('#PayrollConfigurationModal').modal('hide');
                $scope.ClearPayrollPopup();
                $scope.Payroll_Listsearchgo();
            }

            angular.element('#PayrollConfigurationModal').modal('hide');
            $scope.ClearPayrollPopup();
            //  $scope.Company_ListsearchGo();
        }

        $scope.CancelPopupButton = function () {
            angular.element('#PayrollConfigurationModal').modal('hide');
            $scope.ClearPopup();
            $scope.Payroll_Listsearchgo();
        }
           
        $scope.daysInMonth = function (months,years,CompanyName) 
        { 
            $http.get(baseUrl + '/api/PayrollConfiguration/GetMonthsFrom_Company/?CompanyId=' + $scope.CompanyName).success(function (data) {   
           
                $scope.MonthName = data.Month_Name;  
                // $scope.No_of_days = data.Salary_Calculation_Months; 
            
                if ($scope.MonthName == 'Fixed Average Days')
                {               
                    $scope.No_of_days = data.Salary_Calculation_Months; 
               
                }
                else{  
                
                    if($scope.Payroll_FromMonth == 0)
                    {                  
                        $scope.No_of_days = '';
                    }
                    else
                    {
                        days = (new Date(years, months, 0).getDate());
                        $scope.No_of_days = days;
                        lastday = (new Date(years, months-1, 0).getDate());
                       
                    }
                }        
        
            }); 
        }   
    }
    ]);


    //This is for Loss Of Pay controller functions //
    EmpControllers.controller("LOPController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {

                //This is for Value Initialization //

                $scope.Id = "0";
                $scope.EmployeeName = "0";
                $scope.Company_Name = "0";
                $scope.EmployeeId = "0";
                $scope.PeriodMonth = "0";
                $scope.PeriodYear = "0";
                $scope.Period_Month = "0";
                $scope.Period_Year = "0";
                $scope.CompanyName = 0;
                $scope.Period_Month = 0;
                $scope.Employee_Id = 0;
                $scope.Id = 0;
                $scope.CompanyName = "0";
                $scope.Period_Month = "0";
                //$scope.EmployeeList = [];
                $scope.Employee_Id = "0";

                $scope.Period_ToMonth ="0";
                $scope.Period_ToYear ="0";

                // List Page Pagination.
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }
              //  $scope.rowCollection = [];
  
                $scope.listdata = [];
            
            
                /* on click Go calling the list function.*/
                $scope.LOP_Listsearchgo = function () {              
                    $scope.Id = 0;
                    // var ListId = $scope.Id;
                    $scope.Mode = 1;
                    $scope.LOP_Listsearch($scope.Id, $scope.Mode);
                   // $scope.ListLOPPopUP($scope.Id);
                };
          

                $scope.flag = 0;
                $scope.LOP_Listsearch = function () {   
               
                    $scope.emptydata=[];
                    $scope.rowCollection=[];
                    var EmpName = '';
                    if ($scope.EmployeeSelected != undefined) {                   
                        EmpName = $scope.EmployeeSelected.originalObject.Id;
                    };
                  
                    $http.get(baseUrl + 'api/LossOfPayDetails/LOPDetails_List/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&Employee_Id=' + EmpName + '&PeriodMonth_Id=' + $scope.Period_Month + '&PeriodYear_Id=' + $scope.Period_Year).success(function (data) {
                   
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting Loss of Pay Details" + data;
                    });
                };

                /* THIS IS FOR VALIDATION FUNCTION */
                $scope.Validationcontrols = function () {
                    if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                        alert("Please select Company");
                        return false;
                    }
                    else if (typeof ($scope.NameList) == "undefined" || $scope.Employee_Selected == undefined) {
                        alert("Please enter Employee ");
                        return false;
                    }
                  
                    else if (typeof ($scope.PeriodMonth) == "undefined" || $scope.PeriodMonth == 0) {
                        alert("Please select Period From Month");
                        return false;
                    }
                    else if (typeof ($scope.PeriodYear) == "undefined" || $scope.PeriodYear == 0) {
                        alert("Please select Period From Year");
                        return false;
                    }
                    else if (typeof ($scope.Period_ToMonth) == "undefined" || $scope.Period_ToMonth == 0) {
                        alert("Please select Period To Month");
                        return false;
                    }
                    else if (typeof ($scope.Period_ToYear) == "undefined" || $scope.Period_ToYear == 0) {
                        alert("Please select Period To Year");
                        return false;
                    }
                    else if (typeof ($scope.No_of_days) == "undefined" || $scope.No_of_days == 0) {
                        alert("Please enter No. of Days");
                        return false;
                    }
                    return true;
                };


                $scope.Active_ErrorFunction = function () {
                    alert("Inactive companies payroll configurations cannot be edited");
                };

                /* THIS IS FOR DROPDOWN FUNCTION */
                $scope.getFyYear = [];
                $http.get(baseUrl + 'api/Common/GetYearList/').success(function (data) {
                    $scope.getYear = data;
                });
                $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
                    $scope.getFyYear = data;
                });
                /* COMPANY NAME */
                $scope.CompanyFilterList = [];
                $scope.CompanyNameList = [];
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.CompanyFilterList = data;
                    // only active company
                    $scope.CompanyNameList = $ff(data, { Active: 1 });
                });

                $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
                    $scope.MonthList = data;
                });
                $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                    $scope.getFyToYear = data;
                });
                $http.get(baseUrl + 'api/Common/FromTo_Year/').success(function (data) {
                    $scope.FromYear = data;
                });

                /* THIS IS FOR VALIDATION FUNCTION */
                /* Showing alert when inactive record is try to edit in the list page */
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }

                // This is function for View & Edit POP UP //
                $scope.AddLOPPopUP = function (LOPId) {
                    $scope.Id = LOPId;
                    // $scope.ViewLOP();
                    angular.element('#LossOfPayModel').modal('show');
                }

                $scope.ViewLOPPopUP = function (LOPId) {
                    $scope.Id = LOPId;
                    $scope.ViewLOP();
                    angular.element('#LossOfPayModelView').modal('show');
                }

                $scope.EditLOPPopUP = function (LOPId) {
                    $scope.Id = LOPId;
                    $scope.ViewLOP();
                    angular.element('#LossOfPayModel').modal('show');
                }

                $scope.ListLOPPopUP = function (LPId) {
            
                    $scope.Id = LPId;
                    $scope.LOP_Listsearch($scope.Id);                
                }
        
                //$scope.ListLOPPopUP = function (LOPId) {    
                
                //    if ($routeParams.Id == 0) {
                //        $scope.rowCollection = [];
                //    }
                //    if ($scope.Id == 0 && $scope.Mode == 1) {

                //        $scope.LOP_Listsearch();
                //    }
                //    else if ($scope.Id > 0 && $scope.Mode == 1) {                 
                //        $scope.LOP_Listsearch();
                //    }
                //    if (LOPId > 0) {
                //        $scope.Id = LOPId;
                //        $scope.LOP_Listsearch();
                //    }
                //}

                $scope.ViewLOP = function () {
                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                        $scope.DuplicateId = $routeParams.Id;
                    }
                    $http.get(baseUrl + 'api/LossOfPayDetails/LOPDetails_View/?Id=' + $scope.Id).success(function (data) {
                        $scope.MasterId=data.Id;
                        $scope.DuplicateId = data.Id;
                        $scope.CompanyName = data.CompanyId.toString();
                        $scope.listCompanyName = data.CompanyName;
                        $scope.Employee_Id = data.Employee_Id;
                        $scope.Employee_No = data.Employee_No;
                        $scope.Employee_Name = data.Employee_Name;
                        $scope.PeriodMonth = data.PeriodMonth_Id.toString();
                        $scope.listPeriodMonth = data.PeriodMonth;
                        $scope.PeriodYear = data.PeriodYear_Id.toString();
                        $scope.ViewPeriodYear = data.PeriodYear;
                        $scope.No_of_days = data.No_of_days;
                        $scope.Remarks = data.Remarks;

                        $scope.Period_ToMonth = data.Period_ToMonth_Id.toString();
                        $scope.listPeriod_ToMonth = data.Period_ToMonth;
                        $scope.Period_ToYear = data.Period_ToYear_Id.toString();
                        $scope.listPeriod_ToYear = data.Period_ToYear;

                      //  $scope.Employeelist();
                        var sel = {
                            Id: data.Employee_Id,
                            FullName: data.FullName,
                            FullNamelist: data.FullNamelist
                        };
                        $scope.DisplayFullName = sel;
                        $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                        $scope.CompanyInactiveFlag = 0;
                        if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                            $scope.CompanyInactiveFlag = 1;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while list LOPDetails!" + data;
                    });
                };

                $scope.DeleteLOP = function (LId) {
                    $scope.Id = LId;
                    $scope.LOP_Delete();
                };

                //  $scope.Id = 0;
                /* THIS IS FOR DELETE FUNCTION */
                $scope.LOP_Delete = function () {
                    var del = confirm("Do you like to inactivate the selected Loss of pay detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/LossOfPayDetails/LOPDetails_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Loss of pay detail has been inactivated successfully");
                            $scope.LOP_Listsearchgo();
                            // window.location.href = baseUrl + "/Home/Index#/LossofPayList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting LOP details" + data;
                        });
                    }
                };

                $scope.ActivateLOP = function (LOPID) {
                    $scope.Id = LOPID;
                    $scope.LOP_Activate();
                };

                /* THIS IS FOR DELETE FUNCTION */
                $scope.LOP_Activate = function () {
                    var del = confirm("Do you like to activate the selected Loss of pay detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/LossOfPayDetails/LOPDetails_Activate/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Loss of pay detail has been activated successfully");
                            $scope.LOP_Listsearchgo($scope.Id = 0);
                            //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Employeedetails" + data;
                        });
                    }
                };

          

                /* Clear the create page scope Employee variable values. */
                $scope.ClearEmployee = function () {
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                    $scope.Employee_No = "";
                };
             
                $scope.DuplicateId =0;
                $scope.CompanyName=0;
                $scope.PeriodMonth =0;
                $scope.PeriodYear =0;
                $scope.Period_ToMonth =0;
                $scope.Period_ToYear =0;

                /* THIS IS FOR ADD EDIT FUNCTION */
                $scope.LOP_AddEdit = function () {
                    if ($scope.Validationcontrols() == true) {

                        $http.get(baseUrl + '/api/LossOfPayDetails/LOP_DuplicateCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName+ '&Employee_Id='+$scope.Employee_Id + '&PeriodMonth=' + $scope.PeriodMonth+ '&PeriodYear=' + $scope.PeriodYear + '&Period_ToMonth=' + $scope.Period_ToMonth+ '&Period_ToYear=' + $scope.Period_ToYear).success(function (data) {
                  
                            if (data == 1) {
                                alert("Loss Of Pay Details for this Company already exists, cannot duplicate");
                                return false;
                            }
                            else {
                                if ($scope.Employee_Selected != undefined) {
                                    $scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                                }
                                var obj = {
                                    Id: $scope.Id,
                                    CompanyId: $scope.CompanyName,
                                    Employee_Id: $scope.Employee_Id,
                                    PeriodMonth_Id: $scope.PeriodMonth,
                                    PeriodYear_Id: $scope.PeriodYear,
                                    No_of_days: $scope.No_of_days,
                                    Remarks: $scope.Remarks,
                                    Period_ToMonth_Id: $scope.Period_ToMonth,
                                    Period_ToYear_Id: $scope.Period_ToYear
                                };
                                $http.post(baseUrl + '/api/LossOfPayDetails/LOPDetails_AddEdit/', obj).success(function (data) {
                                    $scope.AddId = data;
                                    var AddId = data;
                                    $scope.MasterId = data;                                  
                               
                                    $scope.ListLOPPopUP($scope.MasterId);
                                
                                    angular.element('#LossOfPayModel').modal('hide');
                                    $scope.ClearLOPPopup();
                              
                                    // $scope.CancelPopup();
                                    // $scope.ClearLOPPopup();
                                }).error(function (data) {
                                    $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                                });
                            }
                        });
                    };

                };
            

                ///*THIS IS FOR LIST FUNCTION FOR GO BUTTON*/
                //$scope.FyconfigurationListGo = function () {
                //    $scope.Id = 0;
                //    var ListId = $scope.Id;
                //    $scope.ListFyConfigurationPopUP(ListId);
                //    $scope.Mode = 1;
                //    $scope.FyconfigurationList($scope.Id, $scope.Mode);
                //};

                /* THIS IS FOR LIST FUNCTION */
                //  $scope.emptydata = [];
                //  $scope.rowCollection = [];
               
              

                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.Employeelist = function () {
               
                    //if ($scope.NamefilterList != undefined) 
                    {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+$scope.CompanyName + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });
                          
                        });                        
                  
                    }
                };

                /* To show the employee code at the time of employee selection */
                $scope.EmployeeNameList = function () {
                    var EmployeeNo = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                            $scope.Employee_No = data.Employee_No;

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    };
                };



                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $scope.Employeefilteredlist = function () {
                    // $scope.autocompleteclear();
                    if ($scope.Autolist != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.Autolist = [];
                        $scope.Autofilterlist = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.Autofilterlist = data;
                            $scope.Autolist = data;
                        });
                    }
                }
                /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
                $scope.Autocompletefilter = function () {
                    if ($scope.IsActive == 1) {

                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                    }
                    else if ($scope.IsActive == 0) {
                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                    }
                    else if ($scope.IsActive == -1) {
                        $scope.Autolist = [];
                        $scope.Autolist = $scope.Autofilterlist;
                    }
                };


                $scope.ViewRedirect = function () {
                    $location.path("/EditLOP/" + $scope.Id);
                }
               
                /* THIS IS FOR CLEAR POPUP FUNCTION */
                $scope.ClearLOPPopup = function () {

                    $scope.CompanyName = "0";
                   // $scope.Id = "0";
                    $scope.Employee_No = "0";
                    $scope.FullName = "0";
                    $scope.PeriodMonth = "0";
                    $scope.PeriodYear = "0";
                    $scope.No_of_days = "";
                    $scope.Remarks = "";
                    $scope.Employee_No = "";
                    $scope.Employee_Name = "";
                    $scope.Period_ToMonth ="0";
                    $scope.Period_ToYear ="0";
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                };


                //$scope.rowCollection = [];
                $scope.CancelViewLOP = function () {
                    angular.element('#LossOfPayModelView').modal('hide');
                    $scope.ClearLOPPopup();
                                   
                    // $scope.LOP_Listsearchgo();
                };
                $scope.CancelPopup = function () {  
                    $scope.ClearLOPPopup();
                    angular.element('#LossOfPayModel').modal('hide');                   
                    //  $scope.Company_ListsearchGo();
                }                             


            }
    ]);

    //This is for Password Policy Controller functions//
    EmpControllers.controller("PasswordPolicyController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $rootScope, $timeout) {

            $scope.Id = 0;

          /* 
          Validating the create page mandatory fields
          checking mandatory for the follwing fields
          MinLength,MaxLength,ExpiryPeriod,MaxLength and MinLength
          and showing alert message when it is null.
          */
            $scope.Validationcontrols = function () {
         
                if (typeof ($scope.MinLength) == "undefined" || $scope.MinLength == "") {
                    alert("Please enter Minimum Length");
                    return false;
                }
                else if (typeof ($scope.MaxLength) == "undefined" || $scope.MaxLength == "") {
                    alert("Please enter Maximum Length");
                    return false;
                }
                else if (typeof ($scope.ExpiryPeriod) == "undefined" || $scope.ExpiryPeriod == "" && $scope.AllowExpiryDays != 1) {
                    alert("Please enter Password Never Expiry");
                    return false;
                }
                else if (parseInt($scope.MaxLength) < parseInt($scope.MinLength)) {
                    alert("Please enter Maximum Length greater than Minimum Length");
                    return false;
                }
                return true;
            };

            /*calling Use rname policy function */
            $scope.CallUserNamePolicy =function()
            {          
                $location.path("/EditUserNamePolicy/0");
            }


            $scope.ClearPasswordExpiryperiod = function ()
            {
                $scope.ExpiryPeriod = "";
                $scope.Expiry = "";
            }
        
            /*Clear the scope variables values*/
            $scope.ClearFields = function () {
                $scope.MinLength = "";
                $scope.MaxLength = "";
                $scope.MinOneSpecChar = "";
                $scope.WithoutChar = "";
                $scope.ExpiryPeriod = "";
                $scope.Expiry = "";
                $scope.ResetRestriction = "";
                $scope.RestrictPwd = "";
                $scope.MinLoginTime = "";
                $scope.MinLoginHours = "";
                $scope.AllowUserName = "";
                $scope.MinOneNumChar = "";
                $scope.AllowExpiryDays = "";
                // $scope.PasswordPolicy_AddEdit();
                // alert("ok");
            };

        /*
        Calling the api method to view the details of the password policy
        for the password policy Id 
        and display the details in the view pop up window.
        */
            $scope.PasswordPolicy_ViewEdit = function () {
                // if ($routeParams.Id != undefined) {
                //  $scope.Id = $routeParams.Id;
                $http.get(baseUrl + 'api/PasswordPolicy/ViewEditPasswordPolicy/?Id=' + $scope.Id).success(function (data) {
                    $scope.Id = data.Id;
                    $scope.MinLength = data.MinLength;
                    $scope.MaxLength = data.MaxLength;
                    $scope.MinOneNumChar = data.MinOneNumChar;
                    $scope.MinOneSpecChar = data.MinOneSpecChar;
                    $scope.WithoutChar = data.WithoutChar;
                    $scope.ExpiryPeriod = data.ExpiryPeriod;
                    $scope.Expiry = data.Expiry;
                    $scope.ResetRestriction = data.ResetRestriction;
                    $scope.RestrictPwd = data.RestrictPwd;
                    $scope.MinLoginTime = data.MinLoginTime;
                    $scope.MinLoginHours = data.MinLoginHours;
                    $scope.AllowUserName = data.AllowUserName;
                    $scope.AtleastOneUpperCase = data.AtleastOneUpperCase;
                    $scope.MinLoginMins = data.MinLoginMins;
                    $scope.AllowExpiryDays = data.AllowExpiryDays;
                }).error(function (data) {
                    $scope.error = "An error has occcurred while editing Password Policy Details!" + data;
                });
                // }
            };


            $scope.loading = false;

            /*
            Call the api method for insert and Update the record for a password policy
            and display the record of selected password policy when Id is greater than 0
            in edit.html and provide an option for create and modify the password policy and save the password policy record
            */
            $scope.PasswordPolicy_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    var obj = {
                        Id: $scope.Id,
                        MinLength: $scope.MinLength,
                        MaxLength: $scope.MaxLength,
                        MinOneNumChar: $scope.MinOneNumChar == 0 ? null : $scope.MinOneNumChar,
                        MinOneSpecChar: $scope.MinOneSpecChar == 0 ? null : $scope.MinOneSpecChar,
                        WithoutChar: $scope.WithoutChar == "" ? null : $scope.WithoutChar,
                        ExpiryPeriod: $scope.ExpiryPeriod == 0 ? null : $scope.ExpiryPeriod,
                        Expiry: $scope.Expiry == 0 ? null : $scope.Expiry,
                        ResetRestriction: $scope.ResetRestriction == "" ? null : $scope.ResetRestriction,
                        RestrictPwd: $scope.RestrictPwd == "" ? null : $scope.RestrictPwd,
                        MinLoginTime: $scope.MinLoginTime == "" ? null : $scope.MinLoginTime,
                        MinLoginHours: $scope.MinLoginHours == "" ? null : $scope.MinLoginHours,
                        AllowUserName: $scope.AllowUserName == 0 ? null : $scope.AllowUserName,
                        AtleastOneUpperCase: $scope.AtleastOneUpperCase == 0 ? null : $scope.AtleastOneUpperCase,
                        MinLoginMins: $scope.MinLoginMins == "" ? null : $scope.MinLoginMins,
                        AllowExpiryDays: $scope.AllowExpiryDays == 0 ? null : $scope.AllowExpiryDays
                    };

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 second

                    $http.post(baseUrl + '/api/PasswordPolicy/PasswordPolicy_AddEdit/', obj).success(function (data) {
                        alert("Saved Successfully");
                        $location.path("/EditPasswordPolicy/" + data);

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Password Policy Details!" + data.ExceptionMessage;
                    });
          

                $scope.ListRedirect = function () {
                    $location.path("/CreatePasswordPolicy");
                }
                };
            }
        }
    ]);

    //This is for Gratuity Controller functions//
    EmpControllers.controller("GratuityController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {

                $scope.Id = "0";
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }
                $scope.listdata = [];

                /*THIS IS FOR VALIDATION FUNCTION */
                $scope.Validationcontrols = function () {
                    if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                        alert("Please select Company");
                        return false;
                    }
                    else if (typeof ($scope.NameList) == "undefined" || $scope.Employee_Selected == undefined) {
                        alert("Please enter Employee");
                        return false;
                    }
                        //else if (typeof ($scope.Arrear_amt) == "undefined" || $scope.Arrear_amt == "") {
                        //    alert("Please enter Arrear Amount");
                        //    return false;
                        //}
                    else if (typeof ($scope.Non_tax_amt) == "undefined" || $scope.Non_tax_amt == "") {
                        alert("Please enter Non Tax Amount");
                        return false;
                    }
                    else if (typeof ($scope.GratuityAmount) == "undefined" || $scope.Non_tax_amt == "") {
                        alert("Please enter Gratuity Amount");
                        return false;
                    }
                    else if (parseFloat($scope.GratuityAmount) > parseFloat($scope.Non_tax_amt)) {
                        alert("Gratuity Amount " + $scope.GratuityAmount +" is grater than Non Taxable Limit " + $scope.Non_tax_amt);
                        return false;
                    }
                    return true;
                };



                //$scope.EmpWorking = function () { 
                
                //    if ($scope.Company_Name != 0) {
                //        var Name = '';
                //        if ($scope.Employee_Selected != undefined) {
                //            $scope.Name = $scope.Employee_Selected.originalObject.Id;
                   
                //            $http.get(baseUrl + '/api/Common/EmployeeSelectionDetailsList/?Id=' + $scope.Name).success(function (data) {
                //                // $scope.Employee_No = data.Employee_No;
                //                $scope.Company_Name = data.Company_Name;
                //                //$scope.Location_Name = data.Location_Name;
                //                //$scope.Department_Name = data.Department_Name;
                //                // $scope.Designation_Name = data.Designation_Name;

                //                $scope.CompanyFilterList = [];
                //                $scope.CompanyNameList = [];
                //                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                //                    // all company records list including active and inactive 
                //                    // used for list page DD and inactive records filtering
                //                    $scope.CompanyFilterList = data;
                //                    // only active company
                //                    $scope.CompanyNameList = $ff(data, { Active: 0 });
                //                    angular.forEach($scope.CompanyNameList, function (value, index) {
                //                        if (($scope.Company_Name == value.Id)) {
                //                            $scope.Company_Name = "0";
                //                        }
                //                    });
                //                });                        
                //            })
                //        }
                //    }
                //}
                    
                //else {
                //    $scope.EmployeeNameList();
                //}
           

                /* COMPANY NAME */
                $scope.CompanyFilterList = [];
                $scope.CompanyNameList = [];
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.CompanyFilterList = data;
                    // only active company
                    $scope.CompanyNameList = $ff(data, { Active: 1 });
                           
                });


                $scope.Employeefiltercompany = function()
                {  
                    $http.get(baseUrl + 'api/Common/Companyemployeefilter/?CompanyId=' + $scope.CompanyName).success(function (data) {
                              
                    });
                };

                $scope.CompanyName = "0";
                $scope.Company_Name = "0";
                $scope.EmployeeName = '';
                /*THIS IS FOR VIEW FUNCITON */
                $scope.AddGratuityPopUP = function (GratuityId) {
                    $scope.Id = GratuityId;
                    //  $scope.ViewGratuityDetails();
                    angular.element('#GratuityModal').modal('show');
                }
                $scope.ViewGratuityPopUP = function (GratuityId) {
                    $scope.Id = GratuityId;
                    $scope.ViewGratuityDetails();
                    angular.element('#GratuityViewModal').modal('show');
                }
                $scope.EditGratuityPopUP = function (GratuityId) {
                    $scope.Id = GratuityId;
                    $scope.ViewGratuityDetails();
                    angular.element('#GratuityModal').modal('show');
                }
                $scope.ListGratuityPopUP = function (GratuityId) {
                    if ($routeParams.Id == 0) {
                        $scope.rowCollection = [];
                    }
                    if ($scope.Id == 0 && $scope.Mode == 1) {

                        $scope.GratuityList();
                    }
                    else if ($scope.Id > 0 && $scope.Mode == 1) {

                        $scope.GratuityList();
                    }
                    if (GratuityId > 0) {
                        $scope.Id = GratuityId;
                        $scope.GratuityList();
                    }
                }

                $scope.ViewGratuityDetails = function () {
                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                    }
                    $http.get(baseUrl + 'api/Gratuity/GratuityDetails_View/?Id=' + $scope.Id).success(function (data) {
                                 
                        $scope.CompanyName = data.Company_Id.toString();
                        $scope.ViewCompanyName = data.CompanyName;
                        $scope.Employee_Id = data.Employee_Id;
                        $scope.Employee_No = data.Employee_No;
                        $scope.Employee_Name = data.Employee_Name;
                        //$scope.Arrear_amt = data.Arrear_amt;
                        $scope.Non_tax_amt = data.Non_tax_amt;
                        $scope.Remarks = data.Remarks;
                        $scope.FullNamelist = data.FullNamelist;
                        $scope.GratuityAmount = data.GratuityAmount;
                        $scope.No_of_Years = data.No_of_Years;
                        $scope.Date_Of_Joining = $filter('date')(data.Date_Of_Joining, "dd-MMM-yyyy"),
                        $scope.Employeelist();


                        var sel = {
                            Id: data.Employee_Id,
                            FullName: data.FullName,
                            FullNamelist: data.FullNamelist,
                            Date_Of_Joining : $filter('date')(data.Date_Of_Joining, "dd-MMM-yyyy"),
                            No_of_Years : data.No_of_Years
                        };
                                  
                        $scope.DisplayFullName = sel;
                        $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);

                        //var sel1 = {
                        //    Id: data.Employee_Id,
                        //    Date_Of_Joining : $filter('date')(data.Date_Of_Joining, "dd-MMM-yyyy"),
                        //    No_of_Years : data.No_of_Years
                        //};
                        //$scope.DisplayFullName1 = sel1;
                        //$scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel1);


                        $scope.CompanyInactiveFlag = 0;
                        if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                            $scope.CompanyInactiveFlag = 1;
                        }
                    }).error(function (data) {

                        $scope.error = "An error has occcurred while viewing Gratuity details!" + data;
                    });
                };

                $scope.DeleteGratuity = function (LRId) {
                    $scope.Id = LRId;
                    $scope.DeleteGratuityDetails();
                };


                /*THIS IS FOR DELETE FUNCITON */
                $scope.DeleteGratuityDetails = function () {
                    var del = confirm("Do you like to inactivate the selected Gratuity Details detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/Gratuity/GratuityDetails_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Gratuity detail has been inactivated successfully");
                            $scope.GratuityListGo();
                            //window.location.href = baseUrl + "/Home/Index#/GratuityList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Gratuitydetails" + data;
                        });
                    }
                };


                $scope.ActivateGratuityDetails = function (LOPID) {
                    $scope.Id = LOPID;
                    $scope.GratuityDetails_Activate();
                };
                /* THIS IS FOR DELETE FUNCTION */
                $scope.GratuityDetails_Activate = function () {
                    var del = confirm("Do you like to activate the selected Gratuity Details detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/Gratuity/GratuityDetails_Activate/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Gratuity detail has been activated successfully");
                            $scope.GratuityListGo($scope.Id = 0);
                            //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Employeedetails" + data;
                        });
                    }
                };


                /*calling Alert function for cannot edit inactive record */
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }


                $scope.ClearGratuityPopup = function () {
                    $scope.CompanyName = "0";
                    $scope.Employee_Id = "";
                    $scope.Arrear_amt = "";
                    $scope.Non_tax_amt = "";
                    $scope.Remarks = "";
                    $scope.Employee_No = "";
                    $scope.Employee_Name = "";
                    $scope.GratuityAmount ="";
                    $scope.Date_Of_Joining ="";
                    $scope.No_of_Years ="";
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                };

                /* Clear the create page scope Employee variable values. */
                $scope.ClearEmployee = function () {
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                    $scope.Employee_No = "";
                    $scope.Date_Of_Joining ="";
                    $scope.No_of_Years ="";
                };
                /*THIS IS FOR ADD EDIT FUNCITON */
                $scope.GratuityAddEdit = function () {
                    if ($scope.Validationcontrols() == true) {
                        if ($scope.Employee_Selected != undefined) {
                            $scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                        }
                        var obj = {
                            Id: $scope.Id,
                            Company_Id: $scope.CompanyName,
                            Employee_Id: $scope.Employee_Id,
                            // Arrear_amt: $scope.Arrear_amt,
                            Non_tax_amt: $scope.Non_tax_amt,
                            Remarks: $scope.Remarks,
                            GratuityAmount: $scope.GratuityAmount
                        };
                        $http.post(baseUrl + '/api/Gratuity/GratuityDetails_AddEdit/', obj).success(function (data) {
                            $scope.AddId = data;
                            var AddId = data;
                            $scope.ListGratuityPopUP($scope.AddId);
                            angular.element('#GratuityModal').modal('hide');
                            // $scope.CancelPopup();
                            $scope.ClearGratuityPopup();
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Gratuity details!" + data.ExceptionMessage;
                        });
                    }

                };

                /*THIS IS FOR LIST FUNCITON */
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.flag = 0;
                $scope.GratuityList = function () {
                    var EmpNames = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;
                    };

                    $http.get(baseUrl + 'api/Gratuity/GratuityDetailsList/?Id=' + $scope.Id + '&Company_Id=' + $scope.Company_Name + '&EmployeeId=' + EmpNames).success(function (data) {
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    })
                };

                /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
                $scope.GratuityListGo = function () {
                    $scope.Id = 0;
                    var ListId = $scope.Id;
                    $scope.ListGratuityPopUP(ListId);
                    $scope.Mode = 1;
                    $scope.GratuityList($scope.Id, $scope.Mode);
                };
                //$scope.NameList = [];
                //$scope.NamefilterList = [];
                //$scope.Employeelist = function () {
                //    if ($scope.NamefilterList != undefined) 
                //    {  // to avoid going to DB each time when Employee Search clicked
                //        $scope.NameList = [];
                //        $scope.NamefilterList = [];
                //        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName+ '&Department_Id=0' + '&LocationId=0').success(function (data) {
                //            $scope.NameList = data;
                //            $scope.NamefilterList = $ff(data, { IsActive: 1 });                                   

                //        });
                //    }
                //};


                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.Employeelist = function () {                           

                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                                
                    $http.get(baseUrl + 'api/Gratuity/Gratuity_EmployeeList/?Id=0' + '&Company_Id=' + $scope.CompanyName).success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = data;    
                                      
                    });
                };

                /* To show the employee code at the time of employee selection */
                $scope.EmployeeNameList = function () {
                    var EmployeeNo = '';
                    if ($scope.CompanyName == 0){
                        if ($scope.Employee_Selected != undefined) {
                            $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                            $http.get(baseUrl + '/api/Common/EmployeeSelectionDetailsList/?Id=' + $scope.EmployeeNo).success(function (data) {
                                $scope.CompanyName = data.Company_Name;
                                //  $scope.Employee_No = data.Employee_No;
                                $scope.CompanyFilterList1 = [];
                                $scope.CompanyNameList1 = [];
                                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                                    // all company records list including active and inactive 
                                    // used for list page DD and inactive records filtering
                                    $scope.CompanyFilterList1 = data;
                                    // only active company
                                    $scope.CompanyNameList1 = $ff(data, { Active: 0 });
                                    angular.forEach($scope.CompanyNameList1, function (value, index) {
                                        if (($scope.CompanyName == value.Id)) {
                                            $scope.CompanyName = "0";
                                        }
                                    });
                                });

                            }).error(function (data) {
                                $scope.error = "AN error has occured while Listing the records!" + data;
                            });
                        }
                        else{
                            $scope.GratuityEmployeeList();
                            // $scope.Employeelist();
                        }
                    }
                };

                $scope.GratuityEmployeeList = function () {
                    $scope.EmployeeNo ="";
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;
                        $http.get(baseUrl + 'api/Gratuity/Gratuity_EmployeeView/?Id=' + $scope.EmployeeNo + '&Company_Id=' + $scope.CompanyName).success(function (data) {

                            $scope.Date_Of_Joining = $filter('date')(data.Date_Of_Joining, "dd-MMM-yyyy");
                            $scope.No_of_Years = data.No_of_Years;
                            $scope.Employee_No =data.Employee_No;

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    };
                };



                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $scope.Employeefilteredlist = function () {
                    // $scope.autocompleteclear();
                    if ($scope.Autolist != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.Autolist = [];
                        $scope.Autofilterlist = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.Company_Name + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.Autofilterlist = data;
                            $scope.Autolist = data;
                        });
                    }
                }
                /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
                $scope.Autocompletefilter = function () {
                    if ($scope.IsActive == 1) {

                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                    }
                    else if ($scope.IsActive == 0) {
                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                    }
                    else if ($scope.IsActive == -1) {
                        $scope.Autolist = [];
                        $scope.Autolist = $scope.Autofilterlist;
                    }
                };
                ///*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
                //$scope.NameList = [];
                //$scope.NamefilterList = [];
                //$scope.Employeelist = function () {
                //    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                //        $scope.NameList = [];
                //        $scope.NamefilterList = [];
                //        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.CompanyName + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                //            $scope.NameList = data;
                //            $scope.NamefilterList = $ff(data, { IsActive: 1 });                                    

                //        });
                //    }
                //}

                //$scope.EmployeeList = [];
                ///* THIS IS FOR EMPLOYEE POPUP FUNCTION */
                //$scope.EmployeeDetailsPopup = function () {
                //    if ($scope.EmployeeList != undefined) {
                //        $scope.EmployeeList = [];
                //        $http.get(baseUrl + '/api/Common/EmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName).success(function (data) {
                //            $scope.EmployeeList = [];
                //            $scope.EmployeeList = data;
                //        }).error(function (data) {
                //            $scope.error = "AN error has occured while getting Employee List!" + data;
                //        });
                //    }
                //};


                ///*THIS IS FOR EMPLOYEE POP UP SELECTION FUNCTION*/
                //$scope.EmployeeSelection = function (Id, Employee_No, FullName, Department_Name, DesignationName) {
                //    $scope.Employee_No = Employee_No;
                //    $scope.Employee_Id = Id;
                //    $scope.Employee_Name = FullName;
                //    $scope.Department_Name = Department_Name;
                //    $scope.DesignationName = DesignationName;
                //    angular.element('#EmployeeModel').modal('hide');
                //};

                $scope.ViewRedirect = function () {
                    $location.path("/GratuityEdit/" + $scope.Id);
                }

                $scope.ListRedirect = function () {
                    $location.path("/GratuityList/" + $scope.Id);
                }

                //$scope.CancelPopup = function () {

                //    angular.element('#GratuityModal').modal('hide');
                //    angular.element('#GratuityViewModal').modal('hide');
                //    $scope.ClearGratuityPopup();
                //}
                $scope.rowCollection = [];
                $scope.CancelView = function () {
                    angular.element('#GratuityViewModal').modal('hide');
                    $scope.ClearGratuityPopup();
                    // $scope.GratuityListGo();
                }
                $scope.CancelPopup = function () {
                    if ($scope.Id > 0) {
                        angular.element('#GratuityModal').modal('hide');
                        $scope.ClearGratuityPopup();
                        //$scope.GratuityListGo();
                    }

                    angular.element('#GratuityModal').modal('hide');
                    $scope.ClearGratuityPopup();
                    //  $scope.Company_ListsearchGo();


                }
                //$scope.CancelPopupButton = function () {
                //    angular.element('#GratuityModal').modal('hide');
                //    $scope.ClearGratuityPopup();
                //    $scope.GratuityListGo();
                //}
            }
    ]);


    //This is for OverTimeController controller functions//
    EmpControllers.controller("OverTimeController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter','$rootScope', '$timeout',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

                //This is for Value Initialization //
                $scope.Id = "0";
                $scope.EmployeeName = "0";
         
                $scope.EmployeeId = "0";
                $scope.PeriodMonth = "0";
                $scope.PeriodYear = "0";
                $scope.Period_Month = "0";
                $scope.Period_Year = "0";
                $scope.CompanyName = 0;
                $scope.Period_Month = 0;
                $scope.Employee_Id = 0;
                $scope.Id = 0;
                $scope.CompanyName = "0";
                $scope.Period_Month = "0";
                //$scope.EmployeeList = [];
                $scope.Employee_Id = "0";

                $scope.Company_Name = 0;
                $scope.Company_Name = "0";
                $scope.Period_ToMonth = "0";
                $scope.Period_ToYear = "0";
                $scope.DepartmentName ="0";
                $scope.DesignationName ="0";
                $scope.LocationName ="0";

                //This is function for Pagination //
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.flag = 0;

                //$scope.DepartmentName =0;
                //$scope.DesignationName =0;
                $scope.PeriodToMonth ="0";
                $scope.PeriodToYear ="0";   

                /* DEPARTMENT NAME */
                $scope.DepartmentFilterList = [];
                $scope.DepartmentList = [];
                $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                    // all department records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.DepartmentFilterList = data;
                    // only active department
                    $scope.DepartmentList = $ff(data, { Active: 1 });
                });


                /* DESIGNATION NAME */
                $scope.DesignationFilterList = [];
                $scope.DesignationList = [];
                $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {
                    // all designation records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.DesignationFilterList = data;
                    // only active designation
                    $scope.DesignationList = $ff(data, { Active: 1 });
                });


                /* LOCATION NAME */
                $scope.LocationFilterList = [];
                $scope.LocationNameList = [];
                $http.get('/api/Common/GetLocationList_FromEmployee/').success(function (data) {
                    // all location records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.LocationFilterList = data;
                    // only active location
                    $scope.LocationNameList = $ff(data, { IsActive: 1 });
                });
                    
                /* THIS IS FOR LIST FUNCTION */
                $scope.OverTime_Listsearch = function () {

                    var EmpNames = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpNames = $scope.Employee_Selected.originalObject.Id;
                    };
                    $http.get(baseUrl + '/api/OverTimeDetails/OverTimeDetails_List/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&Employee_Id=' + EmpNames 
                        + '&DepartmentId=' + $scope.DepartmentName+ '&DesignationId=' + $scope.DesignationName+ '&LocationId=' + $scope.LocationName + '&Period_FromMonth_Id=' + $scope.PeriodMonth + '&Period_FromYear_Id=' + $scope.PeriodYear
                        + '&Period_ToMonth_Id=' + $scope.PeriodToMonth + '&Period_ToYear_Id=' + $scope.PeriodToYear).success(function (data) {
                   
                            $scope.emptydata = [];
                            $scope.rowCollection = [];
                            $scope.rowCollection = data;
                            if ($scope.rowCollection.length > 0) {
                                $scope.flag = 1;
                            }
                            else {
                                $scope.flag = 0;
                            }

                        }).error(function (data) {
                            $scope.error = "AN error has occured while deleting OverTime" + data;
                        });
                };

                /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
                $scope.OverTime_Listsearchgo = function () {
                    $scope.Id = 0;
                    var ListId = $scope.Id;
                    $scope.Mode = 1;
                    $scope.OverTime_Listsearch($scope.Id, $scope.Mode);
                    // $scope.ListOverTimePopUP(ListId);
                };

                /* THIS IS FOR VALIDATION FUNCTION */
                $scope.Validationcontrols = function () {
                    if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                        alert("Please select Company");
                        return false;
                    }
                    else if (typeof ($scope.NameList) == "undefined" || $scope.Employee_Selected == undefined) {
                        alert("Please enter Employee Name");
                        return false;
                    }
                    else if (typeof ($scope.Period_Month) == "undefined" || $scope.Period_Month == 0) {
                        alert("Please select Period From Month");
                        return false;
                    }
                    else if (typeof ($scope.Period_Year) == "undefined" || $scope.Period_Year == 0) {
                        alert("Please Enter Period From Year");
                        return false;
                    }
                    else if (typeof ($scope.Period_ToMonth) == "undefined" || $scope.Period_ToMonth == 0) {
                        alert("Please select Period To Month");
                        return false;
                    }
                    else if (typeof ($scope.Period_ToYear) == "undefined" || $scope.Period_ToYear == 0) {
                        alert("Please select Period To Year");
                        return false;
                    }
                    else if (typeof ($scope.Name) == "undefined" || $scope.Name == 0) {
                        alert("Please select Over Time Type");
                        return false;
                    }
            
               
                    //else if (typeof ($scope.No_of_days < $scope.Month_days) == "undefined" || $scope.No_of_days == "") {
                    //    alert("Please Enter No. of Days");
                    //    return false;
                    //}

                    //else if (typeof ($scope.No_of_days) == "undefined" || $scope.No_of_days == "") {
                    //    alert("Please Enter No. of Days");
                    //    return false;
                    //}            
              
               
                    $scope.FromYear_Name ="";
                    $scope.ToYear_Name ="";
                    $scope.FromMonth_Name ="";
                    $scope.ToMonth_Name ="";

                    $scope.FromYear_Name = $.grep($scope.getFyYear, function (yearitem) {
                        return yearitem.Fy_From_Year_Id == $scope.Period_Year;
                    })[0].From_Year.toString();
                   
                    $scope.ToYear_Name = $.grep($scope.getFyToYear, function (yearitem) {
                        return yearitem.Fy_To_Year_Id == $scope.Period_ToYear;
                    })[0].To_Year.toString();
                      

                    $scope.FromMonth_Name = $.grep($scope.MonthList, function (month) {
                        return month.Id == $scope.Period_Month;
                    })[0].MonthName.toString();
                   
                    $scope.ToMonth_Name = $.grep($scope.MonthList, function (month) {
                        return month.Id == $scope.Period_ToMonth;
                    })[0].MonthName.toString();
                      
                                            
                        
                    var fromyear =$scope.FromYear_Name;
                    var toyear =$scope.ToYear_Name;
                    var frommonth =$scope.FromMonth_Name;
                    var tomonth =$scope.ToMonth_Name;

                    var ot =0;    

                    angular.forEach($scope.AddOvertime, function (value, index) {
                        var otdate =moment(value.OT_Date);                     
                   
                        var OTStartDate = moment([fromyear, $scope.Period_Month-1]);                       
                        var OTEndPeriod = moment([toyear, $scope.Period_ToMonth-1]);
                        var OTEndDate = moment(OTEndPeriod).endOf('month');                                               
                     
                        if((OTStartDate >= otdate) || (OTEndDate <= otdate))
                        {
                            ot =1;                      
                        };                    
                    
                    });
              

                    if(ot == 1 && ($scope.Name == 2 || $scope.Name == 4))
                    {
                        alert("Selected month not in months limit");
                        return false;
                    }    

                    var otdayscount =0;
                    var ottimetotal =0;
                    var otdays =0;
                    var othours =0;
                    angular.forEach($scope.AddOvertime, function (value, index) {
                   
                        days = (new Date($scope.Period_Year, $scope.Period_Month, 0).getDate());  
                        daysto = (new Date($scope.Period_ToYear, $scope.Period_ToMonth, 0).getDate());                
                        $scope.otdays = (days+daysto);
                        $scope.ottime = (days+daysto)*24;                                
                 
                        if ($scope.otdays < value.OT_Days) {
                            otdayscount=1;                       
                        }  
                        if ($scope.ottime < value.OT_Hours) {
                            ottimetotal=1;                       
                        }  
                  
                        if($scope.Name == 2 && value.OT_Days>1)
                        {                       
                            otdays =1;
                        }
                        if($scope.Name == 4 && value.OT_Hours>24)
                        {                        
                            othours =1;
                        }
                    
                    }); 
                    if(otdayscount ==1)
                    {
                        alert("OT Days exceeds overtime months limit");
                        return false;
                    }
                    if(ottimetotal ==1)
                    {
                        alert("You are exceeds overtime hourse limit");
                        return false;
                    }
                    if(otdays ==1)
                    {
                        alert("OT Days exceeds overtime months limit");
                        return false;
                    }
                    if(othours ==1)
                    {
                        alert("You are exceeds overtime hourse limit");
                        return false;
                    }


                    var OTDuplicate = 0;
                    var DuplicateDays = '';
                    angular.forEach($scope.AddOvertime, function (value1, index1) {
                        angular.forEach($scope.AddOvertime, function (value2, index2) {
                          
                            if (index1 > index2 && value1.OT_Date == value2.OT_Date) {
                        
                                OTDuplicate = 1;
                                DuplicateDays = DuplicateDays + value2.OT_Date + ',';
                            }

                            //if (index1 != null && value2.Overtime_Id == null && $scope.AddOvertime.length > 1) {
                            //    alert("Please select OT Details");
                            //    return Overtime_Id;

                            //}

                        });
                    });
                    if (OTDuplicate == 1) {
                        alert('Over Time Date  ' + DuplicateDays.substring(0, DuplicateDays.length - 1) + ' already exists');
                        //alert("Tools already exists cannot duplicate");
                        return false;
                    }

                    return true;
           
                };

          

                /* THIS IS FOR VALIDATION FUNCTION */
                /* Showing alert when inactive record is try to edit in the list page */
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }

                $scope.Active_ErrorFunction = function () {
                    alert("Inactive companies Overtime Details cannot be edited");
                };


                $scope.OvertimeTotalclear = function()
                {
                    $scope.AddOvertime = [{
                        'Id': $scope.ChildId,
                        'Overtime_Id': $scope.Overtime_Id,
                        'OT_Hours': $scope.OT_Hours,                
                        'OT_Date': $filter('date')($scope.OT_Date, "dd-MMM-yyyy"),
                        'OT_Days': $scope.OT_Days,
                    }];
                    $scope.OvertimeRow = -1;
                };

                $scope.AddOvertime = [];
                $scope.OvertimeRow = -1;
                $scope.ChildId ="0";

                //   $scope.AddTools = [];
                /*This is array function for display default row from Tools*/
                $scope.AddOvertime = [{
                    'Id': $scope.ChildId,
                    'Overtime_Id': $scope.Overtime_Id,
                    'OT_Hours': $scope.OT_Hours,                
                    'OT_Date': $filter('date')($scope.OT_Date, "dd-MMM-yyyy"),
                    'OT_Days': $scope.OT_Days,
                }];

                /*This is Addrow function for add new row and save Tools details*/
                $scope.OvertimeSave = function () {
                    if ($scope.OvertimeRow >= 0) {
                        var obj = {
                            'Id': $scope.ChildId,
                            'Overtime_Id': $scope.Overtime_Id,
                            'OT_Hours': $scope.OT_Hours,                        
                            'OT_Date': $filter('date')($scope.OT_Date, "dd-MMM-yyyy"),
                            'OT_Days': $scope.OT_Days,
                        }
                        $scope.AddOvertime[$scope.OvertimeRow] = obj;
                    }
                    else {
                        $scope.AddOvertime.push({
                            'Id': $scope.ChildId,
                            'Overtime_Id': $scope.Overtime_Id,
                            'OT_Hours': $scope.OT_Hours,                        
                            'OT_Date': $filter('date')($scope.OT_Date, "dd-MMM-yyyy"),
                            'OT_Days': $scope.OT_Days,
                        })
                    }           
                };


             

                // $scope.OT_Hourse ="0";
                //$scope.OT_Date ="0";
                //$scope.OT_Days ="0";

                //$scope.EmployeeList = [];
                ///* THIS IS FOR EMPLOYEE POPUP FUNCTION */
                //$scope.EmployeeDetailsPopup = function () {
                //    if ($scope.EmployeeList != undefined) {
                //        $scope.EmployeeList = [];
                //        $http.get(baseUrl + '/api/Common/EmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName).success(function (data) {
                //            $scope.EmployeeList = [];
                //            $scope.EmployeeList = data;
                //        }).error(function (data) {
                //            $scope.error = "AN error has occured while getting Employee List!" + data;
                //        });
                //    }
                //};

                ///* THIS IS FOR EMPLOYEE POPUP SELECTION FUNCTION */
                //$scope.EmployeeSelection = function (Id, Employee_No, FullName, Department_Name, Designation_Name) {
                //    $scope.Employee_Id = Id;
                //    $scope.Employee_No = Employee_No;
                //    $scope.Employee_Name = FullName;
                //    $scope.Department_Name = Department_Name;
                //    $scope.DesignationName = Designation_Name;
                //    angular.element('#EmployeeModel').modal('hide');
                //};


                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.Employeelist = function () {
                    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.CompanyName + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                        });
                    }
                };

                /* To show the employee code at the time of employee selection */
                $scope.EmployeeNameList = function () {
                    var EmployeeNo = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                            $scope.Employee_No = data.Employee_No;

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    };
                };



                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $scope.Employeefilteredlist = function () {
                    // $scope.autocompleteclear();
                    if ($scope.Autolist != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.Autolist = [];
                        $scope.Autofilterlist = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.Company_Name + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.Autofilterlist = data;
                            $scope.Autolist = data;
                        });
                    }
                }
                /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
                $scope.Autocompletefilter = function () {
                    if ($scope.IsActive == 1) {

                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                    }
                    else if ($scope.IsActive == 0) {
                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                    }
                    else if ($scope.IsActive == -1) {
                        $scope.Autolist = [];
                        $scope.Autolist = $scope.Autofilterlist;
                    }
                };
                /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.Employeelist = function () {
                    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.CompanyName + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                        });
                    }
                }


                /* THIS IS FOR DROPDOWN FUNCTION */
                $scope.MonthList = [];
                $scope.OvertimeTypelist =[];
                /* COMPANY NAME */
                $scope.CompanyFilterList = [];
                $scope.CompanyNameList = [];
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.CompanyFilterList = data;
                    // only active company
                    $scope.CompanyNameList = $ff(data, { Active: 1 });
                });
                $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
                    $scope.MonthList = data;
                });
                $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
                    $scope.getYear = data;
                });
                $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
                    $scope.getFyYear = data;

                });
                $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                    $scope.getFyToYear = data;
               

                });
                $http.get(baseUrl + 'api/Common/FromTo_Year/').success(function (data) {
                    $scope.FromYear = data;
       
                });         
                $http.get(baseUrl + 'api/OverTimeDetails/OverTimeType_List/').success(function (data) {               
                    $scope.OvertimeTypelist = data;                 
                });




                //$scope.getFYYearList = [];
       
                //$scope.populateYearPopulateList = function () {
         
                //    console.log($scope.CompanyName);
                //    $http.get(baseUrl + 'api/Common/FYCompanyList/?company_id='+ $scope.CompanyName).success(function (data) {
             
                //        $scope.getFYYearList = data;    
                   
                //        angular.forEach($scope.getFYYearList, function (value, index) {                   
                //            var date = new Date();
                //            var startdate = moment(value.FY_start_Dt);
                //            var enddate = moment(value.FY_end_Dt);
                //            var dateitem = moment(date);               
                   

                //            if(startdate <=dateitem && enddate>=dateitem)
                //            { 
                //                $scope.Period_Year = value.Fy_From_Year_Id.toString();
                //                $scope.Period_ToYear = value.Fy_To_Year_Id.toString();                            
                //            }                     
                     
                      
                //        });


                //    });
                //}
                //$scope.populateYearPopulateList();

                // This is function for View & Edit POP UP //
                $scope.AddOverTimePopUP = function (OTId) {
                    $scope.Id = OTId;
                    //  $scope.ViewOverTime();
                    angular.element('#OvertimeModel').modal('show');
                }
                $scope.ViewOverTimePopUP = function (OTId) {
                    $scope.Id = OTId;
                    $scope.ViewOverTime();
                    angular.element('#OvertimeModelView').modal('show');
                }
                $scope.EditOverTimePopUP = function (OTId) {
                    $scope.Id = OTId;
                    $scope.ViewOverTime();
                    angular.element('#OvertimeModel').modal('show');
                }
                $scope.ListOverTimePopUP = function (OTId) {

                    if ($routeParams.Id == 0) {
                        $scope.rowCollection = [];
                    }
                    if ($scope.Id == 0 && $scope.Mode == 1) {

                        $scope.OverTime_Listsearch();
                    }
                    else if ($scope.Id > 0 && $scope.Mode == 1) {

                        $scope.OverTime_Listsearch();
                    }
                    if (OTId > 0) {
                        $scope.Id = OTId;
                        $scope.OverTime_Listsearch();
                    }
                }

                /* THIS IS FOR VIEW FUNCTION */
                $scope.ViewOverTime = function () {
                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                        $scope.MasterId = $routeParams.Id;
                        $scope.DuplicateId = $routeParams.Id;
                    }
                    $http.get(baseUrl + 'api/OverTimeDetails/OverTimeDetails_View/?Id=' + $scope.Id).success(function (data) {
                        $scope.DuplicateId = data.Id;
                        $scope.MasterId=data.Id;
                        $scope.CompanyName = data.CompanyId.toString();
                        $scope.listCompanyName = data.CompanyName;
                        $scope.Employee_Id = data.Employee_Id;
                        $scope.Employee_No = data.Employee_No;
                        $scope.FullNamelist = data.FullNamelist;
                        $scope.Employee_Name = data.Employee_Name;
                        $scope.Period_Month = data.Period_FromMonth_Id.toString();
                        $scope.listPeriod_Month = data.Period_Month;
                        $scope.Period_Year = data.Period_FromYear_Id.toString();
                        $scope.listPeriod_Year = data.Period_Year;

                        $scope.Period_ToMonth = data.Period_ToMonth_Id.toString();
                        $scope.listPeriod_ToMonth = data.Period_ToMonth;
                        $scope.Period_ToYear = data.Period_ToYear_Id.toString();
                        $scope.listPeriod_ToYear = data.Period_ToYear;
                        $scope.No_of_days = data.No_of_days;
                        $scope.Remarks = data.Remarks;
                        $scope.Name = data.OverTimeType_Id.toString();
                        $scope.listName = data.Name;
                        //   $scope.Employeelist();


                        var sel = {
                            Id: data.Employee_Id,
                            FullName: data.FullName,
                            FullNamelist: data.FullNamelist
                        };
                        $scope.DisplayFullName = sel;
                        $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                        $scope.CompanyInactiveFlag = 0;
                        if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.listCompanyName, Active: 0 }).length) == 1) {
                            $scope.CompanyInactiveFlag = 1;
                        }
                        $http.get(baseUrl + '/api/OverTimeDetails/OvertimeTotal_View/?Id=' + $scope.Id).success(function (OTdata) {
                    
                            $scope.AddOvertime = OTdata;
                            angular.forEach($scope.AddOvertime, function (value, index) {
                                //var OTTimeSplit = value.OT_Hourse.split(":");
                                //value.ViewOTTime = $scope.Convert24to12Timeformat($filter('date')(value.OT_Hourse, "hh:mm:ss a"));
                                //value.OT_Hourse = moment().hours(0).minutes(0).second(0).milliseconds(0).add(OTTimeSplit[0], 'hours').add(OTTimeSplit[1], 'minutes').toDate();
                                value.OT_Date = $filter('date')(value.OT_Date, "dd-MMM-yyyy");
                            });

                        });

                    }).error(function (data) {
                        $scope.error = "AN error has occured while list Countryname!" + data;
                    });

                };

                $scope.DeleteOverTime = function (LRId) {
                    $scope.Id = LRId;
                    $scope.OverTime_Delete();
                };
                /* THIS IS FOR DELETE FUNCTION */
                $scope.OverTime_Delete = function () {
                    var del = confirm("Do you like to inactivate the selected Over time detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/OverTimeDetails/OverTimeDetails_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Overtime Details has been inactivated successfully");
                            $scope.OverTime_Listsearchgo();
                            //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Employeedetails" + data;
                        });
                    }
                };


                $scope.ActivateOverTime = function (LRId) {
                    $scope.Id = LRId;
                    $scope.OverTime_Activate();
                };
                /* THIS IS FOR DELETE FUNCTION */
                $scope.OverTime_Activate = function () {
                    var del = confirm("Do you like to activate the selected Over time detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/OverTimeDetails/OverTimeDetails_Activate/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Over time detail has been activated successfully");
                            $scope.OverTime_Listsearchgo();
                            //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Employeedetails" + data;
                        });
                    }
                };

                /* THIS IS FOR CLEAR POPUP FUNCTION */
                $scope.ClearOverTimePopup = function () {
                    $scope.CompanyName = "0";
                    $scope.Id = "0";
                    $scope.ChildId ="0";
                    $scope.Employee_No = "0";
                    $scope.FullName = "0";
                    $scope.Period_Month = "0";
                    $scope.Period_Year = "0";
                    $scope.Period_ToMonth = "0";
                    $scope.Period_ToYear = "0";
                    $scope.No_of_days = "";
                    $scope.Remarks = "";
                    $scope.Employee_No = "";
                    $scope.Employee_Name = "";
                    $scope.OvertimeRow = -1;
                    $scope.AddOvertime =[];
                    $scope.Name ="0";

               
                    $scope.AddOvertime = [{
                        'Id': $scope.ChildId,
                        'Overtime_Id': $scope.Overtime_Id,
                        'OT_Hours': $scope.OT_Hours,
                        'OT_Date': $scope.OT_Date,
                        'OT_Days': $scope.OT_Days
                    }];

                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                };



                $scope.Convert24to12Timeformat = function (inputTime) {
                    var outputTime = null;
                    if (inputTime != '' && inputTime != null) {
                        inputTime = inputTime.toString(); //value to string for splitting
                        var splitTime = inputTime.split(':');
                        splitTime.splice(2, 1);
                        var ampm = (splitTime[0] >= 12 ? ' PM' : ' AM'); //determine AM or PM
                        splitTime[0] = splitTime[0] % 12;
                        splitTime[0] = (splitTime[0] == 0 ? 12 : splitTime[0]); //adjust for 0 = 12
                        outputTime = splitTime.join(':') + ampm;
                    }
                    return outputTime;
                };
                $scope.Convert12To24Timeformat = function (timeval) {
                    var outputTime = null;
                    if (timeval != '' && timeval != null) {
                        var time = timeval;
                        var hours = Number(time.match(/^(\d+)/)[1]);
                        var minutes = Number(time.match(/:(\d+)/)[1]);
                        var AMPM = time.match(/\s(.*)$/)[1];
                        if (AMPM == "PM" && hours < 12) hours = hours + 12;
                        if (AMPM == "AM" && hours == 12) hours = hours - 12;
                        var sHours = hours.toString();
                        var sMinutes = minutes.toString();
                        if (hours < 10) sHours = "0" + sHours;
                        if (minutes < 10) sMinutes = "0" + sMinutes;
                        outputTime = sHours + ":" + sMinutes;
                    }
                    return outputTime;
                };           

                $scope.PickupTime = new Date();
                $scope.DropTime = new Date();

                $scope.Period_ToYear ="0";
                $scope.Name ="0";
                /* Clear the create page scope Employee variable values. */
                $scope.ClearEmployee = function () {
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                    $scope.Employee_No = "";
                };


                $scope.DuplicateId =0;
                //  $scope.Company_Name =0;
                $scope.Employee_Id ="";
                $scope.Period_Month =0;
                $scope.Period_Year =0;
                $scope.Period_ToMonth =0;
                $scope.Period_ToYear =0;
                $scope.Name =0;
                $scope.No_of_days ="";
          
                /* THIS IS FOR ADD EDIT FUNCTION */
                $scope.OverTime_AddEdit = function () {
                    if ($scope.Validationcontrols() == true) {

                        $http.get(baseUrl + '/api/OverTimeDetails/OverTime_DuplicateCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName + '&Employee_Id=' + $scope.Employee_Id + '&Period_FromMonth_Id=' + $scope.Period_Month+ '&Period_FromYear_Id=' + $scope.Period_Year + '&Period_ToMonth_Id=' + $scope.Period_ToMonth+ '&Period_ToYear_Id=' + $scope.Period_ToYear+ '&OverTimeType_Id=' + $scope.Name).success(function (data) {
                  
                            if (data == 1) {
                                alert("Overtime for this Company already exists, cannot duplicate");
                                return false;
                            }
                            else {


                                if ($scope.Employee_Selected != undefined) {
                                    $scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                                }
                                //else {
                                //    $scope.Employee_Id = null;
                                //}
                                // $scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                                var obj = {
                                    Id: $scope.Id,
                                    CompanyId: $scope.CompanyName  == "" ? null :$scope.CompanyName,
                                    Employee_Id: $scope.Employee_Id,
                                    Period_FromMonth_Id: $scope.Period_Month,
                                    Period_FromYear_Id: $scope.Period_Year,
                                    Period_ToMonth_Id: $scope.Period_ToMonth,
                                    Period_ToYear_Id: $scope.Period_ToYear,
                                    No_of_days: $scope.No_of_days,
                                    Remarks: $scope.Remarks,
                                    OverTimeType_Id: $scope.Name,
                                };                  
                                                      
                                $http.post(baseUrl + '/api/OverTimeDetails/OverTimeDetails_AddEdit/', obj).success(function (data) {
                                    $scope.AddId = data;
                                    var AddId = data;
                                    $scope.Overtimdetails_Id = data; 
                                    $scope.MasterId = data;

                                    //angular.forEach($scope.AddOvertime, function (value, index) {                           

                                    ////    $scope.Overtimehourse= $filter('date')(value.OT_Hourse, "hh:mm:ss a"); 
                                    ////    value.OT_Hourse= $scope.Overtimehourse == '' ? null : $scope.Convert12To24Timeformat($scope.Overtimehourse)
                                    //   value.Overtime_Id = $scope.Overtimdetails_Id                                  
                                    //});                                                    
                                    angular.forEach($scope.AddOvertime, function (value, index) {                           

                                        //    $scope.Overtimehourse= $filter('date')(value.OT_Hourse, "hh:mm:ss a"); 
                                        //    value.OT_Hourse= $scope.Overtimehourse == '' ? null : $scope.Convert12To24Timeformat($scope.Overtimehourse)
                                        value.Overtime_Id = $scope.Overtimdetails_Id   
                                   
                                    }); 
                                                                           
                                    $http.post(baseUrl + '/api/OverTimeDetails/OvertimeTotal_AddEdit/', $scope.AddOvertime).success(function (data) {
                                    
                                        $scope.ListOverTimePopUP($scope.MasterId);
                                        angular.element('#OvertimeModel').modal('hide');
                                        // console.log(obj);
                                        // $scope.CancelPopup();
                                        $scope.ClearOverTimePopup();
                                  
                                    });
                       
                                }).error(function (data) {
                                    $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                                });
                            }
                        });
                    };
                };
                $scope.ViewRedirect = function () {
                    $location.path("/EditOverTime/" + $scope.Id);
                }
                $scope.ListRedirect = function () {
                    $location.path("/OverTimeList" + $scope.Id);
                }
                //$scope.CancelPopup = function () {
                //    angular.element('#OvertimeModel').modal('hide');
                //    angular.element('#OvertimeModelView').modal('hide');
                //    $scope.ClearOverTimePopup();
                //}
                //$scope.rowCollection = [];
                $scope.CancelView = function () {
                    angular.element('#OvertimeModelView').modal('hide');
                    $scope.ClearOverTimePopup();
                }
                $scope.CancelPopuplist = function () {              
                    angular.element('#OvertimeModel').modal('hide');
                    $scope.ClearOverTimePopup();
                }

                //$scope.CancelPopupButton = function () {
                //    angular.element('#OvertimeModel').modal('hide');
                //    $scope.ClearOverTimePopup();
                //}

                /*on click Remove its calling the Language delete funtion */
                $scope.RemoveOT_Item = function (rowIndex) {
                    var del = confirm("Do you like to delete this OT Details?");
                    if (del == true) {
                        var Language_Item = [];
                        alert($scope.Id <= 0);
                        if ($scope.Id <= 0) {
                     
                            angular.forEach($scope.AddOvertime, function (selectedLanguage, index) {
                                if (index!=rowIndex) {
                                    Language_Item.push(selectedLanguage);
                                }                    
                            });
                            $scope.AddOvertime = Language_Item;

                        }
                        else if ($scope.Id > 0) {
                            angular.forEach($scope.AddOvertime, function (selectedLanguage, index) {
                                if (index==rowIndex) {
                                    $scope.OTId = selectedLanguage.Id;
                                    $scope.OT_Delete();
                                }
                                else
                                {
                                    Language_Item.push(selectedLanguage);
                                }                       

                            });
                            $scope.AddOvertime = Language_Item;
                       
                        }
                    }
                };

                $scope.OT_Delete = function () {                
                    $http.get('/api/OverTimeDetails/OvertimeTotalDays_Delete/?Id=' + $scope.OTId).success(function (Langdata) {
               
                        alert("OT Details deleted Successfully");
                    }).error(function (Langdata) {
                        $scope.error = "AN error has occured while deleting records" + Langdata;
                    });
                };


                $scope.OTSave = function (qualification) {

                    if ($scope.OvertimeRow >= 0) {

                        var obj = {
                            'Id': $scope.ChildId,
                            'Overtime_Id': $scope.Overtime_Id,
                            'OT_Hours': $scope.OT_Hours,
                            'OT_Date': $scope.OT_Date,
                            'OT_Days': $scope.OT_Days
                        }

                        $scope.AddOvertime[$scope.OvertimeRow] = obj;
                    }

                    else {
                        $scope.AddOvertime.push({
                            'Id': $scope.ChildId,
                            'Overtime_Id': $scope.Overtime_Id,
                            'OT_Hours': $scope.OT_Hours,
                            'OT_Date': $scope.OT_Date,
                            'OT_Days': $scope.OT_Days
                        })
                    }
                };






                ///// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $scope.OTDetails = [];
                $scope.Message = [];

                $scope.PeriodFromMonth ="0";
                $scope.PeriodFromYear ="0";
                $scope.PeriodToMonthId ="0";
                $scope.PeriodToYearId ="0";
                $scope.OTName ="0";

                $scope.Uploadvalidation = function()
                {
                    
                    if (typeof ($scope.PeriodFromMonth) == "undefined" || $scope.PeriodFromMonth == 0) {
                        alert("Please select Period From Month");
                        return false;
                    }
                    else if (typeof ($scope.PeriodFromYear) == "undefined" || $scope.PeriodFromYear == 0) {
                        alert("Please Enter Period From Year");
                        return false;
                    }
                    else if (typeof ($scope.PeriodToMonthId) == "undefined" || $scope.PeriodToMonthId == 0) {
                        alert("Please select Period To Month");
                        return false;
                    }
                    else if (typeof ($scope.PeriodToYearId) == "undefined" || $scope.PeriodToYearId == 0) {
                        alert("Please select Period To Year");
                        return false;
                    }
                    else if (typeof ($scope.OTName) == "undefined" || $scope.OTName == 0) {
                        alert("Please select Over Time Type");
                        return false;
                    }
                }


                $scope.AddImportPopUP = function (OTId) {               
                    $scope.Id = OTId;
                    //  $scope.ViewOverTime();
                    angular.element('#Upload').modal('show');
                };
             

                $scope.EmployeeDetails = [];
                $scope.EmployeeDetails1 = [];
                $scope.EmployeeDetails2 = [];
                $scope.EmployeeDetails3 = [];
                $scope.Message = [];

                $scope.downloadfile = function (url, defaultFileName) { 
                    var self = this;
                    var deferred = $q.defer();
                    $http.get(url, { responseType: "blob" }).then(
                       function (data) {
                           saveAs(data.data, defaultFileName)
                           deferred.resolve(defaultFileName);
                       }, function (data) {
                           var e = /* error */
                            deferred.reject(e);
                       });
                    return deferred.promise;
                };


                $scope.dataURItoBlob = function (dataURI) {
                    var binary = atob(dataURI.split(',')[1]);
                    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                    var array = [];
                    for (var i = 0; i < binary.length; i++) {
                        array.push(binary.charCodeAt(i));
                    }
                    return new Blob([new Uint8Array(array)], {
                        type: mimeString
                    });
                }

                $scope.doclogoChange = function () {

                    if ($('#Attendance')[0].files[0] != undefined) {
                        $scope.LicenseFileName = $('#Attendance')[0].files[0]['name'];
                    }
                    else if ($('#Attendance1')[0].files[0] != undefined) {
                        $scope.LicenseFileName1 = $('#Attendance1')[0].files[0]['name'];
                    }
                    else if ($('#Attendance2')[0].files[0] != undefined) {
                        $scope.LicenseFileName2 = $('#Attendance2')[0].files[0]['name'];
                       
                    }
                    else if ($('#Attendance3')[0].files[0] != undefined) {
                        $scope.LicenseFileName3 = $('#Attendance3')[0].files[0]['name'];
                    }
                }

                $scope.MasterId = 0;
                $scope.loading = false;
                $scope.Upload_AddEdit = function () {  
                    if($scope.OTName == 1)
                    {
                        if ($scope.LicenseFileName == '' || $scope.LicenseFileName == undefined) {
                            alert("Please Upload Employee OT Details");
                        }             
                             
                        else {
                  
                            $scope.OTTypeId =1;
                            var filename = "";
                            var Licensefilename = "";

                            var fd = new FormData();
                            var imgBlob;
                            var imgBlobfile;
                            var itemIndexLogo = -1;
                            var itemIndexfile = -1;

                            var fd = new FormData();

                            if ($('#Attendance')[0].files[0] != undefined) {
                                Licensefilename = $('#Attendance')[0].files[0]['name'];
                                imgBlobfile = $scope.dataURItoBlob($scope.licedoc1);
                                if (itemIndexLogo == -1) {
                                    itemIndexfile = 0;
                                }
                                else {
                                    itemIndexfile = 1;
                                }
                            }

                            if (itemIndexfile != -1) {
                                fd.append('file1', imgBlobfile);
                            }

                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            }, 3000); // 5 seconds                       
                  
                       

                            $scope.OTFromYear_Name ="";
                            $scope.OTToYear_Name ="";
                            $scope.OTFromMonth_Name ="";
                            $scope.OTToMonth_Name ="";

                            $scope.OTFromYear_Name = $.grep($scope.getFyYear, function (yearitem) {
                                return yearitem.Fy_From_Year_Id == $scope.PeriodFromYear;
                            })[0].From_Year.toString();
                   
                            $scope.OTToYear_Name = $.grep($scope.getFyToYear, function (yearitem) {
                                return yearitem.Fy_To_Year_Id == $scope.PeriodToYearId;
                            })[0].To_Year.toString();
                      

                            $scope.OTFromMonth_Name = $.grep($scope.MonthList, function (month) {
                                return month.Id == $scope.PeriodFromMonth;
                            })[0].MonthName.toString();
                   
                            $scope.OTToMonth_Name = $.grep($scope.MonthList, function (month) {
                                return month.Id == $scope.PeriodToMonthId;
                            })[0].MonthName.toString();
                      
                                            
                        
                            $scope.OTFromYear_Name ="";
                            $scope.OTToYear_Name ="";
                            $scope.OTFromMonth_Name ="";
                            $scope.OTToMonth_Name ="";

                            $scope.OTFromYear_Name = $.grep($scope.getFyYear, function (yearitem) {
                                return yearitem.Fy_From_Year_Id == $scope.PeriodFromYear;
                            })[0].From_Year.toString();
                   
                            $scope.OTToYear_Name = $.grep($scope.getFyToYear, function (yearitem) {
                                return yearitem.Fy_To_Year_Id == $scope.PeriodToYearId;
                            })[0].To_Year.toString();
                      

                            $scope.OTFromMonth_Name = $.grep($scope.MonthList, function (month) {
                                return month.Id == $scope.PeriodFromMonth;
                            })[0].MonthName.toString();
                   
                            $scope.OTToMonth_Name = $.grep($scope.MonthList, function (month) {
                                return month.Id == $scope.PeriodToMonthId;
                            })[0].MonthName.toString();
                      
                                            
                        
                            var OTfromyear =$scope.OTFromYear_Name;                    

                            var OTtoyear =$scope.OTToYear_Name;
                            var OTfrommonth =$scope.OTFromMonth_Name;
                            var OTtomonth =$scope.OTToMonth_Name;

                            var ot =0; 
                        
                            var otdayscount =0;
                            var ottimetotal =0;
                            var otdays =0;
                            var othours =0;
                     
                            angular.forEach($scope.AddOvertime, function (value, index) {
                                var otdate =moment(value.OT_Date);                     
                           
                                $scope.Startdate = [OTfromyear, $scope.PeriodFromMonth-1];                       
                                $scope.Enddate = ([OTtoyear, $scope.PeriodToMonthId-1]);
                                // var enddate = ($scope.Enddate).endOf('month');   
                            
                                //   console.log(OTEndPeriod);
                              
                                if(( $scope.Startdate >= otdate) || ($scope.Enddate <= otdate))
                                {
                                    ot =1;                      
                                };     
                            
                           
                                days = (new Date($scope.PeriodFromYear, $scope.PeriodFromMonth, 0).getDate());  
                                daysto = (new Date($scope.PeriodToYearId, $scope.PeriodToMonthId, 0).getDate());                
                                $scope.otdays = (days+daysto);
                                $scope.ottime = (days+daysto)*24;                                
                           
                                $http.post(baseUrl + 'api/OverTimeDetails/AttachExcelFile/?Id='+ $scope.OTName + '&Periodfrommonth=' + $scope.PeriodFromMonth
                                    + '&Periodfromyear=' + $scope.PeriodFromYear+ '&Periodtomonth=' + $scope.PeriodToMonthId+ '&Periodtoyear=' + $scope.PeriodToYearId
                                    + '&startdate=' + $scope.Startdate.toString() +'&enddate=' + $scope.Enddate.toString() + '&otdays=' + $scope.otdays +'&ottime=' + $scope.ottime +'&OT='+ ot,
                            
                                 fd,

                                 {
                                     withCredentials: false,
                                     transformRequest: angular.identity,
                                     headers: {
                                         'Content-Type': undefined
                                     },
                                     params: {
                                         fd                                     
                       
                                         },

                                 }
                                 )
                                .success(function (response) {
                                    $scope.EmployeeDetails = response;
                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');

                                }).error(function (response) {
                                    $scope.Document_Upload = "";

                                });
                            });
                            $("#documentfile").val('');
                      
                        };  
                   
                    };

                    if($scope.OTName == 2)
                    {
                        if ($scope.LicenseFileName1 == '' || $scope.LicenseFileName1 == undefined) {
                            alert("Please Upload Employee OT Details");
                            return false;
                        }             
                             
                        else {
                  

                            var filename1 = "";
                            var Licensefilename1 = "";

                            var fd = new FormData();
                            var imgBlob;
                            var imgBlobfile;
                            var itemIndexLogo = -1;
                            var itemIndexfile = -1;

                            var fd = new FormData();

                            if ($('#Attendance1')[0].files[0] != undefined) {
                                Licensefilename1 = $('#Attendance1')[0].files[0]['name'];
                                imgBlobfile = $scope.dataURItoBlob($scope.licedoc2);
                                if (itemIndexLogo == -1) {
                                    itemIndexfile = 0;
                                }
                                else {
                                    itemIndexfile = 1;
                                }
                            }

                            if (itemIndexfile != -1) {
                                fd.append('file1', imgBlobfile);
                            }

                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            }, 3000); // 5 seconds




                        
                            $scope.OTFromYear_Name ="";
                            $scope.OTToYear_Name ="";
                            $scope.OTFromMonth_Name ="";
                            $scope.OTToMonth_Name ="";

                            $scope.OTFromYear_Name = $.grep($scope.getFyYear, function (yearitem) {
                                return yearitem.Fy_From_Year_Id == $scope.PeriodFromYear;
                            })[0].From_Year.toString();
                   
                            $scope.OTToYear_Name = $.grep($scope.getFyToYear, function (yearitem) {
                                return yearitem.Fy_To_Year_Id == $scope.PeriodToYearId;
                            })[0].To_Year.toString();
                      

                            $scope.OTFromMonth_Name = $.grep($scope.MonthList, function (month) {
                                return month.Id == $scope.PeriodFromMonth;
                            })[0].MonthName.toString();
                   
                            $scope.OTToMonth_Name = $.grep($scope.MonthList, function (month) {
                                return month.Id == $scope.PeriodToMonthId;
                            })[0].MonthName.toString();
                      
                                            
                        
                            var OTfromyear =$scope.OTFromYear_Name;
                            var OTtoyear =$scope.OTToYear_Name;
                            var OTfrommonth =$scope.OTFromMonth_Name;
                            var OTtomonth =$scope.OTToMonth_Name;

                            var ot =0; 
                        
                            var otdayscount =0;
                            var ottimetotal =0;
                            var otdays =0;
                            var othours =0;
                     
                            angular.forEach($scope.AddOvertime, function (value, index) {
                                var otdate =moment(value.OT_Date);                     
                           
                             
                                $scope.Startdate = [OTfromyear, $scope.PeriodFromMonth-1];                       
                                $scope.Enddate = ([OTtoyear, $scope.PeriodToMonthId-1]);
                           
                                days = (new Date($scope.PeriodFromYear, $scope.PeriodFromMonth, 0).getDate());  
                                daysto = (new Date($scope.PeriodToYearId, $scope.PeriodToMonthId, 0).getDate());                
                                $scope.otdays = (days+daysto);
                                $scope.ottime = (days+daysto)*24;                             
                          
                                $http.post(baseUrl + 'api/OverTimeDetails/AttachExcelFile/?Id='+ $scope.OTName + '&Periodfrommonth=' + $scope.PeriodFromMonth
                                    + '&Periodfromyear=' + $scope.PeriodFromYear+ '&Periodtomonth=' + $scope.PeriodToMonthId+ '&Periodtoyear=' + $scope.PeriodToYearId
                                    + '&startdate=' + $scope.Startdate.toString() +'&enddate=' + $scope.Enddate.toString()  + '&otdays=' + $scope.otdays +'&ottime=' + $scope.ottime +'&OT='+ ot,

                        //    $http.post(baseUrl + 'api/OverTimeDetails/AttachExcelFile/?Id='+ $scope.OTTypeId,
                             fd,

                             {
                                 withCredentials: false,
                                 transformRequest: angular.identity,
                                 headers: {
                                     'Content-Type': undefined
                                 },
                                 params: {
                                     fd
                                     },

                             }
                             )
                                .success(function (response) {
                                    $scope.EmployeeDetails = response;
                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');

                                }).error(function (response) {
                                    $scope.Document_Upload = "";

                                });
                            });
                            $("#documentfile").val('');
                        };            
                    };

                    if($scope.OTName == 3)
                    {                        
                        if ($scope.LicenseFileName2 == '' || $scope.LicenseFileName2 == undefined) {
                            alert("Please Upload Employee OT Details");
                            return false;
                        }             
                             
                        else {
                  

                            var filename2 = "";
                            var Licensefilename2 = "";

                            var fd = new FormData();
                            var imgBlob;
                            var imgBlobfile;
                            var itemIndexLogo = -1;
                            var itemIndexfile = -1;

                            var fd = new FormData();

                            if ($('#Attendance2')[0].files[0] != undefined) {
                                Licensefilename2 = $('#Attendance2')[0].files[0]['name'];
                                imgBlobfile = $scope.dataURItoBlob($scope.licedoc3);
                                if (itemIndexLogo == -1) {
                                    itemIndexfile = 0;
                                }
                                else {
                                    itemIndexfile = 1;
                                }
                            }

                            if (itemIndexfile != -1) {
                                fd.append('file1', imgBlobfile);
                            }

                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            }, 3000); // 5 seconds

                         
                            var OTfromyear =$scope.OTFromYear_Name;
                            var OTtoyear =$scope.OTToYear_Name;
                            var OTfrommonth =$scope.OTFromMonth_Name;
                            var OTtomonth =$scope.OTToMonth_Name;

                            var ot =0; 
                        
                            var otdayscount =0;
                            var ottimetotal =0;
                            var otdays =0;
                            var othours =0;
                     
                            angular.forEach($scope.AddOvertime, function (value, index) {
                                var otdate =moment(value.OT_Date);                     
                           
                             
                                $scope.Startdate = [OTfromyear, $scope.PeriodFromMonth-1];                       
                                $scope.Enddate = ([OTtoyear, $scope.PeriodToMonthId-1]);
                           
                                days = (new Date($scope.PeriodFromYear, $scope.PeriodFromMonth, 0).getDate());  
                                daysto = (new Date($scope.PeriodToYearId, $scope.PeriodToMonthId, 0).getDate());                
                                $scope.otdays = (days+daysto);
                                $scope.ottime = (days+daysto)*24;                             
                          
                                $http.post(baseUrl + 'api/OverTimeDetails/AttachExcelFile/?Id='+ $scope.OTName + '&Periodfrommonth=' + $scope.PeriodFromMonth
                                    + '&Periodfromyear=' + $scope.PeriodFromYear+ '&Periodtomonth=' + $scope.PeriodToMonthId+ '&Periodtoyear=' + $scope.PeriodToYearId
                                    + '&startdate=' + $scope.Startdate.toString() +'&enddate=' + $scope.Enddate.toString()  + '&otdays=' + $scope.otdays +'&ottime=' + $scope.ottime +'&OT='+ ot,

                        //    $http.post(baseUrl + 'api/OverTimeDetails/AttachExcelFile/?Id='+ $scope.OTTypeId,
                             fd,

                             {
                                 withCredentials: false,
                                 transformRequest: angular.identity,
                                 headers: {
                                     'Content-Type': undefined
                                 },
                                 params: {
                                     fd
                                     },

                             }
                             )
                                .success(function (response) {
                                    $scope.EmployeeDetails = response;
                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');

                                }).error(function (response) {
                                    $scope.Document_Upload = "";

                                });
                            });
                            $("#documentfile").val('');
                        };            
                    };


                    if($scope.OTName == 4)
                    {                    
                        if ($scope.LicenseFileName3 == '' || $scope.LicenseFileName3 == undefined) {
                            alert("Please Upload Employee OT Details");
                            return false;
                        }             
                             
                        else {
                  

                            var filename3 = "";
                            var Licensefilename3 = "";

                            var fd = new FormData();
                            var imgBlob;
                            var imgBlobfile;
                            var itemIndexLogo = -1;
                            var itemIndexfile = -1;

                            var fd = new FormData();

                            if ($('#Attendance3')[0].files[0] != undefined) {
                                Licensefilename3 = $('#Attendance3')[0].files[0]['name'];
                                imgBlobfile = $scope.dataURItoBlob($scope.licedoc4);
                                if (itemIndexLogo == -1) {
                                    itemIndexfile = 0;
                                }
                                else {
                                    itemIndexfile = 1;
                                }
                            }

                            if (itemIndexfile != -1) {
                                fd.append('file1', imgBlobfile);
                            }

                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            }, 3000); // 5 seconds

                          
                            var OTfromyear =$scope.OTFromYear_Name;
                            var OTtoyear =$scope.OTToYear_Name;
                            var OTfrommonth =$scope.OTFromMonth_Name;
                            var OTtomonth =$scope.OTToMonth_Name;

                            var ot =0; 
                        
                            var otdayscount =0;
                            var ottimetotal =0;
                            var otdays =0;
                            var othours =0;
                     
                            angular.forEach($scope.AddOvertime, function (value, index) {
                                var otdate =moment(value.OT_Date);                     
                           
                             
                                $scope.Startdate = [OTfromyear, $scope.PeriodFromMonth-1];                       
                                $scope.Enddate = ([OTtoyear, $scope.PeriodToMonthId-1]);
                           
                                days = (new Date($scope.PeriodFromYear, $scope.PeriodFromMonth, 0).getDate());  
                                daysto = (new Date($scope.PeriodToYearId, $scope.PeriodToMonthId, 0).getDate());                
                                $scope.otdays = (days+daysto);
                                $scope.ottime = (days+daysto)*24;                             
                          
                                $http.post(baseUrl + 'api/OverTimeDetails/AttachExcelFile/?Id='+ $scope.OTName + '&Periodfrommonth=' + $scope.PeriodFromMonth
                                    + '&Periodfromyear=' + $scope.PeriodFromYear+ '&Periodtomonth=' + $scope.PeriodToMonthId+ '&Periodtoyear=' + $scope.PeriodToYearId
                                    + '&startdate=' + $scope.Startdate.toString() +'&enddate=' + $scope.Enddate.toString()  + '&otdays=' + $scope.otdays +'&ottime=' + $scope.ottime +'&OT='+ ot,

                        //    $http.post(baseUrl + 'api/OverTimeDetails/AttachExcelFile/?Id='+ $scope.OTTypeId,
                             fd,

                             {
                                 withCredentials: false,
                                 transformRequest: angular.identity,
                                 headers: {
                                     'Content-Type': undefined
                                 },
                                 params: {
                                     fd
                                     },

                             }
                             )
                                .success(function (response) {
                                    $scope.EmployeeDetails = response;
                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');

                                }).error(function (response) {
                                    $scope.Document_Upload = "";

                                });
                            });
                            $("#documentfile").val('');
                        };            
                    };

                    //  });
               
                    //  angular.element('#OvertimeModel').modal('hide');                        
                    $scope.ClearOverTimePopup();
                };



                $scope.CancelPopup = function () {
                    //   alert("ss");
                    $scope.licedoc = "";
                    $scope.LicenseFileName = "";
                    $('#Attendance').val('');
                    $scope.EmployeeDetails = [];
                };


                $scope.CancelPopupupload = function () {
                    //   alert("ss");
                    $scope.PeriodFromMonth ="0";
                    $scope.PeriodFromYear ="0";
                    $scope.PeriodToMonthId ="0";
                    $scope.PeriodToYearId ="0";
                    $scope.OTName ="0";

                    $scope.licedoc1 = "";
                    $scope.OTDetailsName = "";
                    $scope.OTDetail = "";
                    $scope.OTHours ="";
                    // $scope.OTName ="";
                    $scope.OTHoursdetail ="";
                    $('#OT').val('');
                    $scope.OTDetails = [];
                    $scope.EmployeeDetails = [];
                    $scope.EmployeeDetails1 = [];
                    $scope.EmployeeDetails2 = [];
                    $scope.EmployeeDetails3 = [];
                };
            }      
    ]);

    //This is for ITLockPeriod controller functions//
    EmpControllers.controller("ITLockPeriodController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window','filterFilter',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {

            $scope.Id = 0;
            $scope.FromMonth_Id = "0";
            $scope.ToMonth_Id = "0";
            $scope.Financial_Year = "0";
            $scope.FromMonth = "0";
            $scope.FromYear = "0";
            $scope.ToMonth = "0";
            $scope.ToYear = "0";
            $scope.CompanyName = "0"; 

            //This is function for Pagination 
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            //This is for Month list
            $scope.MonthList = [];
            $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
                $scope.MonthList = data;
            });

            $scope.CompanyFilterList = [];
            $scope.CompanyNameList = [];
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            });

            //This is for Year list
            $scope.YearList = [];
            $http.get(baseUrl + 'api/Common/GetYearList/').success(function (data) {
                $scope.YearList = data;
            });
            $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
                $scope.getFyYear = data;

            });
            $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                $scope.getFyToYear = data;
            });
            $http.get(baseUrl + 'api/Common/GetFYList/').success(function (data) {
                $scope.getFinancialYear = data;
            });

            $scope.Validationcontrols = function () {
                if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                    alert("Please select Company");
                    return false;
                }
                else if (typeof ($scope.FromMonth) == "undefined" || $scope.FromMonth == 0) {
                    alert("Please select Financial From Month");
                    return false;
                }
                else if (typeof ($scope.FromYear) == "undefined" || $scope.FromYear == 0) {
                    alert("Please select Financial From Year");
                    return false;
                }
                else if (typeof ($scope.ToMonth) == "undefined" || $scope.ToMonth == 0) {
                    alert("Please select Financial To Month");
                    return false;
                }
                else if (typeof ($scope.ToYear) == "undefined" || $scope.ToYear == 0) {
                    alert("Please select Financial To Year");
                    return false;
                }
                else if (typeof ($scope.PeriodFrom_Date) == "undefined" || $scope.PeriodFrom_Date == "") {
                    alert("Please select Declaration Period From Date");
                    return false;
                }
                else if (typeof ($scope.PeriodTo_Date) == "undefined" || $scope.PeriodTo_Date == "") {
                    alert("Please select Declaration Period To Date");
                    return false;
                }

                else if (parseInt($scope.ToYear) < parseInt($scope.FromYear)) {
                    alert("Please select Financial To year greater than Financial From Year");
                    return false;
                }
                else if (ParseDate($scope.PeriodTo_Date) < ParseDate($scope.PeriodFrom_Date)) {
                    alert("Please select Period To Date greater than Period From Date");
                    return false;
                }
                return true;

            };


            $scope.Active_ErrorFunction = function () {
                alert("Inactive companies IT Declarations cannot be edited");
            };

            //This is function for List page 
            $scope.ITLockPeriod_ListSearch = function () {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $http.get(baseUrl + '/api/ITLockPeriod/ITLockPeriodList/?Id=' + $scope.Id + '&FinancialYear_Id=' + $scope.Financial_Year).success(function (data) {
                    //$http.get('/api/ITLockPeriod/ITLockPeriodList/?Id=' + $scope.Id).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                });
            };

            //This is function for List page 
            $scope.ITLockPeriod_ListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.Mode = 1;
                $scope.ITLockPeriod_ListSearch($scope.Id, $scope.Mode);
                // $scope.ListITLockPeriodPopUP(ListId);
            };

            $scope.ClearITLockPopup = function () {
                $scope.FromMonth = "0";
                $scope.FromYear = "0";
                $scope.ToMonth = "0";
                $scope.ToYear = "0";
                $scope.PeriodFrom_Date = "";
                $scope.PeriodTo_Date = "";
                $scope.CompanyName ="0";

            };

            //This is function for View & Edit POP UP
            $scope.AddITLockPeriodPopUP = function (CatId) {
                $scope.Id = CatId;
                //  $scope.ViewITLockPeriodDetails();
                angular.element('#ITLPModal').modal('show');
            };
            $scope.ViewITLockPeriodPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewITLockPeriodDetails();
                angular.element('#ITViewModal').modal('show');
            };
            $scope.EditITLockPeriodPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewITLockPeriodDetails();
                angular.element('#ITLPModal').modal('show');
            };
            $scope.ListITLockPeriodPopUP = function (CatId) {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.ITLockPeriod_ListSearch();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.ITLockPeriod_ListSearch();
                }
                if (CatId > 0) {
                    $scope.Id = CatId;
                    $scope.ITLockPeriod_ListSearch($scope.Id);
                }
            };

       


            //This is function for View page 
            $scope.ViewITLockPeriodDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/ITLockPeriod/GetITLockPeriod_ById/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.Id = data.Id;
                    $scope.CompanyName = data.CompanyId.toString();
                    $scope.listCompanyName = data.CompanyName;
                    //$scope.Financial_FromMonth = data.Financial_Year_FromMonth_Id.toString();
                    //$scope.listFinancial_FromMonth = data.Financial_FromMonth;
                    //$scope.Financial_Year_FromYear = data.Financial_Year_FromYear_Id.toString();
                    //$scope.listFinancial_Year_FromYear = data.Financial_Year_FromYear;
                    //$scope.Financial_ToMonth = data.Financial_Year_ToMonth_Id.toString();
                    //$scope.listFinancial_ToMonth = data.Financial_ToMonth;
                    ////$scope.Financial_ToMonth = data.Financial_ToMonth;
                    //$scope.Financial_Year_ToYear = data.Financial_Year_ToYear_Id.toString();
                    //$scope.listFinancial_Year_ToYear = data.Financial_Year_ToYear;
                    $scope.FromMonth = data.FromMonth_Id.toString();
                    $scope.ViewFromMonth = data.FromMonth;
                    $scope.FromYear = data.FromYear_Id.toString();
                    $scope.ViewFromYear = data.FromYear;
                    $scope.ToMonth = data.ToMonth_Id.toString();
                    $scope.ViewToMonth = data.ToMonth;
                    $scope.ToYear = data.ToYear_Id.toString();
                    $scope.ViewToYear = data.ToYear;              
                    $scope.PeriodFrom_Date = $filter('date')(data.PeriodFrom_Date, "dd-MMM-yyyy");
                    $scope.PeriodTo_Date = $filter('date')(data.PeriodTo_Date, "dd-MMM-yyyy");

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing IT Declaration Lock Period Details!" + data;
                });
            };

            $scope.DuplicateId =0;
            $scope.ToMonth =0;
            $scope.ToYear =0;
            $scope.FromMonth =0;
            $scope.FromYear =0;


            //This isthe values to create page 
            $scope.ITLockPeriod_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    $http.get(baseUrl + '/api/ITLockPeriod/ITLockPeriod_DuplicateCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName+ '&Financial_FromMonth=' + $scope.FromMonth+ '&Financial_Year_FromYear=' + $scope.FromYear + '&Financial_ToMonth=' + $scope.ToMonth + '&Financial_Year_ToYear=' + $scope.ToYear).success(function (data) {
                  
                        if (data == 1) {
                            alert("IT Declaration for this Company already exists, cannot duplicate");
                            return false;
                        }
                        else {

                            var obj = {
                                Id: $scope.Id,
                                CompanyId: $scope.CompanyName,
                                //Financial_Year_FromMonth_Id: $scope.Financial_FromMonth,
                                //Financial_Year_FromYear_Id: $scope.Financial_Year_FromYear,
                                //Financial_Year_ToMonth_Id: $scope.Financial_ToMonth,
                                //Financial_Year_ToYear_Id: $scope.Financial_Year_ToYear,
                                FromMonth_Id: $scope.FromMonth,
                                FromYear_Id: $scope.FromYear,
                                ToMonth_Id: $scope.ToMonth,
                                ToYear_Id: $scope.ToYear,
                                PeriodFrom_Date: $scope.PeriodFrom_Date,
                                PeriodTo_Date: $scope.PeriodTo_Date,
                            };
                            $http.post(baseUrl + '/api/ITLockPeriod/ITLockPeriod_AddEdit/', obj).success(function (data) {
                                $scope.AddId = data;
                                var AddId = data;
                                $scope.ListITLockPeriodPopUP($scope.AddId);
                                angular.element('#ITLPModal').modal('hide');
                                //$scope.CancelPopup();
                                $scope.ClearITLockPopup();
                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding IT Declaration Lock Period Details!" + data.ExceptionMessage;
                            });
                        }
                    });
                }
            };

            $scope.DeleteITLock = function (LRId) {
                $scope.Id = LRId;
                $scope.DeleteITLockPeriod_Details();
            };

            $scope.Id = 0;
            /* THIS IS FOR DELETE FUNCTION */
            $scope.DeleteITLockPeriod_Details = function () {
                var del = confirm("Do you like to inactivate the selected IT Lock period details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/ITLockPeriod/ITLockPeriod_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("IT Lock Period Details inactivated Successfully");
                        $scope.ITLockPeriod_ListGo($scope.Id = 0)
                        //window.location.href = baseUrl + "/Home/Index#/ITLockPeriodList";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while inactivated IT Lock Period Details" + data;
                    });
                }
            };

            $scope.rowCollection = [];
            $scope.flag = 0;

            /*calling Alert message for cannot edit inactive record function */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            };

            //on click active tool tip calling ReInsert function//
            $scope.ActiveITLockPeriod = function (canId) {
                $scope.Id = canId;
                $scope.ITLockPeriod_Active();
            };


            /* 
             Calling the api method to activate the details of the Resource 
             matching the specified Resource Id,
             and redirected to the list page.
            */
            $scope.ITLockPeriod_Active = function () {
                var Ins = confirm("Do you like to activate the selected IT Lock Period details?");
                if (Ins == true) {
                    $http.get(baseUrl + '/api/ITLockPeriod/ITLockPeriod_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected IT Lock Period details has been activated successfully");
                        $scope.ListITLockPeriodPopUP($scope.Id = 0);
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting IT Lock Period records" + data;
                    });
                }
            };
            $scope.ViewRedirect = function () {
                $location.path("/EditITLockPeriod/" + $scope.Id);
            }

            $scope.ListRedirect = function () {
                $location.path("/ITLockPeriodList/" + $scope.Id);
            }

            $scope.Listrec = function () {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
            };


            $scope.CancelView = function () {
                angular.element('#ITViewModal').modal('hide');
                $scope.ClearITLockPopup();
                $scope.ITLockPeriod_ListGo();
            }
            $scope.CancelPopup = function () {
                if ($scope.Id > 0) {
                    angular.element('#ITLPModal').modal('hide');
                    $scope.ClearITLockPopup();
                    $scope.ITLockPeriod_ListGo();
                }

                angular.element('#ITLPModal').modal('hide');
                $scope.ClearITLockPopup();
                //  $scope.Company_ListsearchGo();


            }


            //$scope.CancelPopup = function () {

            //    angular.element('#ITViewModal').modal('hide');
            //    angular.element('#ITLPModal').modal('hide');
            //    $scope.ClearITLockPopup();
            //}
        }
    ]);

    //This is for OtherIncomeDeduction controller functions//
    EmpControllers.controller("OtherIncomeDeductionController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
        function ($scope, $http, $routeParams, $location, $filter, $window) {

            //This is for Value Initialization //
            $scope.Id = 0;
            $scope.Name = "0";
            $scope.CategoryName = "0";

            //This is function for Pagination //
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            // This is for DropDown //
            $scope.IncomeTypeList = [];
            $http.get(baseUrl + 'api/OtherIncomeDeduction/GetIncomeTypeList/').success(function (data) {
                $scope.IncomeTypeList = data;
            });
            $scope.CategoryList = [];
            $http.get(baseUrl + 'api/OtherIncomeDeduction/GetCategoryList/').success(function (data) {
                $scope.CategoryList = data;
            });

            // This This is for Validation function //
            $scope.Validationcontrols = function () {
           
                 if (typeof ($scope.Name) == "undefined" || $scope.Name == 0) {
                    alert("Please select Type");
                    return false;
                }
                 else if (typeof ($scope.Category) == "undefined" || $scope.Category == "") {
                    alert("Please enter Category");
                    return false;
                }
                return true;
            };

            //To check if inctive record is tried to edit.
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }


            //This is function for List page //
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.OtherIncomeDeduction_ListSearch = function () {

                $http.get(baseUrl + '/api/OtherIncomeDeduction/OtherIncomeDeductionList/?Id=' + $scope.Id + '&Category=' + $scope.CategoryName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                });
            };

            $scope.OtherIncomeDeduction_ListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                //$scope.ListOtherIncomeDeductionPopUP(ListId);
                $scope.Mode = 1;
                $scope.OtherIncomeDeduction_ListSearch($scope.Id, $scope.Mode);
            };

            // This is function for View & Edit POP UP //
            $scope.AddOtherIncomeDeductionPopUP = function (CatId) {
                $scope.Id = CatId;
                // $scope.ViewOtherIncomeDeductionDetails();
                angular.element('#OtherIncomecategoryModal').modal('show');
            };
            $scope.ViewOtherIncomeDeductionPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewOtherIncomeDeductionDetails();
                angular.element('#ViewModal').modal('show');
            };
            $scope.EditOtherIncomeDeductionPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewOtherIncomeDeductionDetails();
                angular.element('#OtherIncomecategoryModal').modal('show');
            };
            $scope.ListOtherIncomeDeductionPopUP = function (CatId) {

                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.OtherIncomeDeduction_ListSearch();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.OtherIncomeDeduction_ListSearch();
                }
                if (CatId > 0) {
                    $scope.Id = CatId;
                    $scope.OtherIncomeDeduction_ListSearch();
                }
            }

            //This is function for View page //
            $scope.ViewOtherIncomeDeductionDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/OtherIncomeDeduction/GetOtherIncomeDeduction_ById/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.Category = data.Category;
                    $scope.Name = data.IncomeType_Id.toString();
                    $scope.ViewName = data.Name;
                    $scope.Remarks = data.Remarks;
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Other Income Deduction Details!" + data;
                });
            };

            $scope.DeleteOtherIncomeDeduction = function (LRId) {
                $scope.Id = LRId;
                $scope.DeleteOtherIncomeDeduction_Details();
            };
            // This is for Delete Function //
            $scope.DeleteOtherIncomeDeduction_Details = function () {
                var del = confirm("Do you like to inactivate the selected Income Detection detail?");
                if (del == true) {
                    $http.get(baseUrl + 'api/OtherIncomeDeduction/OtherIncomeDeduction_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected Other Income Deduction Details deleted Successfully");

                        $scope.OtherIncomeDeduction_ListGo();
                        //window.location.href = baseUrl + "/Home/Index#/OtherIncomeCategoryList/0";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Other Income Deduction Details" + data;
                    });
                }
            };

            $scope.ActivateOtherIncomeDeduction = function (LRId) {
                $scope.Id = LRId;
                $scope.ActivateOtherIncomeDeduction_Details();
            };
            // This is for Delete Function //
            $scope.ActivateOtherIncomeDeduction_Details = function () {
                var del = confirm("Do you like to activate the selected Income Detection detail?");
                if (del == true) {
                    $http.get(baseUrl + 'api/OtherIncomeDeduction/IncomeTaxDetails_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected Income Detection detail has been activated successfully");
                        $scope.OtherIncomeDeduction_ListGo();
                        //window.location.href = baseUrl + "/Home/Index#/OtherIncomeCategoryList/0";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Other Income Deduction Details" + data;
                    });
                }
            };

            // This is Clear the Popup Function //
            $scope.ClearOtherIncomePopup = function () {
                $scope.Category = "";
                $scope.Name = "0";
                $scope.Remarks = "";
            };
            $scope.DuplicateId = "0";
            // This is the values to Create Page //
            $scope.OtherIncomeDeduction_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    $http.get(baseUrl + '/api/OtherIncomeDeduction/OtherIncomeDeduction_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Category=' + $scope.Category).success(function (data) {
                        if (data == 1) {
                            alert("Category Name is already exists, cannot duplicate");
                            return false;
                        }
                        else {
                            var obj = {
                                Id: $scope.Id,
                                Category: $scope.Category,
                                IncomeType_Id: $scope.Name,
                                Remarks: $scope.Remarks
                            };
                            $http.post(baseUrl + '/api/OtherIncomeDeduction/OtherIncomeDeduction_AddEdit/', obj).success(function (data) {
                                $scope.AddId = data;
                                var AddId = data;
                                angular.element('#OtherIncomecategoryModal').modal('hide');
                                $scope.ListOtherIncomeDeductionPopUP($scope.AddId);
                                // $scope.CancelPopup();
                                $scope.ClearOtherIncomePopup();

                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding Other Income Deduction Details!" + data.ExceptionMessage;
                            });
                        }
                    }).error(function (data) {
                        $scope.error = "Problem in checking Category name duplicate!" + data.ExceptionMessage;
                    });
                }
            };

            $scope.ViewRedirect = function () {
                $location.path("/EditOtherIncomeDeduction/" + $scope.Id);
            }

            $scope.ListRedirect = function () {
                $location.path("/OtherIncomeCategoryList/" + $scope.Id);
            }

            //$scope.CancelPopup = function () {
            //    angular.element('#OtherIncomecategoryModal').modal('hide');
            //    angular.element('#ViewModal').modal('hide');
            //    $scope.ClearOtherIncomePopup();
            //}

            $scope.rowCollection = [];
            $scope.CancelView = function () {
                angular.element('#ViewModal').modal('hide');
                $scope.ClearOtherIncomePopup();
                $scope.OtherIncomeDeduction_ListGo();
            }
            $scope.CancelPopup = function () {
                if ($scope.Id > 0) {
                    angular.element('#OtherIncomecategoryModal').modal('hide');
                    $scope.ClearOtherIncomePopup();
                    $scope.OtherIncomeDeduction_ListGo();
                }

                angular.element('#OtherIncomecategoryModal').modal('hide');
                $scope.ClearOtherIncomePopup();
                //  $scope.Company_ListsearchGo();


            }
            $scope.CancelPopupButton = function () {
                angular.element('#OtherIncomecategoryModal').modal('hide');
                $scope.ClearOtherIncomePopup();
                $scope.FyconfigurationListGo();
            }

        }
    ]);

    EmpControllers.controller("IncomeTaxController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
       function ($scope, $http, $routeParams, $location, $filter, $window) {

           ///This is Declaration of variables//
           $scope.Id = 0;
           $scope.Id = "0";
           $scope.TaxlistName="";
           $scope.Company="0";
           $scope.Location="0";
           $scope.TaxDetails_Name="0";
           $scope.Company_Name = "0";
           $scope.Location_Name="0";
           $scope.Validity_FromMonth = "0";
           $scope.Validity_ToMonth = "0";
           $scope.Validity_FromYear = "0";
           $scope.Validity_ToYear = "0";
           $scope.FromMonthId = "0";
           $scope.ToMonthId = "0";
           $scope.Validity = "0";
           $scope.EmployeeTypeId = "0";
           $scope.CountryName = "0";
           $scope.AdjustmentmonthId = "0";
           $scope.StateName= "0";
           $scope.RoundOff_Frequency = "0";
           $scope.Taxablepay="0";
           $scope.ITCustomerRow = -1;
           $scope.TaxType_List = [];
           $scope.TaxType_ListDetails=[];
           $scope.TaxType="1";
           $scope.Deductionmode="0";
           $scope.TaxviewName="Income Tax";
           $scope.ChildId=0;
           $scope.ChildId="0";
           $scope.listdata = [];
           $scope.AddITCustomer =[];
           $scope.CompanyLocationDetails=[];
           $scope.FixedAmount="";
           //$scope.Percentage="";
           //$scope.TaxPercentage="";
   
           $scope.MinimumTaxableAmount="";
           $scope.MaximumTaxableAmount="";
           $scope.SurchargePercentage="";
           $scope.MarginalReliefApplicableId="0";
    
           $scope.current_page = 1;
           $scope.page_size = 30;
           $scope.rembemberCurrentPage = function (p) {
               $scope.current_page = p
           }

           /* THIS IS FOR LIST FUNCTION */
           $scope.IT_Listsearch = function () {
       

               $scope.emptydata = [];
               $scope.rowCollection = [];

               // if($scope.ListValidationcontrols()=true){

               //int Id,int CompanyId,int LocationId,int TaxTypeId, string TaxName
               $http.get(baseUrl + '/api/IncomeTaxConfiguration/IncomeTax_List/?Id=' + $scope.Id 
                   + '&CompanyId=' + $scope.Company + '&LocationId=' + $scope.Location +
                   '&TaxTypeId=' + $scope.TaxDetails_Name + '&TaxName=' + $scope.TaxlistName).success(function (data) {
                       $scope.emptydata = [];
                       $scope.rowCollection = [];
                       $scope.rowCollection = data;
                       console.log($scope.rowCollection);
          
                   }).error(function (data) {
                       $scope.error = "AN error has occured while Listing IT Configuration" + data;
                   });
               // }
       
           };

           /* THIS IS LIST FUNCTION FOR GO BUTTON */
           $scope.IT_Listsearchgo = function () {
               $scope.Id = 0;
               var ListId = $scope.Id;
               $scope.Mode = 1;
               //$scope.ListIncomeTaxPopUP(ListId);
               $scope.IT_Listsearch($scope.Id, $scope.Mode);
           };

           /* This is Validation Function for List Page*/
           $scope.ListValidationcontrols = function(){

               if(typeof($scope.TaxDetails_Name) == "undefined" || $scope.TaxDetails_Name == 0){
                   alert("Please Select Tax Type");
                   return false;
               }
               return true;


           }

   
           /* THIS IS FOR VALIDATION FUNCTION For Add/Edit Page*/

           $scope.Validationcontrols = function () {
      
        
       

       
               if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0) {
                   alert("Please select Company");
                   return false;
               }
                   //else if (typeof ($scope.Location_Name) == "undefined" || $scope.Location_Name == 0) {
                   //    alert("Please select Location");
                   //    return false;
                   //}
               else if (typeof ($scope.TaxType) == "undefined" || $scope.TaxType == 0) {
                   alert("Please select Tax Type");
                   return false;
               }
            
               else if (typeof ($scope.Validity_FromMonth) == "undefined" || $scope.Validity_FromMonth == 0) {
                   alert("Please select Validity From Month");
                   return false;
               }
               else if (typeof ($scope.Validity_FromYear) == "undefined" || $scope.Validity_FromYear == 0) {
                   alert("Please select Validity From Year");
                   return false;
               }
               else if (typeof ($scope.Validity_ToMonth) == "undefined" || $scope.Validity_ToMonth == 0) {
                   alert("Please select Validity To Month");
                   return false;
               }
               else if (typeof ($scope.Validity_ToYear) == "undefined" || $scope.Validity_ToYear == 0) {
                   alert("Please select Validity To Year");
                   return false;
               }
               else if (parseInt($scope.Validity_ToYear) < parseInt($scope.Validity_FromYear)) {
                   alert("Please enter IT configuration to year greater than IT configuration From Year");
                   return false;
               }

               angular.forEach($scope.AddITCustomer, function (value1, index1) {
                   console.log(value1.Taxablepay);
          
                   if (value1.CountryId == null && ($scope.TaxType==1 || $scope.TaxType==2 || $scope.TaxType==3))
                   {
                       alert("Please select Country");
                       return CountryId;
                   }
            
                   else if (value1.StateId == null  && $scope.TaxType==2) {
                       alert("Please select State");
                       return StateId;

                   }
                   else if (value1.GenderId == null && ($scope.TaxType==1 || $scope.TaxType==2 || $scope.TaxType==3)) {
                       alert("Please select Gender");
                       return GenderId;
                   }
                   else  if (value1.EmpTypeId == null && ($scope.TaxType==1 || $scope.TaxType==2 || $scope.TaxType==3)) {
                       alert("Please select Employee Type");
                       return EmpTypeId;
                   }

                   else if (value1.MinValue == null && ($scope.TaxType==1 || $scope.TaxType==2 || $scope.TaxType==3)) {
                       alert("Please enter Minimum Value");
                       return MinValue;

                   }

                   else if (value1.MaxValue == null && ($scope.TaxType==1 || $scope.TaxType==2 || $scope.TaxType==3)) {
                       alert("Please enter Maximum Value");
                       return MaxValue;

                   }

                       //else if (value1.TaxPercentage == null){
                       //    alert("Please enter Tax Percentage");
                       //    return false;
                       // }

                   else if (value1.FixedAmount == null && ($scope.TaxType==2 || $scope.TaxType==3 && value1.Taxablepay==1)) {
                       alert("Please enter Fixed Amount");
                       return FixedAmount;

                   }
           
                   else if (value1.TaxPercentage == null  && ($scope.TaxType==1 || $scope.TaxType==3 && value1.Taxablepay==2)){
                       alert("Please enter Tax Percentage");
                       return TaxPercentage;

                   }

                   else if (value1.AdjustmentmonthId == null  && $scope.TaxType==2) {
                       alert("Please select Adjustment Month");
                       return AdjustmentmonthId;

                   }
                   else if (value1.AdjustmentAmount == null  && $scope.TaxType==2) {
                       alert("Please select Adjustment Amount");
                       return AdjustmentAmount;

                   }

                   else if (value1.Taxablepay == 0  && $scope.TaxType==3) {
                       alert("Please select Taxable Pay");
                       return Taxablepay;

                   }

                   else if (value1.MinimumTaxableAmount == null  && $scope.TaxType==4) {
                       alert("Please enter Minimum Taxable Amount");
                       return MinimumTaxableAmount;

                   }

                   else if (value1.MaximumTaxableAmount == null  && $scope.TaxType==4) {
                       alert("Please enter Maximum Taxable Amount");
                       return MaximumTaxableAmount;

                   }

                   else if (value1.SurchargePercentage == null  && $scope.TaxType==4) {
                       alert("Please enter Surcharge Percentage");
                       return SurchargePercentage;

                   }
                   else if (value1.MarginalReliefApplicableId == null  && $scope.TaxType==4) {
                       alert("Please select Marginal Relief Applicable");
                       return MarginalReliefApplicableId;

                   }
            

               });
           
               return true;
        
           };

           /* THIS IS FOR DROPDOWN FUNCTION */
           /*COMPANY*/
           $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
               $scope.CompanyNameList = data;
           });
           /*MONTH*/
           $http.get(baseUrl + '/api/Common/GetMonthList/').success(function (data) {
               $scope.getMonth = data;
           });
           /*YEAR*/
           $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
               $scope.getYear = data;
           });
           /*FINANCIAL FROM YEAR*/
           $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
               $scope.getFyYear = data;
           });
           /*FINANCIAL TO YEAR*/
           $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
               $scope.getFyToYear = data;
           });

           /*ROUND OFF*/
           $http.get(baseUrl + 'api/Common/GetRoundOffList/').success(function (data) {
               $scope.GetRoundOff = data;
           });

           /*FINANCIAL GROUP BY FROM YEAR*/
           $http.get(baseUrl + 'api/Common/GroupBy_FromYear/').success(function (data) {
               $scope.GroupFromYear = data;
           });
           /*FINANCIAL GROUP BY TO YEAR*/
           $http.get(baseUrl + 'api/Common/GroupBy_ToYear/').success(function (data) {
               $scope.GroupToYear = data;
           });

           /*Getlocation by company*/       
           $http.get(baseUrl + 'api/Common/GetLocationName_ByCompany/').success(function (data) {
               //console.log(data);
               $scope.CompanyLocationList = data;
           });

           /*TaxType List*/
           $http.get(baseUrl + 'api/Common/GetTaxType_Name/').success(function (data) {
               console.log(data);
               $scope.TaxType_List = data;
               $scope.TaxType_ListDetails = data;
               console.log($scope.TaxType_List);
           });

           $scope.AutofillTaxName=function(){
       
               $http.get(baseUrl + 'api/Common/GetTaxName_ByTypeId/?Id='+ $scope.TaxType).success(function (data) {
           
                   $scope.TaxviewName = data[0].TaxName;
           
               });

           }

       
     
     

           /*GENDER TYPE*/
           $http.get(baseUrl + 'api/Common/GenderTypeList/').success(function (data) {
               $scope.GenderList = data;
           });
           $scope.GetGenderType = function (gender) {
               var genderId = gender;
               var gender_Name = "";
               if (gender > 0) {
                   gender_Name = $.grep($scope.GenderList, function (gender) {
                       return gender.Id == genderId;
                   })[0].Name;
               }
               return gender_Name;
           }

           /*COUNTRY*/
           $scope.CountryList = [];
           $http.get(baseUrl + 'api/Common/CountryList/').success(function (data) {
               $scope.CountryList = data;
           });
           $scope.GetCountryName = function (country) {
               var countryId = country;
               var country_Name = "";
               if (country > 0) {
                   tool_Name = $.grep($scope.CountryList, function (country) {
                       return country.Id == countryId;
                   })[0].CountryName;
               }
               return country_Name;
           }


           $scope.StateNameList = [];
           $http.get(baseUrl + 'api/Common/StateList/').success(function (data) {
               $scope.StateNameList = data;
           });
           $scope.GetStateList = function (state) {
               var state_Id = state;
               var state_Name = "";
               if (state > 0) {
                   tool_Name = $.grep($scope.StateNameList, function (state) {
                       return state.Id == state_Id;
                   })[0].StateName;
               }
               return state_Name;
           }

           $scope.AdjustMonthList = [];
           $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
               $scope.AdjustMonthList = data;
           });

           $scope.GetAdjustMonthList = function (adm) {
               var Month_NameId = adm;
               var Month_Name = "";
               if (adm > 0) {
                   tool_Name = $.grep($scope.AdjustMonthList, function (adm) {
                       return adm.Id == Month_NameId;
                   })[0].MonthName;
               }
               return Month_Name;
           }

           $scope.GetAdjustMonthList();


           $scope.EmployeeTypeArray = [{
               "EmpTypeId": 1,
               "EmployeeType": "Regular"
           }, {
               "EmpTypeId": 2,
               "EmployeeType": "Contract"
           },
           ];




           $scope.EmployeeName = function (EmployeeTypeId) {
               $scope.EmployeeTypeId = EmployeeTypeId;
               if ($scope.EmployeeTypeId == 1) {
                   $scope.EmployeeType = "Regular";
               }
               else if ($scope.EmployeeTypeId == 2) {
                   $scope.EmployeeType = "Contract";
               }

           }



           $scope.AddITCustomer =[];

           /*ARRAY LIST FOR THE CHILD TABLE CUSTOMER DETAILS */
           $scope.AddITCustomer = [{
               'Id': $scope.ChildId,
               'CountryId': $scope.CountryName == 0 ? null : $scope.CountryName,
               'StateId': $scope.StateName == 0 ? null : $scope.StateName,
               'GenderId': $scope.GenderName == 0 ? null : $scope.GenderName,
               'EmpTypeId': $scope.EmployeeType == 0 ? null : $scope.EmployeeType,
               'MinValue': $scope.MinValue,
               'MaxValue': $scope.MaxValue,

               'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount, 
               'TaxPercentage':$scope.TaxPercentage == "" ? null : $scope.TaxPercentage,
               'Taxablepay':$scope.Taxablepay== 0 ? null : $scope.Taxablepay,
               'AdjustmentmonthId':$scope.AdjustmentmonthId == 0 ? null : $scope.AdjustmentmonthId,
               'AdjustmentAmount': $scope.AdjustmentAmount == "" ? null : $scope.AdjustmentAmount,
               'MinimumTaxableAmount': $scope.MinimumTaxableAmount == "" ? null : $scope.MinimumTaxableAmount,
               'MaximumTaxableAmount':$scope.MaximumTaxableAmount == "" ? null : $scope.MaximumTaxableAmount,
               'SurchargePercentage':$scope.SurchargePercentage== "" ? null : $scope.SurchargePercentage,
               'MarginalReliefApplicableId':$scope.MarginalReliefApplicableId== 0 ? null : $scope.MarginalReliefApplicableId
           }];

           $scope.ClearITCustomer=function(){
               $scope.ITCustomerRow=-1;

               $scope.AddITCustomer = [{
                   'Id': $scope.ChildId,
                   'CountryId': $scope.CountryName == 0 ? null : $scope.CountryName,
                   'StateId': $scope.StateName == 0 ? null : $scope.StateName,
                   'GenderId': $scope.GenderName == 0 ? null : $scope.GenderName,
                   'EmpTypeId': $scope.EmployeeType == 0 ? null : $scope.EmployeeType,
                   'MinValue': $scope.MinValue == "" ? null : $scope.MinValue,
                   'MaxValue': $scope.MaxValue == "" ? null : $scope.MaxValue,

                   'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount, 
                   'TaxPercentage':$scope.TaxPercentage == "" ? null : $scope.TaxPercentage,
                   'Taxablepay':$scope.Taxablepay,
                   'AdjustmentmonthId':$scope.AdjustmentmonthId == 0 ? null : $scope.AdjustmentmonthId,
                   'AdjustmentAmount': $scope.AdjustmentAmount == "" ? null : $scope.AdjustmentAmount,
                   'MinimumTaxableAmount': $scope.MinimumTaxableAmount == "" ? null : $scope.MinimumTaxableAmount,
                   'MaximumTaxableAmount':$scope.MaximumTaxableAmount == "" ? null : $scope.MaximumTaxableAmount,
                   'SurchargePercentage':$scope.SurchargePercentage== "" ? null : $scope.SurchargePercentage,
                   'MarginalReliefApplicableId':$scope.MarginalReliefApplicableId== 0 ? null : $scope.MarginalReliefApplicableId
               }];
           }


   

           /* SAVE FUNCTION FOR THE CHILD TABLE CUSTOMER DETAILS */
           $scope.ITCustomerSave = function () {

               if ($scope.ITCustomerRow > 0) {
                   var obj = {
                       'Id': $scope.ChildId,
                       'CountryId': $scope.CountryName == 0 ? null : $scope.CountryName,
                       'StateId': $scope.StateName == 0 ? null : $scope.StateName,
                       'GenderId': $scope.GenderName == 0 ? null : $scope.GenderName,
                       'EmpTypeId': $scope.EmployeeType == 0 ? null : $scope.EmployeeType,
                       'MinValue': $scope.MinValue,
                       'MaxValue': $scope.MaxValue,

                       'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount, 
                       'TaxPercentage':$scope.TaxPercentage == "" ? null : $scope.TaxPercentage,
                       'Taxablepay':$scope.Taxablepay== 0 ? null : $scope.Taxablepay,
                       'AdjustmentmonthId':$scope.AdjustmentmonthId == 0 ? null : $scope.AdjustmentmonthId,
                       'AdjustmentAmount': $scope.AdjustmentAmount == "" ? null : $scope.AdjustmentAmount,
                       'MinimumTaxableAmount': $scope.MinimumTaxableAmount == "" ? null : $scope.MinimumTaxableAmount,
                       'MaximumTaxableAmount':$scope.MaximumTaxableAmount == "" ? null : $scope.MaximumTaxableAmount,
                       'SurchargePercentage':$scope.SurchargePercentage== "" ? null : $scope.SurchargePercentage,
                       'MarginalReliefApplicableId':$scope.MarginalReliefApplicableId== 0 ? null : $scope.MarginalReliefApplicableId
                   }

                   $scope.AddITCustomer[$scope.ITCustomerRow] = obj;

               }
               else {
                   $scope.AddITCustomer.push
                       ({
                           'Id': $scope.ChildId,
                           'CountryId': $scope.CountryName == 0 ? null : $scope.CountryName,
                           'StateId': $scope.StateName == 0 ? null : $scope.StateName,
                           'GenderId': $scope.GenderName == 0 ? null : $scope.GenderName,
                           'EmpTypeId': $scope.EmployeeType == 0 ? null : $scope.EmployeeType,
                           'MinValue': $scope.MinValue,
                           'MaxValue': $scope.MaxValue,

                           'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount, 
                           'TaxPercentage':$scope.TaxPercentage == "" ? null : $scope.TaxPercentage,
                           'Taxablepay':$scope.Taxablepay== 0 ? null : $scope.Taxablepay,
                           'AdjustmentmonthId':$scope.AdjustmentmonthId == 0 ? null : $scope.AdjustmentmonthId,
                           'AdjustmentAmount': $scope.AdjustmentAmount == "" ? null : $scope.AdjustmentAmount,
                           'MinimumTaxableAmount': $scope.MinimumTaxableAmount == "" ? null : $scope.MinimumTaxableAmount,
                           'MaximumTaxableAmount':$scope.MaximumTaxableAmount == "" ? null : $scope.MaximumTaxableAmount,
                           'SurchargePercentage':$scope.SurchargePercentage== "" ? null : $scope.SurchargePercentage,
                           'MarginalReliefApplicableId':$scope.MarginalReliefApplicableId== 0 ? null : $scope.MarginalReliefApplicableId
                       })
               }

           };

           /* THIS IS OPENING POP WINDOW FORM LIST FOR ADD,VIEW AND EDIT */
           $scope.AddIncomeTaxPopUP = function (ITId) {

               $scope.Id = ITId;
               // $scope.ViewIncomeTax();
               angular.element('#IncomeTax').modal('show');
               $scope.ClearIncomeTaxPopup();

           }
           $scope.ViewIncomeTaxPopUP = function (ITId) {
               $scope.Id = ITId;
               $scope.ViewIncomeTax();
               angular.element('#IncomeTaxView').modal('show');

           }
           $scope.EditIncomeTaxPopUP = function (ITId) {
               $scope.Id = ITId;
               $scope.ViewIncomeTax();
               angular.element('#IncomeTax').modal('show');
           }
           $scope.ListIncomeTaxPopUP = function (ITId) {
               if ($routeParams.Id == 0) {
                   $scope.rowCollection = [];
               }
               if ($scope.Id == 0 && $scope.Mode == 1) {

                   $scope.IT_Listsearch();
               }
               else if ($scope.Id > 0 && $scope.Mode == 1) {

                   $scope.IT_Listsearch();
               }
               if (ITId > 0) {
                   $scope.Id = ITId;
                   $scope.IT_Listsearch();
               }
           }

           $scope.rowCollection = [];

           /* THIS IS VIEW FUNCTION */
           $scope.ViewIncomeTax = function () {

               if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                   $scope.Id = $routeParams.Id
                   $scope.MasterId = $routeParams.Id;
               }
               $http.get(baseUrl + 'api/IncomeTaxConfiguration/IncomeTax_View/?Id=' + $scope.Id).success(function (data) {
                   console.log(data.LocationName);
                   console.log(data.Validity_ToYear);

                   $scope.Id=data.Id;

                   $scope.Company_Name = data.CompanyId.toString();
                   $scope.ViewCompanyName = data.CompanyName;

                   $scope.Location_Name=data.LocationId.toString();
                   $scope.ViewLocationName=data.LocationName;

                   $scope.TaxType = data.TaxTypeId.toString();
                   $scope.ViewTaxType = data.TaxType;
                   $scope.TaxviewName = data.TaxName;

                   $scope.DeductionModeName = data.Deductionmode.toString();
                   $scope.ViewDeductionModeName = data.DeductionModeName;

                   $scope.Remarks = data.Description;
           
                   $scope.Validity_FromMonth = data.Validity_FromMonthId.toString();
                   $scope.listValidity_FromMonth = data.Validity_FromMonth;

                   $scope.Validity_FromYear = data.Validity_FromYearId.toString();
                   $scope.listValidity_FromYear = data.Validity_FromYear;

                   $scope.Validity_ToMonth = data.Validity_ToMonthId.toString();
                   $scope.listValidity_ToMonth = data.Validity_ToMonth;

                   $scope.Validity_ToYear = data.Validity_ToYearId.toString();
                   $scope.listValidity_ToYear = data.Validity_ToYear;

                   $scope.Override = data.Override;
                   $scope.RoundOff = data.RoundOff;

                   $scope.RoundOff_Frequency = data.RoundOff_FrequencyId.toString();
                   $scope.listRoundOff_Frequency = data.RoundOff_Frequency;

                   console.log($scope.Id);
                   $http.get(baseUrl + '/api/IncomeTaxConfiguration/ITCustomerDetails_View/?Id=' + $scope.Id).success(function (ITdata) {
                       console.log(ITdata);

                       $scope.AddITCustomer = ITdata;
                       console.log($scope.AddITCustomer);

                   }).error(function (ITdata) {
                       $scope.error = "AN error has occured while list Income Tax!" + ITdata;
                   });
               }).error(function (ITdata) {
                   $scope.error = "AN error has occured while list Income Tax!" + ITdata;
               });

           };

           $scope.DeleteIT = function(LRId) {
               $scope.Id = LRId;
               $scope.IncomeTax_Delete();
           };

           /* THIS IS FOR DELETE FUNCTION */
           $scope.IncomeTax_Delete = function () {
               var del = confirm("Do you like to activate the selected it configuration details?");
               if (del == true) {
                   $http.get(baseUrl + 'api/IncomeTaxConfiguration/IncomeTax_Delete/?Id=' + $scope.Id).success(function (data) {
                       alert("It configuration Details deleted Successfully");
                       $scope.IT_Listsearchgo();
                       // window.location.href = baseUrl + "/Home/Index#/IncomeTaxList";
                   }).error(function (data) {
                       $scope.error = "An error has occurred while deleting IncomeTax" + data;
                   });
               }
           };


           /* 
             Calling the api method to inactived the details of the company branch
             for the  branch Id,
             and redirected to the list page.
             */
           $scope.ReInsertIncomeTaxConfigurationDetails = function () {
               var Ins = confirm("Do you like to activate the selected it configuration details?");
               if (Ins == true) {
                   $http.get(baseUrl + 'api/IncomeTaxConfiguration/IncomeTaxDetails_Active/?Id=' + $scope.Id).success(function (data) {
                       alert("Selected it configuration details has been activated successfully");
                       $scope.IT_Listsearchgo($scope.Id = 0);
                       // $scope.CompanyBranchMaster_ListSearch();
                       //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                   }).error(function (data) {
                       $scope.error = "An error has occurred while ReInserting Company branch Detail" + data;
                   });
               };
           };

           //ReInsert popup function//
           $scope.ReInsertIt = function (comId) {
               $scope.Id = comId;
               $scope.ReInsertIncomeTaxConfigurationDetails();
           };



           /*calling Alert function for cannot edit inactive record */
           $scope.ErrorFunction = function () {
               alert("Inactive record cannot be edited");
           }

           /* THIS IS FOR CLEAR FUNCTION */
           $scope.ClearIncomeTaxPopup = function () {
        
               //$scope.TaxName = "0";
               $scope.Company_Name="0";
               $scope.Location_Name="0";
               $scope.TaxType="1";
               $scope.TaxviewName="Income Tax";
               $scope.Deductionmode="0";
               $scope.Validity_FromYear = "0";
               $scope.Validity_FromMonth = "0";
               $scope.Validity_ToYear = "0";
               $scope.Validity_ToMonth = "0";
               $scope.Remarks = "";
               $scope.Override = "";
               $scope.RoundOff = "";
               $scope.RoundOff_Frequency = "0";
               $scope.AddITCustomer = [{
                   'Id': $scope.ChildId,
                   'CountryId': $scope.CountryName == 0 ? null : $scope.CountryName,
                   'StateId': $scope.StateName == 0 ? null : $scope.StateName,
                   'GenderId': $scope.GenderName == 0 ? null : $scope.GenderName,
                   'EmpTypeId': $scope.EmployeeType == 0 ? null : $scope.EmployeeType,
                   'MinValue': $scope.MinValue == "" ? null : $scope.MinValue,
                   'MaxValue': $scope.MaxValue == "" ? null : $scope.MaxValue,

                   'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount, 
                   'TaxPercentage':$scope.TaxPercentage == "" ? null : $scope.TaxPercentage,
                   'Taxablepay':$scope.Taxablepay== 0 ? null : $scope.Taxablepay,
                   'AdjustmentmonthId':$scope.AdjustmentmonthId == 0 ? null : $scope.AdjustmentmonthId,
                   'AdjustmentAmount': $scope.AdjustmentAmount == "" ? null : $scope.AdjustmentAmount,
                   'MinimumTaxableAmount': $scope.MinimumTaxableAmount == "" ? null : $scope.MinimumTaxableAmount,
                   'MaximumTaxableAmount':$scope.MaximumTaxableAmount == "" ? null : $scope.MaximumTaxableAmount,
                   'SurchargePercentage':$scope.SurchargePercentage== "" ? null : $scope.SurchargePercentage,
                   'MarginalReliefApplicableId':$scope.MarginalReliefApplicableId== 0 ? null : $scope.MarginalReliefApplicableId
               }];


           };

           //$scope.ClearITPopup = function () {
           //    $scope.ITCustomerRow = -1;
           //    $scope.MinLimit = [],
           //    $scope.MaxLimit = [],
           //    $scope.Consideration = [],
           //    $scope.CountryName = [],
           //    $scope.GenderName = [],
           //    $scope.EmployeeType = [],
           //    $scope.Cess = [],
           //    $scope.HCess = [],
           //    $scope.SurCharge = []
           //    $scope.ITCustomerSave();
           //};


           /* THIS IS FOR ADD EDIT FUNCTION */
           $scope.IncomeTax_AddEdit = function () {
               var obj = {
                   Id: $scope.Id,
                   CompanyId:$scope.Company_Name,
                   LocationId:$scope.Location_Name == 0 ? null : $scope.Location_Name,
                   TaxTypeId:$scope.TaxType,
                   Deductionmode:$scope.Deductionmode == 0 ? null : $scope.Deductionmode,
                   Validity_FromYearId: $scope.Validity_FromYear== 0 ? null : $scope.Validity_FromYear,
                   Validity_FromMonthId: $scope.Validity_FromMonth== 0 ? null : $scope.Validity_FromMonth,
                   Validity_ToYearId: $scope.Validity_ToYear== 0 ? null : $scope.Validity_ToYear,
                   Validity_ToMonthId: $scope.Validity_ToMonth == 0 ? null : $scope.Validity_ToMonth,
                   Description: $scope.Remarks,
                   Override: $scope.Override == 0 ? null : $scope.Override,
                   RoundOff: $scope.RoundOff == 0 ? null : $scope.RoundOff,
                   RoundOff_FrequencyId: $scope.RoundOff_Frequency == 0 ? null : $scope.RoundOff_Frequency,
               };
               console.log(obj);
               $http.post(baseUrl + '/api/IncomeTaxConfiguration/IncomeTax_AddEdit/', obj).success(function (data) {
                   $scope.ITConfiguration_Id = data;
                   var IncomeTaxId = data;
                   $scope.MasterId = data;
                   angular.forEach($scope.AddITCustomer, function (value, index) {
                       value.ITConfiguration_Id = $scope.ITConfiguration_Id

                   });
                   console.log($scope.AddITCustomer);
                   $http.post(baseUrl + '/api/IncomeTaxConfiguration/ITCustomerDetails_AddEdit/', $scope.AddITCustomer).success(function (data) {
                       // $scope.AddId = data;        
                       $scope.ListIncomeTaxPopUP($scope.MasterId);

                       angular.element('#IncomeTax').modal('hide');
                       //$scope.CancelPopup();
                       $scope.AddITCustomer = [];
                       $scope.ClearIncomeTaxPopup();
                       // $scope.ClearITPopup();
                   }).error(function (data) {
                       $scope.error = "An error has occurred while adding IncomeTax!" + data.ExceptionMessage;
                   });
               }).error(function (data) {
                   $scope.error = "An error has occurred while adding IncomeTax!" + data.ExceptionMessage;
               });
           };


           /* THIS IS FUNCTION FOR REMOVE ROW  */
           $scope.RemoveItem = function () {

               var AddLWFCustomer_Item = [];
               if ($scope.Id == undefined) {
                   angular.forEach($scope.AddITCustomer, function (selectedQual) {
                       if (!selectedQual.selectedQual) {
                           AddLWFCustomer_Item.push(selectedQual);
                       }

                       $scope.AddITCustomer = AddLWFCustomer_Item;
                   });
               }
               if ($scope.Id > 0) {
                   angular.forEach($scope.AddITCustomer, function (selectedQual, index) {
                       if (selectedQual.selectedQual) {
                           $scope.RemoveItId = selectedQual.Id;
                           $scope.IncomeTaxCustomerDelete();
                       }
                       if (!selectedQual.selectedQual) {
                           AddLWFCustomer_Item.push(selectedQual);
                       }
                       $scope.AddITCustomer = AddLWFCustomer_Item;

                   });

               }

           };


           /* THIS IS FOR DELETE FUNCTION */
           $scope.IncomeTaxCustomerDelete = function () {
               $http.get(baseUrl + 'api/IncomeTaxConfiguration/IncomeTaxCustomer_Delete/?Id=' + $scope.RemoveItId).success(function (data) {
                   //   alert("Do You Want To Delete?");
                   //   window.location.href = "/Home/Index#/IncomeTaxList";
               }).error(function (data) {
                   $scope.error = "An error has occurred while deleting IncomeTax" + data;
               });
           };

           $scope.CancelView = function () {
               $scope.AddITCustomer = [];
               angular.element('#IncomeTaxView').modal('hide');
               $scope.ClearIncomeTaxPopup();
               // $scope.ClearITPopup();
               $scope.IT_Listsearchgo();
           }
           $scope.CancelPopup = function () {
               if ($scope.Id > 0) {
                   $scope.AddITCustomer = [];
                   angular.element('#IncomeTax').modal('hide');
                   $scope.ClearIncomeTaxPopup();
                   $scope.IT_Listsearchgo();
                   // $scope.ClearITPopup();
               }
               $scope.AddITCustomer = [];
               angular.element('#IncomeTax').modal('hide');
               $scope.ClearIncomeTaxPopup();
               // $scope.ClearITPopup();
               //$scope.IT_Listsearchgo();


           }
           //$scope.CancelPopupButton = function () {
           //    angular.element('#FyconfigurationModal').modal('hide');
           //    $scope.ClearPopup();
           //    $scope.FyconfigurationListGo();
           //}

           /* THIS IS FUNCTION FOR CLOSE POP WINDOW  */
           //$scope.CancelPopup = function () {

           //    $scope.AddITCustomer = [];
           //    angular.element('#IncomeTax').modal('hide');
           //    angular.element('#IncomeTaxView').modal('hide');
           //    $scope.ClearIncomeTaxPopup();
           //    $scope.ClearITPopup();
           //}


           /*on click Remove IncomeTax Customer Filed its calling the 
               IncomeTax Customer delete funtion */
           $scope.RemoveIncomeTax_Item = function (rowIndex) {
               var del = confirm("Do you like to delete this Income tax Item?");
               if (del == true) {
                   var IncomeTax_Item = [];

                   if ($scope.Id == undefined) {
                       alert("aa");
                       //alert('Are you sure to delete this record?');
                       angular.forEach($scope.AddITCustomer, function (SelectedIt, index) {
                           if(index!=rowIndex)                        
                               IncomeTax_Item.push(SelectedIt);
                        

                       });
                       $scope.AddITCustomer = IncomeTax_Item;
                   }
                   else if ($scope.Id > 0) {
                       angular.forEach($scope.AddITCustomer, function (SelectedIt, index) {
                           if (index==rowIndex)  {
                               $scope.RemoveItId = SelectedIt.Id;
                               $scope.IncomeTaxCustomerDelete();

                           }
                           else 
                           {
                               IncomeTax_Item.push(SelectedIt);
                           }
                       });
                
                       $scope.AddITCustomer = IncomeTax_Item;
                   }
               }
           };

   


           /* THIS IS FUNCTION FOR SELECTED ALL THE ROW TO REMOVE  */
           $scope.checkAll = function () {
               if (!$scope.selectedallQual) {
                   $scope.selectedallQual = true;
               } else {
                   $scope.selectedallQual = false;
               }
               angular.forEach($scope.AddITCustomer, function (row) {
                   row.selectedQual = $scope.selectedallQual;
               });
           };

           /*TAX TYPE*/
           $http.get(baseUrl + 'api/Common/TaxTypeList/').success(function (data) {
               $scope.TaxTypeList = data;
           });


           $scope.GetDispalyName = function (NameId) {

               $scope.Name_Id = NameId;
               $http.get(baseUrl + 'api/Common/GetDispalyNameList/?Id=' + $scope.Name_Id).success(function (data) {
                   $scope.Name_Id = data.Id;
                   $scope.Name = data.Name;
                   $scope.DisplayName = data.DisplayName;

               }).error(function (data) {
                   $scope.error = "an error has occurred while Viewing Display Name list" + data;
               });
           };

       }
    ]);

    //This is for PTConfiguration controller functions//
    EmpControllers.controller("PTConfigurationController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {


                $scope.Id = 0;
                $scope.Id = "0";
                $scope.Company_Name = "0";
                $scope.Validity_FromMonth = "0";
                $scope.Validity_ToMonth = "0";
                $scope.Validity_FromYear = "0";
                $scope.Validity_ToYear = "0";
                $scope.TaxName = "0";
                $scope.DisplayName = "";
                $scope.FromMonthId = "0";
                $scope.ToMonthId = "0";
                $scope.Validity = "0";
                $scope.StateName = "0";
                $scope.CountryName = "0";
                $scope.Tax_Name = "0";
                $scope.TaxName = "0";
                $scope.CountryName = "0";
                $scope.RoundOff_Frequency = "0";
                $scope.PaymentFrequency = "0";
                $scope.Amtselection = "0";
                $scope.Percentage = "";
                $scope.PTCustomerRow = -1;
                $scope.AddPTCustomer = [];
                $scope.Override = "0";
                $scope.Roundoff = "0";
                /* THIS IS FOR VALIDATION FUNCTION */
                /* Showing alert when inactive record is try to edit in the list page */
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }

                $scope.rowCollection = [];
                $scope.listdata = [];
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }

                /* THIS IS FOR LIST FUNCTION */
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.flag = 0;
                $scope.PT_Listsearch = function () {

                    $http.get(baseUrl + '/api/PTConfiguration/PTConfiguration_List/?Id=' + $scope.Id + '&TaxTypeId=' + $scope.Tax_Name).success(function (data) {
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting PT Configuration" + data;
                    });
                };

                /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
                $scope.PT_Listsearchgo = function () {
                    $scope.Id = 0;
                    var ListId = $scope.Id;
                    // $scope.ListPTPopUP(ListId);
                    $scope.Mode = 1;
                    $scope.PT_Listsearch($scope.Id, $scope.Mode);
                };

                /* THIS IS FOR VALIDATION FUNCTION */
                $scope.Validationcontrols = function () {

                    if (typeof ($scope.TaxName) == "undefined" || $scope.TaxName == 0) {
                        alert("Please select Tax Type");
                        return TaxName;
                    }
                    else if (typeof ($scope.Validity_FromMonth) == "undefined" || $scope.Validity_FromMonth == 0) {
                        alert("Please select Validity From Month");
                        return Validity_FromMonth;
                    }
                    else if (typeof ($scope.Validity_FromYear) == "undefined" || $scope.Validity_FromYear == 0) {
                        alert("Please select Validity From Year");
                        return Validity_FromYear;
                    }
                    else if (typeof ($scope.Validity_ToMonth) == "undefined" || $scope.Validity_ToMonth == 0) {
                        alert("Please select Validity To Month");
                        return Validity_ToMonth;
                    }
                    else if (typeof ($scope.Validity_ToYear) == "undefined" || $scope.Validity_ToYear == 0) {
                        alert("Please select Validity To Year");
                        return Validity_ToYear;
                    }
        
                    var count = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.CountryId > 0) {
                            count = 1;
                        }
                    });
                    stat = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.StateId > 0) {
                            stat = 1;
                        }
                    });

                    gen = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.GenderTypeId > 0) {
                            gen = 1;
                        }
                    });
               
                    var payfre= 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.PaymentFrequencyId > 0) {
                            payfre = 1;
                        }
                    });
                
                    var min = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.MinLimit > 0) {
                            min = 1;
                        }
                    });
                    var max = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.MaxLimit > 0) {
                            max = 1;
                        }
                    });
                    var consider = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.Percentage < 100) {
                            consider = 1;
                        }
                    });
                    var min = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.MinLimit < value.MaxLimit) {
                            min = 1;
                        }
                    });

                    var amts = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.Amtselection >0) {
                            amts = 1;
                        }
                    });
                    var amount = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.Amount >0) {
                            amount = 1;
                        }
                    });
                    var percent = 0;
                    angular.forEach($scope.AddPTCustomer, function (value, index) {
                        if (value.Percentage >0) {
                            percent = 1;
                        }
                    });


                    if (parseInt($scope.Validity_ToYear) < parseInt($scope.Validity_FromYear)) {
                        alert("Please enter PT configuration to year greater than PT configuration From Year");
                        return false;
                    }

                        //else if ($scope.AddPTCustomer.length < 1 || min == 0) {
                        //    alert("Please enter minimum length is greater than maximum limit");
                        //    return false;
                        //}
                    else if ($scope.AddPTCustomer.length < 1 || consider == 0) {
                        alert("Please enter percentage less than 100");
                        return consider;
                    }
                    else if ($scope.AddPTCustomer.length < 1 || count == 0) {
                        alert("Please Select Country");
                        return AddPTCustomer.length;
                    }
                    else if ($scope.AddPTCustomer.length < 1 || stat == 0) {
                        alert("Please Select State");
                        return AddPTCustomer.length;
                    }
                
                    else if ($scope.AddPTCustomer.length < 1 || gen == 0) {
                        alert("Please Select Gender");
                        return AddPTCustomer.length;
                    }
                    else if ($scope.AddPTCustomer.length <1 || payfre ==0 )
                    {
                        alert("Please Select Payment Frequency");
                        return AddPTCustomer.length;
                    }
                
                    else if ($scope.AddPTCustomer.length < 1 || min == 0) {
                        alert("Please Enter Minimum Limit");
                        return AddPTCustomer.length;
                    }
                    else if ($scope.AddPTCustomer.length < 1 || max == 0) {
                        alert("Please Select  Maximum Limit");
                        return AddPTCustomer.length;
                    }
                    else if ($scope.AddPTCustomer.length < 1 || amts == 0) {
                        alert("Please Select Amount Type");
                        return AddPTCustomer.length;
                    }

                    //else if ($scope.AddPTCustomer.length > 1 || amts ==1) {
                    
                    //    if($scope.AddPTCustomer.length < 1 || amount == 0)
                    //    {
                    //        alert("Please Enter Amount");
                    //        return true;
                    //    }

                    //    else if($scope.AddPTCustomer.length > 1 || amts ==1)
                    //    {
                    //        if($scope.AddPTCustomer.length < 1 || percent == 0)
                    //        {
                    //            alert("Please Enter Percentage");

                    //            return true;
                    //        }
                        
                    //    }       
                    //}
                
                    return true;
                
                };
      
                /* THIS IS FOR DROPDOWN FUNCTION */
                /*COMPANY*/
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    $scope.CompanyNameList = data;
                });
                /*YEAR*/
                $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
                    $scope.getYear = data;
                });
                /*FINANCIAL FROM YEAR*/
                $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
                    $scope.getFyYear = data;
                });
                /*FINANCIAL TO YEAR*/
                $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                    $scope.getFyToYear = data;
                });
                /*MONTH*/
                $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
                    $scope.MonthList = data;
                });
                /*TAX TYPE*/
                $scope.TaxTypeList = [];
                // $scope.TaxTypeListFilter = [];
                $http.get(baseUrl + 'api/Common/TaxTypeList/').success(function (data) {
                    $scope.TaxTypeList = data;
                    $scope.TaxTypeListFilter = $ff(data, { IsActive: 1 });
                });
                /*GENDER TYPE*/
                $http.get(baseUrl + 'api/Common/GenderTypeList/').success(function (data) {
                    $scope.GenderList = data;
                });
                /*ROUND OFF*/
                $scope.RoundOffList = [];
                //  $scope.RoundOffListFilter = [];
                $http.get(baseUrl + 'api/Common/GetRoundOffList/').success(function (data) {
                    $scope.RoundOffList = data;
                    $scope.RoundOffListFilter = $ff(data, { Active: 1 });
              
                });
                /*PAYMENT FREQUENCY LIST*/
                $http.get(baseUrl + 'api/Common/GetPaymentFrequencyList/').success(function (data) {
                    $scope.PaymentFrequencyList = data;
                });

                /*FINANCIAL GROUP BY FROM YEAR*/
                $http.get(baseUrl + 'api/Common/GroupBy_FromYear/').success(function (data) {
                    $scope.GroupFromYear = data;
                });
                /*FINANCIAL GROUP BY TO YEAR*/
                $http.get(baseUrl + 'api/Common/GroupBy_ToYear/').success(function (data) {
                    $scope.GroupToYear = data;
                });

                $scope.GetPaymentFreq = function (PaymentFreq) {
                    var PaymentFreqId = PaymentFreq;
                    var PaymentFreq_Name = "";
                    if (PaymentFreq > 0) {
                        PaymentFreq_Name = $.grep($scope.GenderList, function (gender) {
                            return PaymentFreq.Id == PaymentFreqId;
                        })[0].Name;
                    }
                    return PaymentFreq_Name;
                }
                $scope.GetGenderType = function (gender) {
                    var genderId = gender;
                    var gender_Name = "";
                    if (gender > 0) {
                        gender_Name = $.grep($scope.GenderList, function (gender) {
                            return gender.Id == genderId;
                        })[0].Name;
                    }
                    return gender_Name;
                }
                /*COUNTRY*/
                $http.get(baseUrl + 'api/Common/CountryList/').success(function (data) {
                    $scope.CountryList = data;
                });
                $scope.GetCountryName = function (country) {
                    var countryId = country;
                    var country_Name = "";
                    if (country > 0) {
                        tool_Name = $.grep($scope.CountryList, function (country) {
                            return country.Id == countryId;
                        })[0].CountryName;
                    }
                    return country_Name;
                }
                /*STATE*/
                $scope.StateList = [];
                $http.get(baseUrl + 'api/Common/StateList/').success(function (data) {
                    $scope.StateList = data;
                });
                $scope.GetStateName = function (State) {
                    var StateId = State;
                    var State_Name = "";
                    if (State > 0) {
                        tool_Name = $.grep($scope.StateList, function (State) {
                            return State.Id == StateId;
                        })[0].StateName;
                    }
                    return State_Name;
                }

                $scope.AmountType = [{
                    "AmtTypeId": "1",
                    "Amtsel": "Amount"
                }, {
                    "AmtTypeId": "2",
                    "Amtsel": "Percentage"
                },
                ];

                $scope.AmountTypeName = function (Amtselection) {
                    $scope.Amtselection = Amtselection;
                    if ($scope.Amtselection == 1) {
                        $scope.Amtselection = "1";
                        $scope.Amtsel = "Amount";
                    }
                    else if ($scope.Amtselection == 2) {
                        $scope.Amtselection = "2";
                        $scope.Amtsel = "Percentage";
                    }
                }

                $scope.AmountName = function (Amount) {
                    $scope.Amount = Amount;

                    // $scope.Percentage = Percentage;
                    if (Amount > 0) {
                        $scope.Amtselection = 1;
                        $scope.Amtsel = "Amount";
                        //  console.log(Amount);
                    }
                    else {
                        $scope.Amtselection = 2;
                        $scope.Amtsel = "Percentage";
                    }
                }


                /* ARRAY LIST FOR THE CHILD TABLE CUSTOMER DETAILS */
                $scope.AddPTCustomer = [{
                    'Id': $scope.ChildId,
                    'MinLimit': $scope.MinLimit,
                    'MaxLimit': $scope.MaxLimit,
                    'Amount': $scope.Amount == "" ? null : $scope.Amount,
                    'Percentage': $scope.Percentage == "" ? null : $scope.Percentage,
                    //'Consideration': $scope.Consideration == "" ? null : $scope.Consideration,
                    'CountryId': $scope.CountryName,
                    'PaymentFrequencyId': $scope.PaymentFrequency,
                    'StateId': $scope.StateName,
                    'GenderTypeId': $scope.GenderName,
                    'Amtselection': $scope.AmountTypeName($scope.Amtsel),
                }];

                /* SAVE FUNCTION FOR THE CHILD TABLE CUSTOMER DETAILS */
                $scope.PTCustomerSave = function () {
                    if ($scope.PTCustomerRow >= 0) {
                        var obj = {
                            'Id': $scope.ChildId,
                            'MinLimit': $scope.MinLimit,
                            'MaxLimit': $scope.MaxLimit,
                            'Amount': $scope.Amount == "" ? null : $scope.Amount,
                            'Percentage': $scope.Percentage == "" ? null : $scope.Percentage,
                            // 'Consideration': $scope.Consideration == "" ? null : $scope.Consideration,
                            'CountryId': $scope.CountryName,
                            'PaymentFrequencyId': $scope.PaymentFrequency,
                            'StateId': $scope.StateName,
                            'GenderTypeId': $scope.GenderName,
                            'Amtselection': $scope.AmountTypeName($scope.Amtsel),
                        }
                        $scope.AddPTCustomer[$scope.PTCustomerRow] = obj;
                    }
                    else {
                        $scope.AddPTCustomer.push({
                            'Id': $scope.ChildId,
                            'MinLimit': $scope.MinLimit,
                            'MaxLimit': $scope.MaxLimit,
                            'Amount': $scope.Amount == "" ? null : $scope.Amount,
                            'Percentage': $scope.Percentage == "" ? null : $scope.Percentage,
                            //'Consideration': $scope.Consideration == "" ? null : $scope.Consideration,
                            'CountryId': $scope.CountryName,
                            'PaymentFrequencyId': $scope.PaymentFrequency,
                            'StateId': $scope.StateName,
                            'GenderTypeId': $scope.GenderName,
                            'Amtselection': $scope.AmountTypeName($scope.Amtsel)
                        })
                    }
                };
     
                /* THIS IS OPENING POP WINDOW FORM LIST FOR ADD,VIEW AND EDIT */
                $scope.AddPTPopUP = function (PTId) {
                    $scope.Id = PTId;
                    //  $scope.ViewPT();
                    angular.element('#PT').modal('show');
                }
                $scope.ViewPTPopUP = function (PTId) {
                    $scope.Id = PTId;
                    $scope.ViewPT();
                    angular.element('#PTView').modal('show');
                }
                $scope.EditPTPopUP = function (PTId) {
                    $scope.Id = PTId;
                    $scope.ViewPT();

                    angular.element('#PT').modal('show');
                }
                $scope.ListPTPopUP = function (PTId) {
                    if ($routeParams.Id == 0) {
                        $scope.rowCollection = [];
                    }
                    if ($scope.Id == 0 && $scope.Mode == 1) {

                        $scope.PT_Listsearch();
                    }
                    else if ($scope.Id > 0 && $scope.Mode == 1) {

                        $scope.PT_Listsearch();
                    }
                    if (PTId > 0) {
                        $scope.Id = PTId;
                        $scope.PT_Listsearch();
                    }
                }

                /* THIS IS VIEW FUNCTION */
                $scope.ViewPT = function () {
                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                        $scope.MasterId = $routeParams.Id;
                    }
                    $http.get(baseUrl + 'api/PTConfiguration/PTConfiguration_View/?Id=' + $scope.Id).success(function (data) {
                        $scope.TaxName = data.TaxTypeId.toString();
                        $scope.listTaxName = data.TaxName;
                        $scope.DisplayName = data.DisplayName;
                        $scope.Remarks = data.Remarks;
                        $scope.Validity_FromMonth = data.Validity_FromMonthId.toString();
                        $scope.listValidity_FromMonth = data.Validity_FromMonth;
                        $scope.Validity_FromYear = data.Validity_FromYearId.toString();
                        $scope.listValidity_FromYear = data.Validity_FromYear;
                        $scope.Validity_ToMonth = data.Validity_ToMonthId.toString();
                        $scope.listValidity_ToMonth = data.Validity_ToMonth;
                        $scope.Validity_ToYear = data.Validity_ToYearId.toString();
                        $scope.listValidity_ToYear = data.Validity_ToYear;
                        $scope.Override = data.Override;
                        $scope.RoundOff = data.RoundOff;
                        $scope.RoundOff_Frequency = data.RoundOff_FrequencyId.toString();
                        $scope.ViewRoundOff_Frequency = data.RoundOff_Frequency;

                        $http.get(baseUrl + '/api/PTConfiguration/PTCustomerDetails_View/?Id=' + $scope.Id).success(function (PTdata) {
                            $scope.AddPTCustomer = PTdata;

                            $scope.TaxInactiveFlag = 0;
                            if (($ff($scope.TaxTypeList, { Id: $scope.TaxName, Name: $scope.listTaxName, IsActive: 0 }).length) == 1) {
                                $scope.TaxInactiveFlag = 1;
                            }
                            $scope.RoundoffInactiveFlag = 0;
                            if (($ff($scope.RoundOffList, { Id: $scope.RoundOff_Frequency, Name: $scope.ViewRoundOff_Frequency, Active: 0 }).length) == 1) {
                                $scope.RoundoffInactiveFlag = 1;
                            }
                            // console.log($scope.AddPTCustomer);
                        }).error(function (PTdata) {
                            $scope.error = "AN error has occured while list Proffessional Tax!" + PTdata;
                        });
                    }).error(function (PTdata) {
                        $scope.error = "AN error has occured while list PT!" + PTdata;
                    });

                };

                $scope.GetDispalyName = function (NameId) {
                    $scope.Name_Id = NameId;
                    $http.get(baseUrl + 'api/Common/GetDispalyNameList/?Id=' + $scope.Name_Id).success(function (data) {
                        $scope.Name_Id = data.Id;
                        $scope.Name = data.Name;
                        $scope.DisplayName = data.DisplayName;

                    }).error(function (data) {
                        $scope.error = "an error has occurred while Viewing Display Name list" + data;
                    });
                };

                $scope.DeletePTConfiguration = function (LRId) {
                    $scope.Id = LRId;
                    $scope.PT_Delete();
                };


                /* THIS IS FOR DELETE FUNCTION */
                $scope.PT_Delete = function () {
                    var del = confirm("Do you like to inactivate the selected PT Configuration detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/PTConfiguration/PTConfiguration_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected PT Configuration detail has been inactivated successfully");
                            //window.location.href = "/Home/Index#/PTList";
                            $scope.PT_Listsearchgo();
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting PT" + data;
                        });
                    }
                };

                $scope.Activate_PT = function (LOPID) {
                    $scope.Id = LOPID;
                    $scope.PT_Activate();
                };
                /* THIS IS FOR DELETE FUNCTION */
                $scope.PT_Activate = function () {
                    var del = confirm("Do you like to activate the selected PT Configuration detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/PTConfiguration/PTConfiguration_Activate/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected PT Configuration detail has been activated successfully");
                            $scope.PT_Listsearchgo($scope.Id = 0);
                            //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Employeedetails" + data;
                        });
                    }
                };


                /* THIS IS FOR CLEAR FUNCTION */
                $scope.ClearPTPopup = function () {
                    //$scope.ClearProffTaxPopup();
                    $scope.TaxName = "0";
                    $scope.Validity_FromYear = "0";
                    $scope.Validity_FromMonth = "0";
                    $scope.Validity_ToYear = "0";
                    $scope.Validity_ToMonth = "0";
                    $scope.DisplayName = "";
                    $scope.Remarks = "";
                    $scope.Override = "";
                    $scope.RoundOff = "";
                    // $scope.Consideration = "";
                    $scope.RoundOff_Frequency = "0";
                    $scope.RoundOffList = [];
                    $scope.TaxTypeList = [];
                };

                $scope.ClearProffTaxPopup = function () {
                    // alert("ss");
                    // $scope.PTCustomerRow = [];
                    $scope.PTCustomerRow = -1;
                    $scope.CountryName.length = [],
                    $scope.StateName.length = [],
                        $scope.GenderName = [],
                        $scope.Amount = [],
                        $scope.Percentage = [],
                        $scope.MinLimit = [],
                        $scope.MaxLimit = [],
                        $scope.PaymentFrequency = [],
                        $scope.Amtsel = []
                    $scope.PTCustomerSave();

                };

                /* THIS IS FOR ADD EDIT FUNCTION */
                $scope.PT_AddEdit = function () {
                    var obj = {
                        Id: $scope.Id,
                        TaxTypeId: $scope.TaxName,
                        Validity_FromYearId: $scope.Validity_FromYear,
                        Validity_FromMonthId: $scope.Validity_FromMonth,
                        Validity_ToYearId: $scope.Validity_ToYear,
                        Validity_ToMonthId: $scope.Validity_ToMonth,
                        DisplayName: $scope.DisplayName,
                        Remarks: $scope.Remarks,
                        Override: $scope.Override == 0 ? null : $scope.Override,
                        RoundOff: $scope.RoundOff == 0 ? null : $scope.RoundOff,
                        RoundOff_FrequencyId: $scope.RoundOff_Frequency == 0 ? null : $scope.RoundOff_Frequency,
                    };
             
                    $http.post(baseUrl + '/api/PTConfiguration/PTConfiguration_AddEdit/', obj).success(function (data) {
                        $scope.PTId = data;
                        $scope.MasterId = data;
                        var PTId = data;
                        angular.forEach($scope.AddPTCustomer, function (value, index) {
                            value.PTId = $scope.PTId

                        });
                        $http.post(baseUrl + '/api/PTConfiguration/PTCustomerDetails_AddEdit/', $scope.AddPTCustomer).success(function (data) {

                            $scope.ListPTPopUP($scope.MasterId);

                            $scope.ClearProffTaxPopup();
                            $scope.ClearPTPopup();

                            angular.element('#PT').modal('hide');
                            $scope.AddPTCustomer = [];
                            //$scope.ClearProffTaxPopup();
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding PT!" + data.ExceptionMessage;
                        });
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding PT!" + data.ExceptionMessage;
                    });
                };

                /* THIS IS FUNCTION FOR CLOSE POP WINDOW  */
                //$scope.CancelPopup = function () {
                //    $scope.AddPTCustomer = [];
                //    angular.element('#PT').modal('hide');
                //    angular.element('#PTView').modal('hide');
                //    $scope.ClearPTPopup();
                //    $scope.ClearProffTaxPopup();
                //}



                $scope.CancelView = function () {

                    angular.element('#PTView').modal('hide');
                    $scope.AddPTCustomer = [];
                    $scope.ClearPTPopup();
                    $scope.ClearProffTaxPopup();
                    $scope.PT_Listsearchgo();
                }
                $scope.CancelPopup = function () {
                    if ($scope.Id > 0) {

                        angular.element('#PT').modal('hide');
                        $scope.AddPTCustomer = [];
                        $scope.ClearPTPopup();
                        $scope.ClearProffTaxPopup();
                        $scope.PT_Listsearchgo();
                    }

                    angular.element('#PT').modal('hide');
                    $scope.AddPTCustomer = [];
                    $scope.ClearPTPopup();
                    $scope.ClearProffTaxPopup();
                    //  $scope.Company_ListsearchGo();
                }

                $scope.CancelPopupButton = function () {
                    angular.element('#FyconfigurationModal').modal('hide');
                    $scope.ClearPTPopup();
                    $scope.PT_Listsearchgo();
                }


                ///* THIS IS FUNCTION FOR REMOVE ROW  */
                //$scope.RemoveItem = function () {

                //    var AddLWFCustomer_Item = [];
                //    if ($scope.Id == undefined) {
                //        angular.forEach($scope.AddPTCustomer, function (selectedQual) {
                //            if (!selectedQual.selectedQual) {
                //                AddLWFCustomer_Item.push(selectedQual);
                //            }

                //            $scope.AddPTCustomer = AddLWFCustomer_Item;
                //        });
                //    }
                //    if ($scope.Id > 0) {
                //        angular.forEach($scope.AddPTCustomer, function (selectedQual, index) {

                //            if (selectedQual.selectedQual) {
                //                $scope.RemoveItId = selectedQual.Id;
                //                $scope.PTCustomerDetailsDelete();
                //            }
                //            if (!selectedQual.selectedQual) {
                //                AddLWFCustomer_Item.push(selectedQual);
                //            }
                //            $scope.AddPTCustomer = AddLWFCustomer_Item;

                //        });

                //    }

                //};

                /*on click Remove IncomeTax Customer Filed its calling the 
                    Professional Tax Customer delete funtion */
                $scope.RemovePt_Item = function (rowIndex) {
                    var del = confirm("Do you like to delete this Professional tax Item?");
                    if (del == true) {
                        var ProTax_Item = [];

                        if ($scope.Id == undefined) {
                        
                            //alert('Are you sure to delete this record?');
                            angular.forEach($scope.AddPTCustomer, function (selectedPt, index) {
                                if(index!=rowIndex)                        
                                    ProTax_Item.push(selectedPt);

                            });
                            $scope.AddPTCustomer= ProTax_Item;
                        }
                        else if ($scope.Id > 0) {
                            angular.forEach($scope.AddPTCustomer, function (selectedPt, index) {
                                if (index==rowIndex)  {
                                    $scope.RemoveItId = selectedPt.Id;
                                    $scope.PTCustomerDetailsDelete();

                                }
                                else 
                                {
                                    ProTax_Item.push(SelectedPt);
                                }
                            });
                
                            $scope.AddPTCustomer = ProTax_Item;
                        }
                    }
                };


                /* THIS IS FOR DELETE FUNCTION */
                $scope.PTCustomerDetailsDelete = function () {

                    $http.get(baseUrl + 'api/PTConfiguration/PTCustomerDetails_Delete/?Id=' + $scope.RemoveItId).success(function (data) {
                        //alert("FyConfiguration Details deleted Successfully");
                        //$scope.FyconfigurationListGo();
                        //alert("Do You Want To Delete?");
                        // window.location.href = "/Home/Index#/IncomeTaxList";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting PT CustomerDetails Delete" + data;
                    });
                };
                /* THIS IS FUNCTION FOR SELECTED ALL THE ROW TO REMOVE */
                $scope.checkAll = function () {
                    if (!$scope.selectedallQual) {
                        $scope.selectedallQual = true;
                    } else {
                        $scope.selectedallQual = false;
                    }
                    angular.forEach($scope.AddPTCustomer, function (row) {
                        row.selectedQual = $scope.selectedallQual;
                    });
                };
            }
    ]);

    //This is for LWFConfiguration controller functions//
    EmpControllers.controller("LWFConfigurationController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
    function ($scope, $http, $routeParams, $location, $filter, $window) {

        // Declaration and initialization of Scope Variables.
        $scope.Id = "0";
        $scope.Company_Name = "0";
        $scope.Validity_FromMonth = "0";
        $scope.Validity_ToMonth = "0";
        $scope.Validity_FromYear = "0";
        $scope.Validity_ToYear = "0";
        $scope.CompanyName = "0";
        $scope.FromMonthId = "0";
        $scope.ToMonthId = "0";
        $scope.Validity = "0";
        $scope.StateName = "0";
        $scope.CountryName = "0";
        $scope.TaxTypeName = "0";
        $scope.CompanyName = "0";
        $scope.Id = 0;
        $scope.CountryName = "0";
        $scope.AddLWFCustomer = [];
        $scope.LWFCustomerRow = -1;
        $scope.MinLimit = "";
        $scope.MaxLimit = "";
        $scope.EmployeeContribution = "";
        $scope.EmployerContribution = "";

        // List Page Pagination.
        $scope.listdata = [];
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }

        /* THIS IS FOR VALIDATION FUNCTION */
        /* Showing alert when inactive record is try to edit in the list page */
        $scope.ErrorFunction = function () {
            alert("Inactive record cannot be edited");
        }

        /*
        Calling the api method to list the lwf configuration details for the  filters  company name and
        showing the result in table.
        */
        $scope.emptydata = [];
        $scope.rowCollection = [];
        $scope.flag = 0;

        $scope.LWF_Listsearch = function () {
        
            $http.get(baseUrl + '/api/LWFConfiguration/LWFConfiguration_List/?Id=' + $scope.Id + '&Company_Id=' + $scope.Company_Name).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }

            }).error(function (data) {
                $scope.error = "AN error has occured while deleting LWF Configuration" + data;
            });
        };

        /* on click Go calling the list function.*/
        $scope.LWF_Listsearchgo = function () {
            $scope.Id = 0;
            var ListId = $scope.Id;
            //$scope.ListLWFPopUP(ListId);
            $scope.Mode = 1;
            $scope.LWF_Listsearch($scope.Id, $scope.Mode);
        };


        /* Validating the create page mandatory fields
        checking mandatory for the follwing fields
        Experience,Percentage,Minimum limit,Maximum limit,From year,To year
        and showing alert message when it is null.
        */
   
        $scope.Validationcontrols = function () {
       
            if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                alert("Please select Company Name");
                return CompanyName;
            }
            else if (typeof ($scope.Validity_FromMonth) == "undefined" || $scope.Validity_FromMonth == 0) {
                alert("Please select Validity From Month");
                return Validity_FromMonth;
            }
            else if (typeof ($scope.Validity_FromYear) == "undefined" || $scope.Validity_FromYear == 0) {
                alert("Please select Validity From Year");
                return Validity_FromYear;
            }
            else if (typeof ($scope.Validity_ToMonth) == "undefined" || $scope.Validity_ToMonth == 0) {
                alert("Please select Validity To Month");
                return Validity_ToMonth;
            }
            else if (typeof ($scope.Validity_ToYear) == "undefined" || $scope.Validity_ToYear == 0) {
                alert("Please select Validity To Year");
                return Validity_ToYear;
            }
      
        
            var count = 0;
            angular.forEach($scope.AddLWFCustomer, function (value, index) {
                if (value.Country_Id > 0) {
                    count = 1;
              
                }
           
            });
            var state = 0;
            angular.forEach($scope.AddLWFCustomer, function (value, index) {
                if (value.State_Id > 0) {
                    state = 1;
                }
           
            });

            var emp = 0;
            angular.forEach($scope.AddLWFCustomer, function (value, index) {
                if (value.Experience < 100) {
                    emp = 1;
                }
            });
            var empr = 0;
            angular.forEach($scope.AddLWFCustomer, function (value, index) {
                if (value.Percentage < 100) {
                    empr = 1;
                }
            
            });
            var min = 0;
            angular.forEach($scope.AddLWFCustomer, function (value, index) {
                if (value.MinLimit < value.MaxLimit) {
                    min = 1;
                }
            
            });
            if (parseInt($scope.Validity_ToYear) < parseInt($scope.Validity_FromYear)) {
                alert("Please enter LWF configuration to year greater than LWF configuration From Year");
                return Validity_ToYear;
            }

            else if ($scope.AddLWFCustomer.length < 1 || count == 0) {
                alert("Please Select Country");
                return AddLWFCustomer;
            }
            else if ($scope.AddLWFCustomer.length < 1 || state == 0) {
                alert("Please Select State");
                return AddLWFCustomer;
            }
      
            //else if ($scope.AddLWFCustomer.length < 1 || min == 0) {
            //    alert("Please enter maximum limit greater than minimum limit");
            //    return AddLWFCustomer.length;
            //}

            return true;

        };

        /* 
        Calling api method for the dropdown list in the html page for the fields 
        Company Name,Year list,From year,To year,Month List,Tax type,Gender type,Group by from year,Group by to year,Location, State
        */
        /*COMPANY*/
        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
            $scope.CompanyNameList = data;
        });
        /*YEAR*/
        $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
            $scope.getYear = data;
        });
        /*FINANCIAL FROM YEAR*/
        $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
            $scope.getFyYear = data;
        });
        /*FINANCIAL TO YEAR*/
        $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
            $scope.getFyToYear = data;
        });
        /*MONTH*/
        $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
            $scope.MonthList = data;
        });
        /*TAX TYPE*/
        $http.get(baseUrl + 'api/Common/TaxTypeList/').success(function (data) {
            $scope.YearList = data;
        });
        /*GENDER TYPE*/
        $http.get(baseUrl + 'api/Common/GenderTypeList/').success(function (data) {
            $scope.GenderList = data;
        });
        /*FINANCIAL GROUP BY FROM YEAR*/
        $http.get(baseUrl + 'api/Common/GroupBy_FromYear/').success(function (data) {
            $scope.GroupFromYear = data;
        });
        /*FINANCIAL GROUP BY TO YEAR*/
        $http.get(baseUrl + 'api/Common/GroupBy_ToYear/').success(function (data) {
            $scope.GroupToYear = data;
        });
        /*COUNTRY*/
        $http.get(baseUrl + 'api/Common/CountryList/').success(function (data) {
            $scope.CountryList = data;
        });
        /*STATE*/
        $http.get(baseUrl + 'api/Common/StateList/').success(function (data) {
            $scope.StateList = data;
        });
        /*PERIOD MONTH*/
        $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
            $scope.MonthList = data;
       
        });


        $scope.GetGenderType = function (gender) {
            var genderId = gender;
            var gender_Name = "";
            if (gender > 0) {
                gender_Name = $.grep($scope.GenderList, function (gender) {
                    return gender.Id == genderId;
                })[0].Name;
            }
            return gender_Name;
        }

        $scope.GetCountryName = function (country) {
            var country_Id = country;
            var country_Name = "";
            if (country > 0) {
                tool_Name = $.grep($scope.CountryList, function (country) {
                    return country.Id == country_Id;
                })[0].CountryName;
            }
            return country_Name;
        }

        $scope.GetStateName = function (State) {
            var State_Id = State;
            var State_Name = "";
            if (State > 0) {
                tool_Name = $.grep($scope.StateList, function (State) {
                    return State.Id == State_Id;
                })[0].StateName;
            }
            return State_Name;
        }
        $scope.GetMonthName = function (Month) {
            var Month_Id = Month;
            var MonthName = "";
            if (Month > 0) {
                tool_Name = $.grep($scope.MonthList, function (Month) {
                    return Month.Id == Month_Id;
                })[0].MonthName;
            }
            return MonthName;
        }

        /* ARRAY LIST FOR THE CHILD TABLE CUSTOMER DETAILS */
        $scope.AddLWFCustomer = [{
            'Id': $scope.ChildId,
            'LWF_Id' :$scope.LWF_Id,
            'MinLimit': $scope.MinLimit,
            'MaxLimit': $scope.MaxLimit,
            'Country_Id': $scope.CountryName,
            'State_Id': $scope.StateName,
            'Month_Id' : $scope.MonthName,
            'EmployeeContribution': $scope.EmployeeContribution,
            'EmployerContribution': $scope.EmployerContribution,
        

        }];

        /* SAVE FUNCTION FOR THE CHILD TABLE CUSTOMER DETAILS */
   
        $scope.LWFCustomerSave = function () {
       
            if ($scope.LWFCustomerRow >= 0) {
             
                var obj = {
                    'Id': $scope.ChildId,
                    'LWF_Id' :$scope.LWF_Id,
                    'MinLimit': $scope.MinLimit,
                    'MaxLimit': $scope.MaxLimit,
                    'Country_Id': $scope.CountryName,
                    'State_Id': $scope.StateName,
                    'Month_Id' : $scope.MonthName,
                    'EmployeeContribution': $scope.EmployeeContribution,
                    'EmployerContribution': $scope.EmployerContribution,
                
                }
             
                $scope.AddLWFCustomer[$scope.LWFCustomerRow] = obj;
           
            }
            else {
                $scope.AddLWFCustomer.push({
                    'Id': $scope.ChildId,
                    'LWF_Id' :$scope.LWF_Id,
                    'MinLimit': $scope.MinLimit,
                    'MaxLimit': $scope.MaxLimit,
                    //'Consideration': $scope.Consideration,
                    'Country_Id': $scope.CountryName,
                    'State_Id': $scope.StateName,
               
                    'EmployeeContribution': $scope.EmployeeContribution,
                    'EmployerContribution': $scope.EmployerContribution,
                    'Month_Id' : $scope.MonthName
                })
            }
      
        };
    
        $scope.rowCollection = [];

        /* Open the create pop up window */
        $scope.AddLWFPopUP = function (LMFId) {
            $scope.Id = LMFId;
            //  $scope.ViewLWF();
            angular.element('#LWF').modal('show');
        }

        /* Open the view pop up window and show the details for the lwf configuration for the lwf configuration Id */
        $scope.ViewLWFPopUP = function (LMFId) {
            $scope.Id = LMFId;
            $scope.ViewLWF();
            angular.element('#LWFView').modal('show');
        }

        /* Open the edit pop up window and show the details for the lwf configuration for the lwf configuration Id */
        $scope.EditLWFPopUP = function (LMFId) {
            $scope.Id = LMFId;
            $scope.ViewLWF();
            angular.element('#LWF').modal('show');
        }

        /*calling list function */
        $scope.ListLWFPopUP = function (PFESIId) {
            if ($routeParams.Id == 0) {
                $scope.rowCollection = [];
            }
            if ($scope.Id == 0 && $scope.Mode == 1) {

                $scope.LWF_Listsearch();
            }
            else if ($scope.Id > 0 && $scope.Mode == 1) {

                $scope.LWF_Listsearch();
            }
            if (PFESIId > 0) {
                $scope.Id = PFESIId;
                $scope.LWF_Listsearch();
                // angular.element('#PFandESIModel').modal('show');
            }
        }

        /*
       Calling the api method to view the details of the lwf configuration
       for the lwf configuration Id 
       and display the details in the view pop up window.
       */
        $scope.ViewLWF = function () {

            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
                $scope.MasterId = $routeParams.Id;
            }
         
            $http.get(baseUrl + 'api/LWFConfiguration/LWFConfiguration_View/?Id=' + $scope.Id).success(function (data) {
         
                $scope.CompanyName = data.Company_Id.toString();
                $scope.listCompanyName = data.CompanyName;
                $scope.Establishment_Code = data.Establishment_Code;
                $scope.Purpose_Of_Business = data.Purpose_Of_Business;
                $scope.Validity_FromMonth = data.Validity_FromMonthId.toString();
                $scope.listValidity_FromMonth = data.Validity_FromMonth;
                $scope.Validity_FromYear = data.Validity_FromYearId.toString();
                $scope.listValidity_FromYear = data.Validity_FromYear;
                $scope.Validity_ToMonth = data.Validity_ToMonthId.toString();
                $scope.listValidity_ToMonth = data.Validity_ToMonth;
                $scope.Validity_ToYear = data.Validity_ToYearId.toString();
                $scope.listValidity_ToYear = data.Validity_ToYear;
          
                $http.get(baseUrl + '/api/LWFConfiguration/LWFCustomerDetails_View/?Id=' + $scope.Id).success(function (ITdata) {
                    $scope.AddLWFCustomer = ITdata;
                }).error(function (ITdata) {
                    $scope.error = "AN error has occured while list Income Tax!" + ITdata;
                });
            }).error(function (data) {
                $scope.error = "AN error has occured while list PT!" + data;
            });

        };

        //This is for image clear function//
        $scope.imageclear = function () {
            $scope.uploadme = "";
            $('#companyphoto').val('');
            PhotoFullpath = "";
            $scope.FileName = "";

        };

        /* THIS IS FOR DELETE FUNCTION */
        $scope.DeleteLWFConfiguration = function (LRId) {
            $scope.Id = LRId;
            $scope.LWFConfigurationDelete();
        };

        /* 
       Calling the api method to detele the details of the lwf configuration 
       for the lwf configuration Id,
       and redirected to the list page.
       */
        $scope.LWFConfigurationDelete = function () {
            var del = confirm("Do you like to inactivate the selected LWF configuration details?");
            if (del == true) {
                $http.get(baseUrl + 'api/LWFConfiguration/LWFConfiguration_Delete/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected LWF configuration details has been inactivated successfully");
                    $scope.LWF_Listsearchgo();
                    //window.location.href = baseUrl + "/Home/Index#/PTList";
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting LWF Configuration" + data;
                });
            }
        };


        /* THIS IS FOR ACTIVE FUNCTION */
        $scope.ActiveLWFConfiguration = function (LRId) {
            $scope.Id = LRId;
            $scope.LWFConfigurationActive();
        };

        /* 
       Calling the api method to inactived the details of the lwf configuration  
       for the lwf configuration  Id,
       and redirected to the list page.
       */
        $scope.LWFConfigurationActive = function () {
            var del = confirm("Do you like to activate the selected LWF configuration details?");
            if (del == true) {
                $http.get(baseUrl + 'api/LWFConfiguration/LWFConfiguration_Active/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected LWF configuration details has been activated successfully");
                    $scope.LWF_Listsearchgo();
                    //window.location.href = baseUrl + "/Home/Index#/PTList";
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting LWF Configuration" + data;
                });
            }
        };

        /* Read the file path of the image uploaded  and file upload*/
        $scope.downloadfile = function (url, defaultFileName) {
            var self = this;
            var deferred = $q.defer();
            $http.get(url, { responseType: "blob" }).then(
               function (data) {
                   saveAs(data.data, defaultFileName)
                   deferred.resolve(defaultFileName);
               }, function (data) {
                   var e = /* error */
                    deferred.reject(e);
               });
            return deferred.promise;
        };


        $scope.dataURItoBlob = function (dataURI) {
            var binary = atob(dataURI.split(',')[1]);
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
            var array = [];
            for (var i = 0; i < binary.length; i++) {
                array.push(binary.charCodeAt(i));
            }
            return new Blob([new Uint8Array(array)], {
                type: mimeString
            });
        }
        /* Read file name for the  Photo and file */
        $scope.logoChange = function () {

            if ($('#companyphoto')[0].files[0] != undefined) {
                $scope.FileName = $('#companyphoto')[0].files[0]['name'];
            }
        }
        $scope.doclogoChange = function () {

            if ($('#License')[0].files[0] != undefined) {
                $scope.LicenseFileName = $('#License')[0].files[0]['name'];
            }
        }
        $scope.uploadImage = function (CompanyLogo) {
            var filename = "";
            //var fd = new FormData();
            if ($('#companyphoto')[0].files[0] != undefined) {
                filename = $('#companyphoto')[0].files[0]['name'];
                //var imgBlob = $scope.dataURItoBlob($scope.CompanyLogo);
                //fd.append('file', imgBlob);
            }
        }

        /* 
       Calling the api method to inactived the details of the lwf configuration child table array 
       for the lwf customer details Id,
       and redirected to the list page.
       */
        $scope.RemoveLWF_Id = 0;
        $scope.LWFCustomerDetailsDelete = function () {
            $http.get(baseUrl + 'api/LWFConfiguration/LWFCustomerDetails_Delete/?Id=' + $scope.RemoveLWF_Id).success(function (data) {
                //    alert("Do You Want To Delete?");
                //   window.location.href = "/Home/Index#/IncomeTaxList";
            }).error(function (data) {
                $scope.error = "An error has occurred while deleting LWF CustomerDetails Delete" + data;
            });
        };

        /* THIS IS FOR CLEAR FUNCTION */
        $scope.ClearPTPopup = function () {
            $scope.CompanyName = "0";
            $scope.Validity_FromYear = "0";
            $scope.Validity_FromMonth = "0";
            $scope.Validity_ToYear = "0";
            $scope.Validity_ToMonth = "0";
            $scope.Establishment_Code = "";
            $scope.Purpose_Of_Business = "";
        
        };

        /* THIS IS FOR ARRAY LIST CLEAR FUNCTION */
        $scope.ClearLWFPopup = function () {
            $scope.LWFCustomerRow = -1;
            $scope.MinLimit = [],
            $scope.MaxLimit = [],
            //$scope.Consideration = [],
            $scope.StateName = [],
            //$scope.GenderName = [],
            $scope.Period_Month = [],
            $scope.EmployeeContribution = [],
            $scope.EmployerContribution = []
            $scope.LWFCustomerSave();
        };
        /*Call the api method for insert and Update the record for a company
          and display the record of selected company when Id is greater than 0
          in edit.html and provide an option for create and modify the company and save the company record*/
        $scope.LWF_AddEdit = function () {
            if ($scope.Validationcontrols() == true) {
                var filename = "";
                var Licensefilename = "";

                var fd = new FormData();
                var imgBlob;
                var imgBlobfile;
                var itemIndexLogo = -1;
                var itemIndexfile = -1;

                var fd = new FormData();
                if ($('#companyphoto')[0].files[0] != undefined) {
                    filename = $('#companyphoto')[0].files[0]['name'];
                    imgBlob = $scope.dataURItoBlob($scope.uploadme);
                    itemIndexLogo = 0;
                }
                //if ($('#License')[0].files[0] != undefined) {
                //    Licensefilename = $('#License')[0].files[0]['name'];
                //    imgBlobfile = $scope.dataURItoBlob($scope.licedoc);
                //    if (itemIndexLogo == -1) {
                //        itemIndexfile = 0;
                //    }
                //    else {
                //        itemIndexfile = 1;
                //    }
                //}


                if (itemIndexLogo != -1) {
                    fd.append('file', imgBlob);
                }
                //if (itemIndexfile != -1) {
                //    fd.append('file1', imgBlobfile);
                //}


                /*
                calling the api method for read the file path 
                and saving the image uploaded in the local server. 
                */
                $http.post(baseUrl + 'api/Common/AttachFile',
                fd,
                {
                    transformRequest: angular.identity,
                    headers: {
                        'Content-Type': undefined
                    }
                }
                )
                .success(function (response) {
                    if ($scope.FileName == "") {
                        $scope.CompanyLogo = "";
                    }
                    else if (itemIndexLogo > -1) {
                        if ($scope.FileName != "" && response[itemIndexLogo] != "") {
                            $scope.CompanyLogo = response[itemIndexLogo];
                        }
                    }
                
                    var obj = {
                        Id: $scope.Id,
                        Company_Id: $scope.CompanyName,
                        Validity_FromYearId: $scope.Validity_FromYear,
                        Validity_FromMonthId: $scope.Validity_FromMonth,
                        Validity_ToYearId: $scope.Validity_ToYear,
                        Validity_ToMonthId: $scope.Validity_ToMonth,
                        Establishment_Code: $scope.Establishment_Code,
                        Purpose_Of_Business: $scope.Purpose_Of_Business,
                        Photo_Fullpath: "",
                        Photo: $scope.Photo,
                        File_Name: $scope.File_Name
                        // Photo_Fullpath: $scope.Photo_Fullpath,
                    };

                    $http.post(baseUrl + '/api/LWFConfiguration/LWFConfiguration_AddEdit/', obj).success(function (data) {
                        $scope.LWF_Id = data;
                        $scope.MasterId = data;
                        var LWF_Id = data;
                        $scope.ListLWFPopUP($scope.LWF_Id);
                        angular.forEach($scope.AddLWFCustomer, function (value, index) {
                            value.LWF_Id = $scope.LWF_Id
                        });
                 
                        /*This is function for child table array add/edit function */
                        $http.post(baseUrl + '/api/LWFConfiguration/LWFCustomerDetails_AddEdit/', $scope.AddLWFCustomer).success(function (data) {
                         
                            //$scope.ListLWFPopUP($scope.MasterId);
                            angular.element('#LWF').modal('hide');
                            $scope.AddLWFCustomer = [];
                            $scope.ClearLWFPopup();
                            // $scope.CancelPopup();
                            $scope.ClearPTPopup();
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding PT!" + data.ExceptionMessage;
                        });

                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding PT!" + data.ExceptionMessage;
                    });
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding PT!" + data.ExceptionMessage;
                    $scope.CompanyLogo = "";
                    $scope.License_Certificate = "";
                });

            }
    
    
            //}).error(function (response) {
            //    $scope.CompanyLogo = "";
            //    $scope.License_Certificate = "";

            //});


            $("#companyphoto").val('');
            $("#License").val('');
            //  }
        };
       
   

        /* THIS IS FUNCTION FOR CLOSE POP WINDOW  */
        //$scope.CancelPopup = function () {    
        //    angular.element('#LWF').modal('hide');
        //    angular.element('#LWFView').modal('hide');
        //    $scope.ClearPTPopup();
        //}

        /*
        Close the pop up window for the view pop up on click cancel button 
        */
        $scope.CancelView = function () {
            $scope.AddLWFCustomer = [];
            $scope.ClearLWFPopup();
            angular.element('#LWFView').modal('hide');
            $scope.ClearPTPopup();
            $scope.LWF_Listsearchgo();
        }

        /*
      Close the pop up window for the create and edit pop up on click cancel button 
      */
        $scope.CancelPopup = function () {
            if ($scope.Id > 0) {
                $scope.AddLWFCustomer = [];
                angular.element('#LWF').modal('hide');
                $scope.ClearPTPopup();
                $scope.ClearLWFPopup();
                $scope.LWF_Listsearchgo();
            }
            $scope.AddLWFCustomer = [];
            angular.element('#LWF').modal('hide');
            $scope.ClearPTPopup();
            $scope.ClearLWFPopup();
            //  $scope.Company_ListsearchGo();


        }

        /*
      Close the pop up window for the create and edit pop up on click cancel button 
      */
        $scope.CancelPopupButton = function () {
            angular.element('#FyconfigurationModal').modal('hide');
            $scope.ClearPopup();
            $scope.FyconfigurationListGo();
        }



        /*on click Remove IncomeTax Customer Field its calling the 
                    Professional Tax Customer delete funtion */
        $scope.RemoveLWF_Item = function (rowIndex) {
            var del = confirm("Do you like to delete this Labour Welfare Fund Item?");
            if (del == true) {
                var LWF_Item = [];

                if ($scope.Id == undefined) {
              
                    //alert('Are you sure to delete this record?');
                    angular.forEach($scope.AddLWFCustomer, function (selectedLWF, index) {
                        if(index!=rowIndex)                        
                            LWF_Item.push(selectedLWF);

                    });
                    $scope.AddLWFCustomer= ProTax_Item;
                }
                else if ($scope.Id > 0) {
                    angular.forEach($scope.AddLWFCustomer, function (selectedLWF, index) {
                        if (index==rowIndex)  {
                            $scope.RemoveLWF_Id = selectedLWF.Id;
                            $scope.LWFCustomerDetailsDelete();

                        }
                        else 
                        {
                            LWF_Item.push(selectedLWF);
                        }
                    });
                
                    $scope.AddLWFCustomer = LWF_Item;
                }
            }
        };


        /* Selected the array lists*/
        $scope.checkAll = function () {
            if (!$scope.selectedallQual) {
                $scope.selectedallQual = true;
            } else {
                $scope.selectedallQual = false;
            }
            angular.forEach($scope.AddLWFCustomer, function (row) {
                row.selectedQual = $scope.selectedallQual;
            });
        };
    }
    ]);


    //This is for PF ESI Configuration controller functions//
    EmpControllers.controller("PFandESIController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
    function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {


        // List Page Pagination.
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }
        $scope.listdata = [];

        $scope.rowCollection = [];

        /*
           Validating the create page mandatory fields
           checking mandatory for the follwing fields
           Pfemployee percentage,Employee eps percentage,Epf percentage,Employeer percentage,
           Employee percentage,PeriodFrom and PeriodTo
           and showing alert message when it is null.
           */
        $scope.Validationcontrols = function () {
            if ($scope.PFEmpPercentage > 100) {
                alert("Please enter Employee % Less than 100");
                return false;
            }
            else if ($scope.EmpEPSPercentage > 100) {
                alert("Please enter Employee EPS % Less than 100");
                return false;
            }
            else if ($scope.EPFPercentage > 100) {
                alert("Please enter EPF % Less than 100");
                return false;
            }
            else if ($scope.EmprPercentage > 100) {
                alert("Please enter Employer % Less than 100");
                return false;
            }
            else if ($scope.EmpPercentage > 100) {
                alert("Please enter Employee % Less than 100");
                return false;
            }
            else if (parseInt($scope.ToYear) < parseInt($scope.FromYear)) {
                alert("Please enter PF & ESI to year greater than PF & ESI From Year");
                return false;
            }
            return true;

        };

        /* 
      Calling api method for the dropdown list in the html page for the fields 
      month list,year list,company list, from year, to year
      */
        $http.get(baseUrl + '/api/Common/GetMonthList/').success(function (data) {
            $scope.getMonth = data;
        });
        $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
            $scope.getYear = data;
        });


        $scope.CompanyFilterList = [];
        $scope.CompanyNameList = [];
        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
            //$scope.CompanyNameList = data;
            //   console.log(data);
            $scope.CompanyFilterList = data;
            $scope.CompanyNameList = $ff(data, { Active: 1 });
            //$scope.CompanyNameList = $ff(data, { Active: 0 });

        });

        $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
            $scope.getFyYear = data;
        });
        $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
            $scope.getFyToYear = data;
        });

        // Declaration and initialization of Scope Variables.
        $scope.CompanyName = "0";
        $scope.FromMonth = "0";
        $scope.ToMonth = "0";
        $scope.FromYear = "0";
        $scope.ToYear = "0";
        $scope.Company_Name = "0";
        $scope.From_Month = "0";
        $scope.To_Month = "0";
        $scopeFrom_Year = "0";
        $scope.To_Year = "0";
        $scope.Id = 0;
        $scope.Id = "0";

        /* Open the create pop up window */
        $scope.AddPFandESIPopUP = function (PFESIId) {
            $scope.Id = PFESIId;
            // $scope.ViewPFandESI();
            angular.element('#PFandESIModel').modal('show');
        }

        /* Open the view pop up window and show the details for the pf and esi for the pf and esi Id */
        $scope.ViewPFandESIPopUP = function (PFESIId) {
            $scope.Id = PFESIId;
            $scope.ViewPFandESI();
            angular.element('#PFandESIModelView').modal('show');
        }

        /* Open the edit pop up window and show the details for the pf and esi for the pf and esi Id */
        $scope.EditPFandESIPopUP = function (PFESIId) {
            $scope.Id = PFESIId;
            $scope.ViewPFandESI();
            angular.element('#PFandESIModel').modal('show');
        }

        /*calling list function */
        $scope.ListPFandESIPopUP = function (PFESIId) {
            if ($routeParams.Id == 0) {
                $scope.rowCollection = [];
            }
            if ($scope.Id == 0 && $scope.Mode == 1) {

                $scope.PFESI_Listsearch();
            }
            else if ($scope.Id > 0 && $scope.Mode == 1) {

                $scope.PFESI_Listsearch();
            }
            if (PFESIId > 0) {
                $scope.Id = PFESIId;
                $scope.PFESI_Listsearch();

            }
        }

        /*
       Calling the api method to view the details of the pf and esi
       for the pf and esi Id 
       and display the details in the view pop up window.
       */
        $scope.ViewPFandESI = function () {
            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/PFandESIConfiguration/PFandESIConfiguration_View/?Id=' + $scope.Id).success(function (data) {
                // $scope.Id = data.Id;
                $scope.CompanyName = data.CompanyId.toString();
                $scope.listCompanyName = data.CompanyName;
                $scope.FromMonth = data.FromMonthId.toString();
                $scope.listFromMonth = data.FromMonth;
                $scope.FromYear = data.FromYearId.toString();
                $scope.ViewFromYear = data.FromYear;
                $scope.ToMonth = data.ToMonthId.toString();
                $scope.listToMonth = data.ToMonth;
                $scope.ToYear = data.ToYearId.toString();
                $scope.ViewToYear = data.ToYear;
                $scope.CutOff = data.CutOff;
                $scope.ActualsEmp = data.ActualsEmp;
                $scope.ActualsEmpr = data.ActualsEmpr;
                $scope.PFEmpPercentage = data.PFEmpPercentage;
                $scope.Remark = data.Remark;
                $scope.EmpEPSPercentage = data.EmpEPSPercentage;
                $scope.EPFPercentage = data.EPFPercentage;
                $scope.ESIConfigCutOff = data.ESIConfigCutOff;
                $scope.EmprPercentage = data.EmprPercentage;
                $scope.EmpPercentage = data.EmpPercentage;
                $scope.Remarks = data.Remarks;
                //console.log(data);


                $scope.CompanyInactiveFlag = 0;

                // if the current viewing company is inactive
                // set the flag value to 1
                if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.listCompanyName, Active: 0 }).length) == 1) {
                    $scope.CompanyInactiveFlag = 1;
                }
            }).error(function (data) {
                $scope.error = "AN error has occured while list PFandESI Details!" + data;
            });
        };

        //Delete popup function// 
        $scope.DeletePFandESI = function (LRId) {
            $scope.Id = LRId;
            $scope.PFandESI_Delete();
        };

        /* 
        Calling the api method to detele the details of the pf and esi    
        for the pf and esi Id,
        and redirected to the list page.
        */
        $scope.PFandESI_Delete = function (PFId) {
            // $scope.Id = PFId;
            var del = confirm("Do you like to inactivate the selected pf and esi details?");
            if (del == true) {
                $http.get(baseUrl + 'api/PFandESIConfiguration/PFandESIConfiguration_Delete/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected pf and esi details has been inactivated successfully");
                    $scope.PFESI_Listsearchgo();
                    // window.location.href = baseUrl + "/Home/Index#/PF_ESIList";
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting PF and ESI details" + data;
                });
            }
        };

        //Delete popup function// 
        $scope.ActivePFandESI = function (LRId) {
            $scope.Id = LRId;
            $scope.PFandESI_Active();
        };

        /* 
        Calling the api method to inactived the details of the pf and esi    
        for the pf and esi Id,
        and redirected to the list page.
        */
        $scope.PFandESI_Active = function (PFId) {
            // $scope.Id = PFId;
            var del = confirm("Do you like to activate the selected pf and esi details?");
            if (del == true) {
                $http.get(baseUrl + 'api/PFandESIConfiguration/PFandESIConfiguration_Active/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected pf and esi details has been activated successfully");
                    $scope.PFESI_Listsearchgo();
                    // window.location.href = baseUrl + "/Home/Index#/PF_ESIList";
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting PF and ESI details" + data;
                });
            }
        };

        /* THIS IS FOR CLEAR POPUP FUNCTION */
        $scope.ClearPFandESIPopup = function () {
            $scope.CompanyName = "0";
            $scope.FromMonth = "0";
            $scope.FromYear = "0";
            $scope.ToMonth = "0";
            $scope.ToYear = "0";
            $scope.CutOff = "";
            $scope.ActualsEmp = "";
            $scope.ActualsEmpr = "";
            $scope.PFEmpPercentage = "";
            $scope.Remark = "";
            $scope.EmpEPSPercentage = "";
            $scope.EPFPercentage = "";
            $scope.ESIConfigCutOff = "";
            $scope.EmprPercentage = "";
            $scope.EmpPercentage = "";
            $scope.Remarks = "";
        };

        /*
        Call the api method for insert and Update the record for a pf and esi
        and display the record of selected pf and esi when Id is greater than 0
        in edit.html and provide an option for create and modify the pf and esi and save the pf and esi record
       */
        $scope.PFandESI_AddEdit = function () {
            if ($scope.Validationcontrols() == true) {
                var obj = {
                    Id: $scope.Id,
                    CompanyId: $scope.CompanyName,
                    FromMonthId: $scope.FromMonth,
                    FromYearId: $scope.FromYear,
                    ToMonthId: $scope.ToMonth,
                    ToYearId: $scope.ToYear,
                    CutOff: $scope.CutOff,
                    ActualsEmp: $scope.ActualsEmp,
                    ActualsEmpr: $scope.ActualsEmpr,
                    PFEmpPercentage: $scope.PFEmpPercentage,
                    Remark: $scope.Remark,
                    EmpEPSPercentage: $scope.EmpEPSPercentage,
                    EPFPercentage: $scope.EPFPercentage,
                    ESIConfigCutOff: $scope.ESIConfigCutOff,
                    EmprPercentage: $scope.EmprPercentage,
                    EmpPercentage: $scope.EmpPercentage,
                    Remarks: $scope.Remarks,
                };
                //console.log(obj);
                $http.post(baseUrl + '/api/PFandESIConfiguration/PFandESIConfiguration_AddEdit/', obj).success(function (data) {
                    $scope.AddId = data;
                    var AddId = data;
                    $scope.ListPFandESIPopUP($scope.AddId);
                    angular.element('#PFandESIModel').modal('hide');
                    // $scope.CancelPopup();
                    $scope.ClearPFandESIPopup();
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                });
            }
        };


        /*THIS IS FOR INACTIVE RECORD FUNCITON */
        $scope.ErrorFunction = function () {
            alert("Inactive record cannot be edited");
        }
        $scope.emptydata = [];
        $scope.rowCollection = [];
        $scope.flag = 0;

        /*
        Calling the api method to list the pf and esi details for the  filters  company name and
        showing the result in table.
        */
        $scope.PFESI_Listsearch = function () {

            $http.get(baseUrl + 'api/PFandESIConfiguration/PFandESIDetailList/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }

            }).error(function (data) {
                //console.log(data);
                $scope.error = "AN error has occured while Listing the records!" + data;
            });
        };



        /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
        $scope.PFESI_Listsearchgo = function () {
            $scope.Id = 0;
            var ListId = $scope.Id;
            $scope.ListPFandESIPopUP(ListId);
            $scope.Mode = 1;
            $scope.PFESI_Listsearch($scope.Id, $scope.Mode);
        };

        /*
        Close the pop up window for the view pop up on click cancel button 
        */
        $scope.CancelView = function () {
            angular.element('#PFandESIModelView').modal('hide');
            $scope.ClearPFandESIPopup();
            //  $scope.PFESI_Listsearchgo();
        }

        /*
       Close the pop up window for the add/edit pop up on click cancel button 
       */
        $scope.CancelPopup = function () {
            // if ($scope.Id > 0) {
            angular.element('#PFandESIModel').modal('hide');
            $scope.ClearPFandESIPopup();
            //  $scope.PFESI_Listsearchgo();
            //}

            // angular.element('#PFandESIModel').modal('hide');
            // $scope.ClearPFandESIPopup();
            //  $scope.Company_ListsearchGo();
        }

        /*
        Close the pop up window for the create and edit pop up on click cancel button 
        */
        $scope.CancelPopupButton = function () {
            angular.element('#PFandESIModel').modal('hide');
            $scope.ClearPopup();
            //  $scope.PFESI_Listsearchgo();
        }

        /*This is the function for view redirect */
        $scope.ViewRedirect = function () {
            //$location.path("/EditCompany/" + $scope.Id);
            $location.path("/PF_ESIEdit/" + $scope.Id);
        }

        /*This is the function for List redirect */
        $scope.ListRedirect = function () {
            //$location.path("/ListCompany");
            $location.path("/PF_ESIList/" + $scope.Id);
        }
        //$scope.CancelPopup = function () {
        //    angular.element('#PFandESIModel').modal('hide');
        //    angular.element('#PFandESIModelView').modal('hide');
        //    $scope.ClearPFandESIPopup();
        //}
    }
    ]);

    //THIS IS FOR USER NAME POLICY CONTROLLER FUNCTION //
    EmpControllers.controller("UserNamePolicyController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

            // Declaration and initialization of Scope Variables.
            $scope.UserName_FirstNameType = "0";
            $scope.UNName = "0";
            $scope.UserNameseperator = "0";      
            $scope.UserName_LastNameType = "0";
      
            $scope.UN_FirstNameType = "0";
            $scope.UN_Name = "0";
            $scope.UNseperator = "0";       
            $scope.UN_LastNameType = "0";
            $scope.UNIName = "0";
            $scope.UNIncseperators = "0";
       
            $scope.Email_FirstNameType = "0";
            $scope.EMName = "0";
            $scope.Emailseperator = "0";       
            $scope.Email_LastNameType = "0";
      
            $scope.Em_FirstNameType = "0";
            $scope.EM_Name = "0";
            $scope.Emseperator = "0";       
            $scope.Em_LastNameType = "0";
            $scope.UNI_Name = "0";
            $scope.EmIncseperators = "0";

            $scope.Id = 0;


      /*
      Validating the create page mandatory fields
      checking mandatory for the follwing fields
      UserName_Char,UserName_FirstNameType,UserName_LastChar,UserName_LastNameType,UN_Char,UN_FirstNameType,
      UN_LastChar,UN_LastNameType,Email_Char, Email_FirstNameType,Email_LastChar,Email_LastNameType,Em_Char,
      Em_FirstNameType,Em_LastChar,  Em_LastNameType
      and showing alert message when it is null.
      */
            $scope.Validationcontrols = function () {

                if (typeof ($scope.UserName_Char) == "undefined" || $scope.UserName_Char == "") {
                    alert("Please enter First 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.UserName_FirstNameType) == "undefined" || $scope.UserName_FirstNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }
                else if (typeof ($scope.UserName_LastChar) == "undefined" || $scope.UserName_LastChar == "") {
                    alert("Please enter 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.UserName_LastNameType) == "undefined" || $scope.UserName_LastNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }

                else if (typeof ($scope.UN_Char) == "undefined" || $scope.UN_Char == "") {
                    alert("Please enter First 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.UN_FirstNameType) == "undefined" || $scope.UN_FirstNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }
                else if (typeof ($scope.UN_LastChar) == "undefined" || $scope.UN_LastChar == "") {
                    alert("Please enter 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.UN_LastNameType) == "undefined" || $scope.UN_LastNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }
                else if (typeof ($scope.Email_Char) == "undefined" || $scope.Email_Char == "") {
                    alert("Please enter First 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.Email_FirstNameType) == "undefined" || $scope.Email_FirstNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }
                else if (typeof ($scope.Email_LastChar) == "undefined" || $scope.Email_LastChar == "") {
                    alert("Please enter 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.Email_LastNameType) == "undefined" || $scope.Email_LastNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }
                else if (typeof ($scope.Em_Char) == "undefined" || $scope.Em_Char == "") {
                    alert("Please enter First 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.Em_FirstNameType) == "undefined" || $scope.Em_FirstNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }
                else if (typeof ($scope.Em_LastChar) == "undefined" || $scope.Em_LastChar == "") {
                    alert("Please enter 'x' no. of Character(s)");
                    return false;
                }
                else if (typeof ($scope.Em_LastNameType) == "undefined" || $scope.Em_LastNameType == 0) {
                    alert("Please enter First/Last Name");
                    return false;
                }
                return true;
            };


            /*calling password policy function */
            $scope.CallPassword = function ()
            {         
                $location.path("/EditPasswordPolicy/0");
            }

            // Declaration and initialization of Scope Variables.
            $scope.UserNameList = [];
            $scope.UserNamePolicyModel = [];


         /*
         Calling the api method to view the details of the username policy
         for the username policy Id 
         and display the details in the view pop up window.
         */
            $scope.UserNamePolicy_ViewEdit = function () {            
                $http.get(baseUrl + 'api/UserNamePolicy/GetSeparatorList/').success(function (data) {
                        
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.UserNameList = data;
                    // only active company
                    $scope.UserNamePolicyModel = $ff(data, { Active: 1 });
               
                    $http.get(baseUrl + 'api/UserNamePolicy/ViewEditUserNamePolicy/?Id=' + $scope.Id).success(function (data) {
                                               
                        $scope.Id = data.Id;
                        $scope.UserName_Char = data.UserName_Char;
                        $scope.UserName_FirstNameType = data.UserName_FirstNameType;
                        $scope.UserNameseperator = data.UserName_Separator.toString();
                        $scope.ViewUNName = data.UserNameseperator;
                        $scope.UserName_LastChar = data.UserName_LastChar;
                        $scope.UserName_LastNameType = data.UserName_LastNameType;

                        $scope.UN_Char = data.UN_Char;
                        $scope.UN_FirstNameType = data.UN_FirstNameType;
                        $scope.UNseperator = data.UN_Separator.toString();
                        $scope.ViewUN_Name = data.UNseperator;
                        $scope.UN_LastChar = data.UN_LastChar;
                        $scope.UN_LastNameType = data.UN_LastNameType;
                        $scope.UNIncseperators = data.UNIncSeparator.toString();
                        $scope.ViewUNIName = data.UNIncseperators;

                        $scope.Email_Char = data.Email_Char;
                        $scope.Email_FirstNameType = data.Email_FirstNameType;
                        $scope.Emailseperator = data.Email_Separator.toString();
                        $scope.ViewEMName = data.Emailseperator;
                        $scope.Email_LastChar = data.Email_LastChar;
                        $scope.Email_LastNameType = data.Email_LastNameType;

                        $scope.Em_Char = data.Em_Char;
                        $scope.Em_FirstNameType = data.Em_FirstNameType;
                        $scope.Emseperator = data.Em_Separator.toString();
                        $scope.ViewEM_Name = data.Emseperator;
                        $scope.Em_LastChar = data.Em_LastChar;
                        $scope.Em_LastNameType = data.Em_LastNameType;
                        $scope.ViewUNI_Name = data.EmIncseperators;
                        $scope.EmIncseperators = data.EmIncSeparator.toString();
                

                        $scope.UserNameInactiveFlag = 0;
                        $scope.UN_NameInactiveFlag = 0;
                        $scope.UNINameInactiveFlag = 0;
                        $scope.EMNameInactiveFlag = 0;
                        $scope.EM_NameInactiveFlag = 0;
                        $scope.UNI_NameInactiveFlag = 0;

                        // if the current viewing company is inactive
                        // set the flag value to 1
                        if (($ff($scope.UserNameList, { Id: $scope.UserNameseperator, Name: $scope.ViewUNName, Active: 0 }).length) == 1) {
                            $scope.UserNameInactiveFlag = 1;
                        }

                        if (($ff($scope.UserNameList, { Id: $scope.UNseperator, Name: $scope.ViewUN_Name, Active: 0 }).length) == 1) {
                            $scope.UN_NameInactiveFlag = 1;
                        }

                        if (($ff($scope.UserNameList, { Id: $scope.UNIncseperators, Name: $scope.ViewUNIName, Active: 0 }).length) == 1) {
                            $scope.UNINameInactiveFlag = 1;
                        }

                        if (($ff($scope.UserNameList, { Id: $scope.Emailseperator, Name: $scope.ViewEMName, Active: 0 }).length) == 1) {
                            $scope.EMNameInactiveFlag = 1;
                        }

                        if (($ff($scope.UserNameList, { Id: $scope.Emseperator, Name: $scope.ViewEM_Name, Active: 0 }).length) == 1) {
                            $scope.EM_NameInactiveFlag = 1;
                        }

                        if (($ff($scope.UserNameList, { Id: $scope.EmIncseperators, Name: $scope.ViewUNI_Name, Active: 0 }).length) == 1) {
                            $scope.UNI_NameInactiveFlag = 1;
                        }


                   
                    }).error(function (data) {
                        $scope.error = "An error has occcurred while editing UserName Policy Details!" + data;
                    });
                });
            };

            /*calling clear function */
            $scope.ClearFields = function () {
                $scope.UserName_Char = "";
                $scope.UserName_FirstNameType = "0";
                $scope.UNName = "0";
                $scope.UserNameseperator = "0";
                $scope.UserName_LastChar = "";
                $scope.UserName_LastNameType = "0";

                $scope.UN_Char = "";
                $scope.UN_FirstNameType = "0";
                $scope.UN_Name = "0";
                $scope.UNseperator = "0";
                $scope.UN_LastChar = "";
                $scope.UN_LastNameType = "0";
                $scope.UNIName = "0";
                $scope.UNIncseperators = "0";

                $scope.Email_Char = "";
                $scope.Email_FirstNameType = "0";
                $scope.EMName = "0";
                $scope.Emailseperator = "0";
                $scope.Email_LastChar = "";
                $scope.Email_LastNameType = "0";

                $scope.Em_Char = "";
                $scope.Em_FirstNameType = "0";
                $scope.EM_Name = "0";
                $scope.Emseperator = "0";
                $scope.Em_LastChar = "";
                $scope.Em_LastNameType = "0";
                $scope.UNI_Name = "0";
                $scope.EmIncseperators = "0";
            }



            $scope.loading = false;
         /*
         Call the api method for insert and Update the record for a username policy
         and display the record of selected username policy when Id is greater than 0
         in edit.html and provide an option for create and modify the username policy and save the username policy record
         */
            $scope.UserNamePolicy_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    var obj = {
                        Id: $scope.Id,
                        UserName_Char: $scope.UserName_Char,
                        UserName_FirstNameType: $scope.UserName_FirstNameType,
                        UserName_Separator: $scope.UserNameseperator == 0 ? null : $scope.UserNameseperator,
                        UserName_LastChar: $scope.UserName_LastChar,
                        UserName_LastNameType: $scope.UserName_LastNameType,

                        UN_Char: $scope.UN_Char,
                        UN_FirstNameType: $scope.UN_FirstNameType,
                        UN_Separator: $scope.UNseperator == 0 ? null : $scope.UNseperator,
                        UN_LastChar: $scope.UN_LastChar,
                        UN_LastNameType: $scope.UN_LastNameType,
                        UNIncSeparator: $scope.UNIncseperators == 0 ? null : $scope.UNIncseperators,

                        Email_Char: $scope.Email_Char,
                        Email_FirstNameType: $scope.Email_FirstNameType,
                        Email_Separator: $scope.Emailseperator == 0 ? null : $scope.Emailseperator,
                        Email_LastChar: $scope.Email_LastChar,
                        Email_LastNameType: $scope.Email_LastNameType,

                        Em_Char: $scope.Em_Char,
                        Em_FirstNameType: $scope.Em_FirstNameType,
                        Em_Separator: $scope.Emseperator == 0 ? null : $scope.Emseperator,
                        Em_LastChar: $scope.Em_LastChar,
                        Em_LastNameType: $scope.Em_LastNameType,
                        EmIncSeparator: $scope.EmIncseperators == 0 ? null : $scope.EmIncseperators

                    };


                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 second
                    $http.post(baseUrl + '/api/UserNamePolicy/UserNamePolicy_AddEdit/', obj).success(function (data) {

                        alert("Saved Successfully");
                        $location.path("/EditUserNamePolicy/" + data);

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                        // $scope.ClearFields ();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding User Name Policy Details!" + data.ExceptionMessage;
                    });

                    $scope.ListRedirect = function () {
                        $location.path("/UserNamePolicy");
                    }

                }
            };
            
        }
    ]);

    /* THIS IS FOR LEAVE ADJUSTMENT CONTROLLER FUNCTION */
    EmpControllers.controller("LeaveTypeController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {


          

                /*THIS IS FOR PAGINATION FUNCTION */
                $scope.listdata = [];
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }

                // Declaration and initialization of Scope Variables.
                $scope.Employee_Id = "0";
                $scope.Employee_Id = "";
                $scope.Employee_No = "";
                $scope.Employee_Name = '';
                $scope.AddSubtract = "0";
                $scope.No_of_days = "";
                $scope.Remarks = "";
                $scope.Name = "";

                 /* Open the create pop up window */
            $scope.AddLeaveRequestPopUP = function (LPH) {
                $scope.Resetvalues();
                $scope.Id = LPH;
                angular.element('#LeaveAdjustmentModel').modal('show');
            };

                /* on click Go calling the list function.*/
            $scope.LeaveRequestListGo = function () {
                $scope.Id = 0;
                $scope.Mode = 1;
                $scope.LeaveAdjustmentListfunction($scope.Id, $scope.Mode);
            };


                /* List page pop up function */
            $scope.ListAdjustmentPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.LeaveAdjustmentListfunction();
            }


      

                /* Open the view pop up window and show the details for the employee leave adjustment details */
            $scope.Viewleave = function (CMId,TotalAdjustment) {
                $scope.TotalAdjustment =TotalAdjustment;
                $scope.LeaveId = CMId;
                $scope.LeavebalancePopup();
                angular.element('#LeaveModel').modal('show');
            }




            $scope.emptydatas = [];
            $scope.rowCollections = [];

            var EmpName = ''

                /* THIS IS FOR EMPLOYEE POPUP FUNCTION */
            $scope.LeavebalancePopup = function () {           

                if ($scope.rowCollections != undefined) {  
                    $scope.rowCollections = [];

                    var EmpName = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;
                   
                        $http.get(baseUrl + '/api/LeaveAdjustment/LeaveAdjustmentDetails_View/?Id=' + EmpName + '&LeaveTypeId=' + $scope.LeaveId).success(function (data) {
                       
                            if(data == 0){    
                          
                                $scope.leavename =-1;
                                $scope.employeename =-1;
                            }
                            else{
                                angular.forEach(data, function (value, index) {
                                    $scope.leavename = value.Name;                            
                                    $scope.employeename = value.Employee_Name;                            
                                });
                            }
                       
                        $scope.rowCollections = [];
                        $scope.emptydatas = [];
                        $scope.rowCollections = data;


                        if ($scope.rowCollections.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }


                    }).error(function (data) {
                        $scope.error = "AN error has occured while getting leave adjustment!" + data;
                    });
                  }
                }
            };


                /* Open the view pop up window and show the details for the employee leave request details */
            $scope.ViewRequest = function (CMId,TotalLeaveRequest) {

                $scope.TotalLeaveRequest =TotalLeaveRequest;            
                $scope.RequestId = CMId;
                $scope.LeaverequestPopup();
                angular.element('#RequestModel').modal('show');
            }


            var EmpName = ''

            $scope.emptydatas = [];
            $scope.rowCollections = [];

                /* THIS IS FOR EMPLOYEE POPUP FUNCTION */
            $scope.LeaverequestPopup = function () {    
            
          
                if ($scope.rowCollections != undefined) { 
                    $scope.rowCollections = [];

                    var EmpName = '';

                  //  $scope.EmployeeId = $window.localStorage['UserId'];
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;
                    
                        $http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_Days/?Id=' + EmpName + '&LeaveTypeId=' + $scope.RequestId).success(function (data) {
                      
                            if(data == 0){    
                          
                                $scope.leavename = -1;
                                $scope.employeename = -1;
                            }
                        else{
                            angular.forEach(data, function (value, index) {
                                $scope.leavename = value.LeaveType;                            
                                $scope.employeename = value.FullName;                            
                            });
                    }
                        //console.log(data);
                        $scope.rowCollections = [];
                        $scope.emptydatas = [];
                        $scope.rowCollections = data;


                        if ($scope.rowCollections.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }


                    }).error(function (data) {
                        $scope.error = "AN error has occured while getting leave adjustment!" + data;
                    });
                   }
                }
            };


                /*Company Master dropdown*/
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.CompanyFilterList = data;                
                });


           
                $scope.Company_Name = "0";

                /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.EmployeeAttendancelist = function () {
                    // $scope.autocompleteclear();
                    if ($scope.NamefilterList != undefined) {  
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        // $scope.NameList = [];
                        // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                        });
                    }
                };

                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                    $scope.Autofilterlist = data;
                    $scope.Autolist = data;
                });


                /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
                $scope.Autocompletefilter = function () {
                    if ($scope.IsActive == 1) {

                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                    }
                    else if ($scope.IsActive == 0) {
                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                    }
                    else if ($scope.IsActive == -1) {
                        $scope.Autolist = [];
                        $scope.Autolist = $scope.Autofilterlist;
                    }
                };



              //  $scope.Company_Name = 0;
                $scope.rowCollection = [];

                 $scope.LeaveAdjustmentListfunction = function () {
             
                     $scope.EmployeeId = $window.localStorage['UserId'];
              
                     $scope.emptydata = [];
                     $scope.rowCollection = [];

                     var today = new Date();
                     var dd = today.getDate();

                     var mm = today.getMonth() + 1;
                     var yyyy = today.getFullYear();
                     if (dd < 10) {
                         dd = '0' + dd;
                     }

                     if (mm < 10) {
                         mm = '0' + mm;
                     }
                     today = yyyy + '-' + mm + '-' + dd;

                     $scope.CommonLogin_Permission = true;


                     var EmpName = '';
                     if ($scope.Employee_Selected != undefined) {
                         EmpName = $scope.Employee_Selected.originalObject.FullName;
                     };

                     $scope.loading = true;
                     $timeout(function () {
                         if ($scope.loading == true) {
                             $rootScope.$broadcast('show');
                         }
                     }, 3000); // 3 seconds       
                
                 
                     $http.get(baseUrl + '/api/LeaveAdjustment/LeaveAdjustment_ListAll/?LoginUser_Id=' + $scope.EmployeeId + '&LeaveDate=' + today + '&LeaveTypeId=0' + '&Full_Name=' + EmpName + '&CompanyId=' + $scope.Company_Name).success(function (data) {

                         $scope.emptydata = [];
                         $scope.rowCollection = [];                    
                          $scope.rowCollection = data;
                      
                         if ($scope.rowCollection.length > 0) {
                             $scope.flag = 1;
                         }
                         else {
                             $scope.flag = 0;
                         }

                         //if (data.LoginUser == 2)
                         //    $scope.CommonLogin_Permission = false;
                         //else
                         //    $scope.CommonLogin_Permission = true;
                         $scope.loading = false;
                         $rootScope.$broadcast('hide');



                     }).error(function (data) {
                         $scope.error = "An error has occurred while Listing Leave Adjustment Details!" + data;
                     });
                 };






                /* THIS IS FOR VALIDATION FUNCTION */
                /* Validating the list page fields checking mandatory for the follwing fields
                Leave type,AddSubtract, No. of days,Employee NameList
                 and showing alert message when it is invalid.*/
                $scope.Validationcontrols = function () {
                    if (typeof ($scope.NameList) == "undefined" || $scope.Employee_Selected == undefined) {
                        alert("Please select Employee Name");
                        return false;
                    }
                    else if (typeof ($scope.Name) == "undefined" || $scope.Name == 0) {
                        alert("Please select Leave Type");
                        return false;
                    }
                        //else if (typeof ($scope.Employee_Id) == "undefined" || $scope.Employee_Id == 0) {
                        //    alert("Please select Employee");
                        //    return Employee_Id;
                        //}
                    else if (typeof ($scope.AddSubtract) == "undefined" || $scope.AddSubtract == 0) {
                        alert("Please select Add/Subtract");
                        return false;
                    }
                    else if (typeof ($scope.No_of_days) == "undefined" || $scope.No_of_days == 0) {
                        alert("Please enter No. of Days");
                        return false;
                    }

                    else if (typeof ($scope.Remarks) == "undefined" || $scope.Remarks == 0) {
                        alert("Please enter Remarks");
                        return false;
                    }
                        /* Check the No. of Days decimal value is .5 only*/
                    else if (($scope.No_of_days + "").split(".").length > 1) {
                        if (($scope.No_of_days + "").split(".")[1] != 5) {
                            alert("Please enter valid No. of Days");
                            return false;
                        }
                    }
                    if (($scope.No_of_days + "").split(".")) {
                        if (($scope.No_of_days + "").split(".")[1] == "") {
                            alert("Please enter valid No. of Days");
                            return false;
                        }
                    }
                    return true;
                };



                /* THIS IS FOR LEAVE TYPE LIST FUNCTION */
                //$scope.LeaveType = [];
                //$scope.LeaveTypeList = [];
                //$http.get(baseUrl + 'api/Common/GetLeaveTypeList/').success(function (data) {
                //    $scope.LeaveType = data;
                //    $scope.LeaveTypeList = $ff(data, { Active: 1 });
                //});


                /* THIS IS FOR LEAVE TYPE LIST FUNCTION */
                $scope.LeaveTypes = [];
                $scope.LeaveTypeList = [];

                $scope.leavetypefunction = function () {
                    $scope.LeaveTypes = [];
                    $scope.LeaveTypeList = [];
                    var EmpName = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;
                   
                        $http.get(baseUrl + 'api/Common/GetLeaveTypeList_FromLeavePolicy/?Id=' + EmpName).success(function (data) {

                            $scope.LeaveTypes = $ff(data, { Active: 1 });
                            $scope.LeaveTypeList = data;
                        });
                    };

                };
                $scope.leavetypefunction();
          


                $http.get(baseUrl + 'api/Common/GetLeaveTypeList_FromLeavePolicy/?Id=' + $scope.Id).success(function (data) {

                    $scope.LeaveTypes = $ff(data, { Active: 1 });
                    $scope.LeaveTypeList = data;
                });


                $scope.Id = 0;
                $scope.AddSubtract = "0";
                //This is for hardcoded dropdown AddSubtract
                $scope.AddSubtractDDL = function (Add) {
                    if ($scope.Add == 1) {
                        $scope.AddView = ' Add';
                    }
                    else if ($scope.Add == 2) {
                        $scope.AddView = 'Subtract';
                    }
                };
            

                //This is the values to edit page 
                $scope.LeaveAdjustment_ViewEdit = function () {
                    if ($routeParams.Id != undefined) {
                        $scope.Id = $routeParams.Id;
                        $http.get(baseUrl + 'api/LeaveAdjustment/LeaveAdjustment_View/?Id=' + $scope.Id).success(function (data) {
                            $scope.Id = data.Id;
                            $scope.Name = data.LeaveTypeId.toString();
                            $scope.listName = data.Name;
                            $scope.Employee_No = data.Employee_No;
                            $scope.EmployeeId = data.Employee_Id;
                            $scope.Employee_Name = data.Employee_Name;
                            $scope.FullNamelist = data.FullNamelist;
                            $scope.AddSubtract = data.AddSubtract.toString();
                            $scope.AddSubtractDDL(data.AddSubtract);
                            $scope.No_of_days = data.No_of_days;
                            $scope.Remarks = data.Remarks;

                            var sel = {
                                Id: data.Employee_Id,
                                FullName: data.FullName,
                                FullNamelist: data.FullNamelist
                            };
                            $scope.DisplayFullName = sel;                        

                            $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                            if (($ff($scope.LeaveTypes, { Id: $scope.Name, Name: $scope.listName, Active: 0 }).length) == 1) {
                                $scope.LeaveInactiveFlag = 1;
                            }
                            $scope.GoToResetvalues();
                        }).error(function (data) {
                            $scope.error = "An error has occcurred while editing Leave Adjustment Details!" + data;
                        });
                        $scope.LeaveBalance();
                    }
                };

                $scope.LeaveAdjustment_ViewEdit();

                $scope.Employee_Name = "";
        
                $scope.Company_Name = "0";

                // Dropdown list for the employee.
                $scope.NameList = [];
                $scope.EmployeeAttendancelist = function () {

               
                    if ($scope.NameList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });
                        });
                    }
                }
               


                /* To show the employee code at the time of employee selection */
                $scope.AttendanceEmployeeNameList = function () {
                    var EmployeeNo = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;
                        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {
                            $scope.Employee_No = data.Employee_No;
                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    };
                };

             //   $scope.EmployeeId = 0;
                $scope.emptydatas = [];
                $scope.rowCollections = [];

                /* THIS IS FOR EMPLOYEE POPUP FUNCTION */
                $scope.EmployeeDetailsPopup = function () {

                    var EmpName = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.FullName;
                    };
                    $http.get(baseUrl + '/api/Common/EmployeeList/?Id=0' + '&Company_Name=0').success(function (data) {
                        $scope.rowCollections = [];
                        $scope.emptydatas = [];
                        $scope.rowCollections = data;
                        if ($scope.rowCollections.length > 0) {
                            $scope.flags = 1;
                        }
                        else {
                            $scope.flags = 0;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while getting Employee List!" + data;
                    });
                };

                /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
                $scope.Autolist = [];
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                    $scope.Autolist = data;
                });

                $scope.Emplist = [];
                $http.get(baseUrl + 'api/Common/EmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0').success(function (data) {
                    $scope.Emplist = data;

                });

                $scope.GetEmp_NameList = [];
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                    $scope.GetEmp_NameList = data;

                });


       
                $scope.Company_Name = "0";

                $scope.NameList = [];
                $scope.AdjustEmployeeLeavelist = function () {
                    if ($scope.NameList != undefined) {  
                        $scope.NameList = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                        });
                    }
                }




                /* THIS IS FOR LEAVE ADJUSTMENT DELETE FUNCTION */
                $scope.Leave_Delete = function () {
                    $http.get(baseUrl + 'api/Common/LeaveAdjustment_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Do You Want To Delete?");
                        $location.path("/LeaveAdjustmentList");
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting LeaveAdjustment" + data;
                    });
                };
                //This is for clear the contents in the popup
                $scope.Clearfields = function () {
                    $scope.Employee_No = "";
                    $scope.AddSubtract = "0";
                    $scope.No_of_days = "";
                    $scope.Remarks = "";
                    $scope.Employee_Name = "";
                    $scope.LeaveInactiveFlag = 0;
                    // $scope.NameList = [];
                    $scope.FullName = "0";
                    $scope.Employee_Id = "";
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                };
                // $scope.EmployeeId = $window.localStorage['UserId'];

                $scope.Resetvalues = function () {
                    $scope.Name = "";
                    $scope.Employee_No = "";
                    $scope.AddSubtract = "0";
                    $scope.No_of_days = "";
                    $scope.Remarks = "";
                    $scope.Employee_Name = "";
                    $scope.LeaveInactiveFlag = 0;
                    $scope.NameList = [];
                    $scope.FullName = "0";
                    $scope.Employee_Id = "";
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                    $scope.rowCollection = [];
                    $scope.flag = 0;
                    $scope.LeaveTypes =[];
                    $scope.LeaveTypeList = [];
                }

                $scope.Resettable = function () {
                    $scope.Name = "";
                   // $scope.Employee_No = "";
                    $scope.AddSubtract = "0";
                    $scope.No_of_days = "";
                    $scope.Remarks = "";
                  //  $scope.Employee_Name = "";
                    $scope.LeaveInactiveFlag = 0;
                    $scope.NameList = [];
                    $scope.FullName = "0";
                    $scope.Employee_Id = "";
                 //   $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                  //  $scope.rowCollection = [];
                    $scope.flag = 0;
                    $scope.LeaveTypes = [];
                    $scope.LeaveTypeList = [];
                }
           
                /* THIS IS FOR ADD EDIT FUNCTION */
                $scope.LeaveAdjustment_AddEdit = function () {
                    if ($scope.Validationcontrols() == true) {
                        $scope.Id = 0;
                        $scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                        var obj = {
                            Id: $scope.Id,
                            LeaveTypeId: $scope.Name,
                            EmployeeId: $scope.Employee_Id,
                            AddSubtract: $scope.AddSubtract,
                            No_of_days: $scope.No_of_days,
                            Remarks: $scope.Remarks,
                        };
                        $scope.loading = true;
                        $timeout(function () {
                            if ($scope.loading == true) {
                                $rootScope.$broadcast('show');
                            }
                        }, 3000); // 3 seconds

                   
                        $http.post(baseUrl + '/api/LeaveAdjustment/LeaveAdjustment_AddEdit/', obj).success(function (data) {                    

                            $scope.AddId = data;
                            var AddId = data;
                            $scope.ListAdjustmentPopUP(AddId);
                            // $scope.CancelPopup();
                            angular.element('#LeaveAdjustmentModel').modal('hide');



                            alert("Saved Successfully");
                            $scope.GoToResettable();
                         //   $location.path("/EditLeaveAdjustmentDetails/" + data);
                            // window.location.href = baseUrl + "/Home/Index#/EditLeaveAdjustmentDetails/" + data;
                            $scope.loading = false;
                            $rootScope.$broadcast('hide');
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding LeaveAdjustment!" + data.ExceptionMessage;
                        });
                    }
                };

                $scope.GoToResetvalues = function () {
                    $scope.Resetvalues();
                }
                $scope.GoToResettable = function () {
                    $scope.Resettable();
                }
                $scope.ListRedirect = function () {
                    $location.path("/LeaveAdjustmentDetails");
                }

                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.flag = 0;
         

                //To show the leave balance for the employee
                $scope.LeaveBalance = function () {
             
              
                    var today = new Date();
                    var dd = today.getDate();

                    var mm = today.getMonth() + 1;
                    var yyyy = today.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd;
                   
                    }   

                    if (mm < 10) {
                        mm = '0' + mm;
                   
                    }

                    today = yyyy + '-' + mm + '-' + dd;

              

                    var EmpName = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;


                        //$scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                        $http.get(baseUrl + '/api/Common/LeaveBalance/?EmpId=' + EmpName + '&LeaveDate=' + today + '&LeaveTypeId=' + $scope.Name).success(function (data) {
                                  
                   
                            $scope.rowCollection = [];
                            $scope.rowCollection = data;
                                $scope.CommonTransaction_Id = data;
                                $scope.rowCollection = data;
                                                   
                          
                                if ($scope.rowCollection.length > 0) {
                                    $scope.flag = 1;
                                }
                            
                                else {
                                    $scope.flag = 0;
                                }

                           
                                angular.forEach($scope.rowCollection, function (value, index) {
                                    $scope.LeaveAvailable = value.LeaveAvailable;
                                    $scope.LeaveBalances = value.LeaveBalance;

                                    if ($scope.rowCollection.length > 0 && $scope.LeaveAvailable < 0) {

                                        $scope.flag = 0;
                                    }
                                    //else if ($scope.rowCollection.length > 0 && $scope.LeaveBalances == "null")
                                    //{                                    
                                    //    $scope.flag = 0;
                                    //}
                                    //else if ($scope.LeaveBalances == null)
                                    //{
                                    //    $scope.flag = 0;
                                    //}
                              
                                });
                    
                        }).error(function (data) {
                            $scope.error = "An error has occurred while Listing leave adjustment Details!" + data;
                        });
                    }
                };


                $scope.LeaveBalancetype = function () { 


                    var today = new Date();
                    var dd = today.getDate();

                    var mm = today.getMonth() + 1;
                    var yyyy = today.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd;

                    }

                    if (mm < 10) {
                        mm = '0' + mm;

                    }

                    today = yyyy + '-' + mm + '-' + dd;



                    var EmpName = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;


                        //$scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                        $http.get(baseUrl + '/api/Common/LeaveBalance/?EmpId=' + EmpName + '&LeaveDate=' + today + '&LeaveTypeId=0' + $scope.Name).success(function (data) {

                            $scope.rowCollection = [];
                            $scope.rowCollection = data;
                            $scope.CommonTransaction_Id = data;
                            $scope.rowCollection = data;


                            if ($scope.rowCollection.length > 0) {
                                $scope.flag = 1;
                            }

                            else {
                                $scope.flag = 0;
                            }


                            angular.forEach($scope.rowCollection, function (value, index) {
                                $scope.LeaveAvailable = value.LeaveAvailable;
                                $scope.LeaveBalances = value.LeaveBalance;

                                if ($scope.rowCollection.length > 0 && $scope.LeaveAvailable < 0) {

                                    $scope.flag = 0;
                                }
                                //else if ($scope.rowCollection.length > 0 && $scope.LeaveBalances == "null")
                                //{                                    
                                //    $scope.flag = 0;
                                //}
                                //else if ($scope.LeaveBalances == null)
                                //{
                                //    $scope.flag = 0;
                                //}

                            });

                        }).error(function (data) {
                            $scope.error = "An error has occurred while Listing leave adjustment Details!" + data;
                        });
                    }
                };
                //To show the leave balance for the employee        


                $scope.CancelPopup = function () {

                    angular.element('#LeaveAdjustmentModel').modal('hide');
                    $scope.Resetvalues();
                }


            }
    ]);

    /* THIS IS FOR SKILL LIST CONTROLLER FUNCTION */
    EmpControllers.controller("EmployeeSkillController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
    function ($scope, $http, $routeParams, $location, $filter,$window) {

        $scope.Id = 0;
        $scope.Id = "0";
        $scope.ScoreId = "0";
        $scope.Skill = "0";
        $scope.Description = "0";
        $scope.Score = "0";
        $scope.Description = "0";
        $scope.Category = "0";
        $scope.Description_List = "0";
        $scope.Skill_List = '';
        $scope.SkillType = "0";

        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }
        $scope.CategoryName = "0";
        /* THIS IS FOR SKILL LIST FUNCTION */
        $scope.EmployeeSkill_Listsearch = function () {
            $scope.emptydata = [];
            $scope.rowCollection = [];

            $http.get(baseUrl + '/api/EmployeeSkill/EmployeeSkill_List/?Id=' + $scope.Id + '&CategoryId=' + $scope.CategoryName + '&Skill=' + $scope.Skill_List).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;


            }).error(function (data) {
                //console.log(data);
                $scope.error = "AN error has occured while deleting Employee Skill" + data;
            });

        };

        /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
        $scope.EmployeeSkill_Listsearchgo = function () {
            $scope.Id = 0;
            var ListId = $scope.Id;
            $scope.ListEmployeeSkillPopUP(ListId);
        };


        /* THIS IS FOR COMPANY LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
            $scope.CompanyList = data;
        });

        /* THIS IS FOR DEPARTMENT LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
            $scope.DepartmentList = data;
        });

        /* THIS IS FOR GENDER LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/GetGenderList/').success(function (data) {
            $scope.GenderList = data;
        });

        $scope.Description_List = "0";
        $scope.Skill_List = '';
        $scope.CompanyName = "0";
        $scope.Department_Name = "0";
        $scope.Employee_No = '';
        $scope.Category_List = "0";

        /* THIS IS FOR EMPLOYEE LIST FUNCTION */
        $scope.SkillDB_Listsearch = function () {
            $scope.emptydata = [];
            $scope.rowCollection = [];

            $http.get(baseUrl + '/api/EmployeeSkill/SkillDB_List/?Id=' + $scope.Id + '&Company_Name=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&FullName=' + $scope.Employee_No + '&ScoreId=' + $scope.Description_List + '&Skill=' + $scope.Skill_List + '&CategoryId=' + $scope.Category_List).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;


            }).error(function (data) {
                //console.log(data);
                $scope.error = "AN error has occured while deleting Employee Skill" + data;
            });
        };


        /* THIS IS FOR VALIDATION FUNCTION */
        $scope.Validationcontrols = function () {
            if (typeof ($scope.Category) == "undefined" || $scope.Category == 0) {
                alert("Please select Category");
                return Category;
            }
            else if (typeof ($scope.SkillType) == "undefined" || $scope.SkillType == 0) {
                alert("Please select Skill");
                return SkillType;
            }
            else if (typeof ($scope.Description) == "undefined" || $scope.Description == 0) {
                alert("Please select Description");
                return Description;
            }
        };




        /* THIS IS FOR SKILL CATEGORY LIST FUNCTION */
        $scope.SkillCategoryList = [];
        $http.get(baseUrl + 'api/Common/GetSkillCategoryList/').success(function (data) {
            $scope.SkillCategoryList = data;
        });
        $scope.SkillList = [];
        /* THIS IS FOR SKILL LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/SkillList/').success(function (data) {
            $scope.SkillList = data;
        });

        /* THIS IS FOR SCORE LIST FUNCTION */
        $http.get(baseUrl + '/api/Common/ScoreList/').success(function (data) {
            $scope.ScoreList = data;
        });


        /* THIS IS FOR VIEW FUNCTION POPUP */
        $scope.AddEmployeeSkillPopUP = function (ESId) {
            $scope.Id = ESId;
            //$scope.ViewEmployeeSkill();
            angular.element('#EmployeeSkillModel').modal('show');
        }
        $scope.ViewEmployeeSkillPopUP = function (ESId) {
            $scope.Id = ESId;
            $scope.ViewEmployeeSkill();
            angular.element('#EmployeeSkillView').modal('show');
        }
        $scope.EditEmployeeSkillPopUP = function (ESId) {
            $scope.Id = ESId;
            $scope.ViewEmployeeSkill();
            angular.element('#EmployeeSkillModel').modal('show');
        }
        $scope.ListEmployeeSkillPopUP = function (PFESIId) {
            $scope.Id = PFESIId;
            $scope.EmployeeSkill_Listsearch();
            // angular.element('#PFandESIModel').modal('show');
        }
        /* THIS IS FOR VIEW FUNCTION */
        $scope.Id = 0;
        $scope.ViewEmployeeSkill = function () {
            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/EmployeeSkill/EmployeeSkill_View/?Id=' + $scope.Id).success(function (data) {
                $scope.EmployeeId = data.EmployeeId;
                $scope.Category = data.CategoryId.toString();
                $scope.listCategory = data.Category;
                $scope.SkillType = data.SkillId.toString();
                $scope.listSkill = data.Skill;
                $scope.Description = data.ScoreId.toString();
                $scope.listDescription = data.Description;

            }).error(function (data) {
                $scope.error = "AN error has occured while list Employee Skill!" + data;
            });

        };

        /* THIS IS FOR DELETE FUNCTION */
        $scope.EmployeeSkill_Delete = function () {
            $http.get(baseUrl + 'api/EmployeeSkill/EmployeeSkill_Delete/?Id=' + $scope.Id).success(function (data) {
                alert("Do You Want To Delete?");
                $location.path("/EmployeeSkillList");
            }).error(function (data) {
                $scope.error = "An error has occurred while deleting Employee Skill" + data;
            });
        };

        /* THIS IS FOR CLEARE POPUP FUNCTION  */
        $scope.ClearEmployeeSkillPopup = function () {
            $scope.Description = "0";
            $scope.Employee_Id = "0";
            $scope.Category = "0";
            $scope.Skill = "0";
            $scope.SkillType = "0";
        };


        $scope.EmployeeId = $window.localStorage['UserId'];
        /* THIS IS FOR ADD EDIT FUNCTION */
        $scope.EmployeeSkill_AddEdit = function () {
            var obj = {
                Id: $scope.Id,
                EmployeeId: $scope.EmployeeId,
                CategoryId: $scope.Category,
                SkillId: $scope.SkillType,
                ScoreId: $scope.Description == 0 ? null : $scope.Description
            };
            $http.post(baseUrl + '/api/EmployeeSkill/EmployeeSkill_AddEdit/', obj).success(function (data) {
                $scope.AddId = data;
                $scope.ListEmployeeSkillPopUP($scope.AddId);
                $scope.CancelPopup();
                $scope.ClearEmployeeSkillPopup();
                //$scope.EmployeeSkill_Listsearch();
                //$scope.CancelPopup();
                //$scope.ClearEmployeeSkillPopup();
            }).error(function (data) {
                $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
            });
        };

        $scope.ViewRedirect = function () {
            $location.path("/EditEmployeeSkill/" + $scope.Id);
        }
        $scope.ListRedirect = function () {
            $location.path("/EmployeeSkillList" + $scope.Id);
        }
        $scope.CancelPopup = function () {

            angular.element('#EmployeeSkillModel').modal('hide');
            angular.element('#EmployeeSkillView').modal('hide');
            $scope.ClearEmployeeSkillPopup();
        }
    }
    ]);

    /* THIS IS FOR EMPLOYEE SKILL LIST CONTROLLER FUNCTION */
    EmpControllers.controller("EmployeeSkillDBController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
    function ($scope, $http, $routeParams, $location, $filter,$window) {

        $scope.Id = 0;
        $scope.ScoreId = "0";
        $scope.Skill = "0";
        $scope.Description = "0";
        $scope.Score = "0";
        $scope.Description = "0";
        $scope.Category = "0";
        $scope.Description_List = "0";
        $scope.Skill_List = '';
        $scope.Description_List = "0";
        $scope.Skill_List = '';
        $scope.CompanyName = "0";
        $scope.Department_Name = "0";
        $scope.Employee_No = '';
        $scope.Category_List = "0";
        $scope.FullName = '';

        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }

        /* THIS IS FOR SKILLCATEGORY FUNCTION */
        $http.get(baseUrl + 'api/Common/GetSkillCategoryList/').success(function (data) {
            $scope.SkillCategoryList = data;
        });

        /* THIS IS FOR SKILL LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/SkillList/').success(function (data) {
            $scope.SkillList = data;
        });

        /* THIS IS FOR SCORE LIST FUNCTION */
        $http.get(baseUrl + '/api/Common/ScoreList/').success(function (data) {
            $scope.ScoreList = data;
        });

        /* THIS IS FOR COMPANY LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
            $scope.CompanyList = data;
        });

        /* THIS IS FOR DEPARTMENT LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
            $scope.DepartmentList = data;
        });

        /* THIS IS FOR GENDER LIST FUNCTION */
        $http.get(baseUrl + 'api/Common/GetGenderList/').success(function (data) {
            $scope.GenderList = data;
        });

        /* THIS IS FOR EMPLOYEE SKILL LIST CONTROLLER FUNCTION */
        $scope.SkillDB_Listsearch = function () {
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $http.get(baseUrl + 'api/EmployeeSkill/SkillDB_List/?Id=' + $scope.Id + '&Company_Name=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&Employee_No=' + $scope.FullName + '&ScoreId=' + $scope.Description_List + '&Skill=' + $scope.Skill_List + '&CategoryId=' + $scope.Category_List).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
            }).error(function (data) {
                //console.log(data);
                $scope.error = "AN error has occured while deleting Employee Skill" + data;
            });
        };
    }
    ]);

    //This is for Communication Controller functions//
    EmpControllers.controller("CommunicationController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {
         
           

                // List Page Pagination.
                $scope.Id = "0";
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }
                $scope.listdata = [];
                $scope.TypeOfContent = "0";
                $scope.CategoryName = "";


            

      /* Validating the create page mandatory fields
       checking mandatory for the follwing fields
       CategoryName,CommunicationDate,EmailSubject
       and showing alert message when it is null.
       */
                $scope.Validationcontrols = function () {
                    $scope.EmailContent = $('.summernote').eq(0).summernote('code');
                    if (typeof ($scope.CategoryName) == "undefined" || $scope.CategoryName == 0) {
                        alert("Please select Category");
                        return false;
                    }
                    //else if (typeof ($scope.CommunicationDate) == "undefined" || $scope.CommunicationDate == "") {
                    //    alert("Please select Communication Date ");
                    //    return false;
                    //}
                    //else if (isDate($scope.CommunicationDate) == false) {
                    //    alert("Date is in invalid format, please enter dd-mm-yyyy");
                    //    return false;
                    //}
                    else if (((typeof ($scope.EmailSubject) == "undefined" || $scope.EmailSubject == "") && typeof (($scope.EmailContent) == "undefined" || $scope.EmailContent == "")) && (typeof ($scope.SMS) == "undefined" || $scope.SMS == "")) {
                        alert("Please enter Email Subject & Email Content or SMS Message");
                        return false;
                    }              
                    return true;

                };


        

      /* Validating the create page mandatory fields
      checking mandatory for the follwing fields
      CategoryName,CommunicationDate,EmailSubject
      and showing alert message when it is null.
      */
                $scope.ListValidation = function () {
                    if (isDate($scope.Period_From) == false) {
                        alert("Allocation Period From is in invalid format, please enter dd-mm-yyyy");
                        return false;
                    }
                    else if (isDate($scope.Period_To) == false) {
                        alert("Allocation Period To is in invalid format, please enter dd-mm-yyyy");
                        return false;
                    }
                    else if (($scope.Period_From != "") && ($scope.Period_To != "")) {                   
                        if ((ParseDate($scope.Period_From) > ParseDate($scope.Period_To))) {
                            alert("From Date should not be greater than To Date");
                            return false;
                        }
                    }
                    return true;
                };


                /* 
                Calling api method for the dropdown list in the html page for the fields 
                CategoryName
                */
           
                     
                $scope.CategoryNameList = [];
                $scope.CategoryNametagsList = [];
                $scope.CategoryNametagsFilterList = [];

                $http.get(baseUrl + 'api/Common/CategoryList/').success(function (data) {
                    $scope.CategoryNameList = data;
                    $scope.CategoryNameFilterList = $ff(data, { Active: 1 });
             
                });



                $scope.Categorytagslist = function () {
               
                    $http.get(baseUrl + 'api/Communication/Communication_Categorylist/?Categoryid=' + $scope.CategoryName).success(function (data) {
                        if ($scope.CategoryName == 0)
                        {
                            $scope.CategoryNametagsList = [];
                        }
                        else
                            {
                        $scope.CategoryNametagsList = data;                   
                        $scope.CategoryNametagsFilterList = $ff(data, { Active: 1 });
                        }
                    });
                };

                
         
                //$scope.Textareacount = function () {
                // //   $scope.Remaining = '250 characters remaining';               
                //    var text_max = 250;
                //   // var listbox = document.getElementById("textarea");
                //    // $('#textarea_feedback').html(text_max + ' characters remaining'); 
                //    $scope.getkeys = function (event) {

                //        $scope.keyval = event.length;
                //        var text_remaining = ($scope.keyval) - text_length;
                //        $scope.Remaining = (text_remaining + ' characters remaining');
                //    }
                //    var text_length = ('' + $scope.SMS).length;
                //    var text_remaining = text_max - text_length;

                //    $scope.Remaining = (text_remaining + ' characters remaining');
               
                //};

                //$scope.Textareacount($scope.Remaining);

                /* 
                Calling api method for the dropdown list in the html page for the fields 
                CategoryName tags
                */
           

                // Declaration and initialization of Scope Variables.
                $scope.CategoryName = "0";
                $scope.Category_Name = "0";
                $scope.Period_To = "";
                $scope.Period_From = "";
                $scope.CommunicationDate = "0";
                $scope.Employee_No = "";
                $scope.EmailSubject = "";
                $scope.EmailContent = "";
                $scope.EmailAttachment = "";
                $scope.AttachmentFileName = "";
                $scope.FileFullpath = "";
                $scope.SMS = "";
                $scope.TypeOfContent = "0";

                /* Open the create pop up window */
                $scope.AddCommunicationPopUP = function (CMId) {
                  //  $scope.Textareacount();
                    $scope.Id = CMId;
                    angular.element('#CMModal').modal('show');
                }

                /* Open the view pop up window and show the details for the communication for the  communication Id */
                $scope.ViewCommunicationPopUP = function (CMId) {


                    $scope.Id = CMId;
                    $scope.ViewCommunication();
                    //angular.element('#CMViewModal').modal('show');
                    angular.element('#CMViewModal').modal('show');
                }

                /* Open the edit pop up window and show the details for the communication for the  communication Id */
                $scope.EditCommunicationPopUP = function (CMId) {
                    $scope.Id = CMId;
                    $scope.ViewCommunication();
                    angular.element('#CMModal').modal('show');
                }

                /*calling list function */
                $scope.ListCommunicationPopUP = function (CMId) {
                    //$scope.Id = CUId;
                    //$scope.CompanyUpdatesList();

                    if ($routeParams.Id == 0) {
                        $scope.rowCollection = [];
                    }
                    if ($scope.Id == 0 && $scope.Mode == 1) {

                        $scope.CommunicationList();
                    }
                    else if ($scope.Id > 0 && $scope.Mode == 1) {

                        $scope.CommunicationList();
                    }
                    if (CMId > 0) {
                        $scope.Id = CMId;
                        $scope.CommunicationList($scope.Id);
                    }
                }


          
                //Delete popup function// 
                $scope.DeleteCommunication = function (CMId) {
                    $scope.Id = CMId;
                    $scope.DeleteCommunicationDetails();
                };


                //ReInsert popup function// 
                $scope.ReInsertCommunication = function (CMId) {
                    $scope.Id = CMId;
                    $scope.ReInsertCommunicationDetails();
                };

       /*
       Calling the api method to view the details of the communication
       for the communication Id 
       and display the details in the view pop up window.
       */
                $scope.ViewCommunication = function () {
               

                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                    }
                    $http.get(baseUrl + 'api/Communication/CommunicationDetail_View/?Id=' + $scope.Id).success(function (data) {
                        $scope.CategoryName = data.Category_Id.toString();
                        $scope.ViewCategoryName = data.CategoryName;
                        $scope.Employee_No = data.Employee_No;
                        $scope.Employee_Name = data.FullName;
                      //  $scope.CommunicationDate = $filter('date')(data.CommunicationDate, "dd-MMM-yyyy");
                        $scope.EmailSubject = data.EmailSubject;
                        $scope.EmailContent = data.EmailContent;
                        $scope.EmailAttachment = data.EmailAttachment;
                        $scope.uploadme = data.EmailAttachment;
                        $scope.AttachmentFileName = data.AttachmentFileName;
                        $scope.FileFullpath = data.FileFullpath;
                        $scope.SMS = data.SMS;
                        $('.summernote').eq(0).summernote('code', $scope.EmailContent);
                        $('.summernote').eq(1).summernote('code', $scope.EmailContent);



                        // display employee name in autocomplete text box
                        var sel = {
                            Id: data.Employee_Id,
                            FullName: data.FullName,
                            FullNamelist: data.FullNamelist
                        };
                        $scope.DisplayFullName = sel;

                        $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);

                        $('#summernote').eq(1).summernote('disable');
                        $scope.CategoryInactiveFlag = 0;
                        if (($ff($scope.CategoryNameList, { Id: $scope.CategoryName, CategoryName: $scope.ViewCategoryName, Active: 0 }).length) == 1) {
                            $scope.CategoryInactiveFlag = 1;
                        }
                        //  $scope.Textareacount();
                        $scope.Categorytagslist();
                    }).error(function (data) {
                        $scope.error = "An error has occcurred while viewing Communication details!" + data;
                    });

                };


      /* 
      Calling the api method to detele the details of the communication 
      for the  communication Id,
      and redirected to the list page.
      */
                $scope.DeleteCommunicationDetails = function () {
                    var del = confirm("Do you like to inactivate the selected communication details?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/Communication/CommunicationDetail_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected communication details has been inactivated successfully");
                            $scope.ListCommunicationPopUP($scope.Id = 0);
                            //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Communication Details" + data;
                        });
                    };
                }


        /* 
        Calling the api method to inactived the details of the communication 
        for the  communication Id,
        and redirected to the list page.
        */
                $scope.ReInsertCommunicationDetails = function () {
                    var Ins = confirm("Do you like to activate the selected communication details?");
                    if (Ins == true) {

                        $http.get(baseUrl + 'api/Communication/CommunicationDetail_ReInsert/?Id=' + $scope.Id).success(function (data) {

                            alert("Selected communication details has been activated successfully");
                            $scope.ListCommunicationPopUP($scope.Id = 0);
                            //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Communication Details" + data;
                        });
                    };
                }


           /* 
           Calling the api method to list the employee details.
           */
                    $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.Employeelist = function () {
                    // $scope.autocompleteclear();
                    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        // $scope.NameList = [];
                        // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                        });
                    }
                }

          /* 
          Calling the api method to View the employee details.
          */            //$scope.EmployeeAttendancelist();
                $scope.EmployeeNameList = function () {
                    var EmployeeNo = '';
                    if ($scope.Branch_Selected != undefined) {
                        $scope.EmployeeNo = $scope.Branch_Selected.originalObject.Id;

                        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                            $scope.Employee_No = data.Employee_No;

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    };
                };

                $scope.clear = function()
                {               
                  $scope.CategoryNametagsList = [];               
               
                }
             /*
            Clear the scope variable values.
            */
                $scope.ClearCommunicationPopup = function () {
                    $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                    $scope.CategoryName = "0";
                    $scope.CommunicationDate = "";
                    $scope.Employee_No = "";
                    $scope.Employee_Name = "";
                    $scope.EmailSubject = "";
                    $scope.EmailContent = "";
                    $scope.EmailAttachment = "";
                    $scope.AttachmentFileName = "";
                    $scope.FileFullpath = "";
                    $scope.SMS = "";
                    $scope.uploadme = "";
                    $scope.CategoryInactiveFlag = 0;
                    $scope.CategoryNametagsList = "";
                  //  $scope.Remaining = "";
                    $('.summernote').eq(0).summernote('code', $scope.EmailContent);
                    $('.summernote').eq(1).summernote('code', $scope.EmailContent);
                };

                /* Read file name for the  Photo and file */
                $scope.dataURItoBlob = function (dataURI) {
                    var binary = atob(dataURI.split(',')[1]);
                    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                    var array = [];
                    for (var i = 0; i < binary.length; i++) {
                        array.push(binary.charCodeAt(i));
                    }
                    return new Blob([new Uint8Array(array)], {
                        type: mimeString
                    });
                }

                $scope.imageChange = function () {
                    if ($('#documentfile')[0].files[0] != undefined) {
                        $scope.AttachmentFileName = $('#documentfile')[0].files[0]['name'];
                    }
                }

                $scope.loading = false;
         /*
         Call the api method for insert and Update the record for a communication
         and display the record of selected communication when Id is greater than 0
         in edit.html and provide an option for create and modify the communication and save the communication record
         */
                $scope.CommunicationDetailsAddEdit = function () {
               
                    if ($scope.Validationcontrols() == true) {
                        if ($scope.Branch_Selected != undefined) {
                            $scope.EmployeeId = $scope.Branch_Selected.originalObject.Id;
                        }
                        else {
                            $scope.EmployeeId = null;
                        }

                        var filename = "";
                        var fd = new FormData();
                        var imgBlob;

                        var imgBlobfile;
                        var itemIndexdoc = -1;

                        var fd = new FormData();
                        if ($('#documentfile')[0].files[0] != undefined) {
                            filename = $('#documentfile')[0].files[0]['name'];
                            imgBlob = $scope.dataURItoBlob($scope.uploadme);
                            itemIndexdoc = 0;
                        }
                        if (itemIndexdoc != -1) {
                            fd.append('file', imgBlob);
                        }
                        $http.post(baseUrl + 'api/Common/AttachFile',
                        fd,
                        {
                            transformRequest: angular.identity,
                            headers: {
                                'Content-Type': undefined
                            }
                        }
                        )
                        .success(function (response) {
                            if ($scope.AttachmentFileName == "") {
                                $scope.Image = "";
                            }
                            else if (itemIndexdoc > -1) {
                                if ($scope.AttachmentFileName != "" && response[itemIndexdoc] != "") {
                                    $scope.EmailAttachment = response[itemIndexdoc];
                                }
                            }

                            var obj = {
                                Id: $scope.Id,
                                CategoryName: $scope.CategoryName,
                              //  CommunicationDate: $scope.CommunicationDate,
                                Employee_Id: $scope.EmployeeId == 0 ? null : $scope.EmployeeId,
                                EmailContent: $scope.EmailContent,
                                EmailSubject: $scope.EmailSubject,
                                EmailAttachment: $scope.EmailAttachment == 0 ? null : $scope.EmailAttachment,
                                AttachmentFileName: $scope.AttachmentFileName == 0 ? null : $scope.AttachmentFileName,
                                FileFullpath: $scope.FileFullpath == 0 ? null : $scope.FileFullpath,
                                SMS: $scope.SMS
                            };
                        
                  
                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            },3000); // 5 second

                            $http.post(baseUrl + '/api/Communication/CommunicationDetail_AddEdit/', obj).success(function (data) {
                                $scope.AddId = data;
                                var AddId = data;
                                $scope.ListCommunicationPopUP(AddId);
                                angular.element('#CMModal').modal('hide');
                                $scope.ClearCommunicationPopup();

                                $scope.loading = false;
                                $rootScope.$broadcast('hide');

                                //if ($scope.EmployeeId == AddId.Employee_Id)
                                //{
                                //    return true;
                                //}
                                //else {
                                //    alert("not a valid employee");
                                //    return false;
                                //}
                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding Communication details!" + data.ExceptionMessage;
                            }).error(function (response) {
                                $scope.EmailAttachment = "";
                            });
                        });
                        $("#documentfile").val('');
                    }
                };

                /* Clear images function */
                $scope.imageclear = function () {

                    $scope.EmailAttachment = "";
                    FileFullpath = "";
                    $scope.uploadme = "";
                    $scope.AttachmentFileName = "";
                    $('#documentfile').val('');

                };

                $scope.imageclear();
                /* Inactive records edit function */
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }


                //$scope.EmployeeId = 0;
                //$scope.emptydatas = [];
                //$scope.rowCollections = [];
                ///* THIS IS FOR EMPLOYEE POPUP FUNCTION */
                //$scope.EmployeeDetailsPopup = function () {
                //    if ($scope.rowCollections != undefined) {  // to avoid going to DB each time when Employee Search clicked
                //        $scope.rowCollections = [];
                //        $http.get(baseUrl + '/api/Common/EmployeeList/?Id=0' + '&Company_Name=0').success(function (data) {
                //            $scope.rowCollections = [];
                //            $scope.emptydatas = [];
                //            $scope.rowCollections = data;
                //            if ($scope.rowCollections.length > 0) {
                //                $scope.flags = 1;
                //            }
                //            else {
                //                $scope.flags = 0;
                //            }
                //        }).error(function (data) {
                //            $scope.error = "AN error has occured while getting Employee List!" + data;
                //        });
                //    }
                //};

                ///*THIS IS FOR EMPLOYEE POP UP SELECTION FUNCTION*/
                //$scope.EmployeeSelection = function (Id, Employee_No, FullName, Department_Name, DesignationName) {
                //    $scope.Employee_No = Employee_No;
                //    $scope.Employee_Id = Id;
                //    $scope.Employee_Name = FullName;
                //    $scope.Department_Name = Department_Name;
                //    $scope.DesignationName = DesignationName;
                //    angular.element('#EmployeeModel').modal('hide');
                //};


                /*THIS IS FOR EMAIL AND SMS TYPE FUNCITON */
                $scope.Type = function () {
                    if ($scope.EmailContent != null && $scope.SMS != null) {
                        $scope.Typeview = "Both";
                    }
                    else if ($scope.SMS != null) {
                        $scope.Typeview = "SMS";
                    }
                    else {
                        $scope.Typeview = "Email";
                    }
                }


                // Declaration and initialization of Scope Variables.
                $scope.Category_Name = "0";
                $scope.Period_To = "";
                $scope.Period_From = "";



                //$scope.loadData = function () {
                //    $scope.students = [];
                //    $http.get(baseUrl + 'api/Communication/CommunicationDetailList/?Id=' + $scope.Id + '&Category_Id=' + $scope.Category_Name + '&Period_From=' + $scope.Period_From + '&Period_To=' + $scope.Period_To + '&Typeview=' + $scope.Typeview).success(function (data) {
                //        $scope.emptydata = []; {
                //            $scope.rowCollection = data;
                //        };
                //    })
                //};
                

         /*
         Calling the api method to list the communication details for the  filters 
         category name, period from, period to,status and
         showing the result in table.
         */
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.flag = 0;
                $scope.CommunicationList = function () {
                    $scope.Type();

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    },3000); // 3 second

                    $http.get(baseUrl + 'api/Communication/CommunicationDetailList/?Id=' + $scope.Id + '&Category_Id=' + $scope.Category_Name + '&Period_From=' + $scope.Period_From + '&Period_To=' + $scope.Period_To + '&Typeview=' + $scope.Typeview).success(function (data) {
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                 
                        if ($scope.TypeOfContent == 1) {
                            $scope.rowCollection = $filter('filter')(data, function (item) {
                                return item.EmailSubject !== '' && item.SMS == '';
                            });
                        }
                  
                        else if ($scope.TypeOfContent == 2) {
                            $scope.rowCollection = $filter('filter')(data, function (item) {
                                return item.EmailSubject == '' && item.SMS !== '';
                            });
                        }
                        else if ($scope.TypeOfContent == 3) {
                            $scope.rowCollection = $filter('filter')(data, function (item) {
                                return item.EmailSubject != '' && item.SMS != '';
                            });
                        }
                        else {
                            $scope.rowCollection = data;
                        }


                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };

                /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
                $scope.CommunicationListGo = function () {
                    if ($scope.ListValidation() == true) {
                        $scope.Id = 0;
                        $scope.Mode = 1;
                        $scope.ListCommunicationPopUP($scope.Id, $scope.Mode);
                    }
                };

                /*THIS IS FOR REDIRECT VIEW PAGE */
                $scope.ViewRedirect = function () {
                    $location.path("/CommunicationCreate/" + $scope.Id);
                };

                /*THIS IS FOR REDIRECT LIST PAGE */
                $scope.ListRedirect = function () {
                    $location.path("/CommunicationList/" + $scope.Id);
                };

             /*
            Close the pop up window for the view pop up on click cancel button 
            */
                $scope.CancelView = function () {
                    angular.element('#CMViewModal').modal('hide');
                    $scope.ClearCommunicationPopup();
                }
             /*
            Close the pop up window for the view pop up on click cancel button 
            */
                $scope.CancelPopup = function () {
                    angular.element('#CMModal').modal('hide');
                    $scope.ClearCommunicationPopup();
                    if ($scope.Id > 0) {
                        angular.element('#CMModal').modal('hide');
                        $scope.ClearCommunicationPopup();
                        //  $scope.CommunicationListGo();
                    }
                }
            }
    ]);

    /* THIS IS FOR LOGIN CONTROLLER FUNCTION */
    EmpControllers.controller("LoginController", ['$scope', '$http', '$routeParams', '$location', '$rootScope', '$window', '$filter', '$rootScope', '$timeout', 'rememberMe', 
    function ($scope, $http, $routeParams, $location, $rootScope, $window, $filter, $rootScope, $timeout, $rememberMeService) {

        //$rememberMeService('dXNlcm5hbWU=', '');
        //$rememberMeService('cGFzc3dvcmQ=', '');

        $scope.Username=($rememberMeService('dXNlcm5hbWVocm1z'));
        $scope.Password=($rememberMeService('cGFzc3dvcmRocm1z'));
        $scope.remember=($rememberMeService('cmVtZW1iZXJocm1z'));
    
        //$rememberMeService('dXNlcm5hbWU=', '');
        //$rememberMeService('cGFzc3dvcmQ=', '');
 
        /*
      Calling the api method to view the details of the password policy
      for the password policy Id 
      and display the details in the view pop up window.
      */

        $scope.passwordpolicy = function () {

            $scope.Id = "0";
            // if ($routeParams.Id != undefined) {
            //  $scope.Id = $routeParams.Id;
            $http.get(baseUrl + 'api/PasswordPolicy/ViewEditPasswordPolicy/?Id=' + $scope.Id).success(function (data) {
                $scope.Id = data.Id;
                $scope.MinLength = data.MinLength;
                $scope.MaxLength = data.MaxLength;
                $scope.MinOneNumChar = data.MinOneNumChar;
                $scope.MinOneSpecChar = data.MinOneSpecChar;
                $scope.WithoutChar = data.WithoutChar;
                $scope.AllowUserName = data.AllowUserName;
                $scope.AtleastOneUpperCase = data.AtleastOneUpperCase;
                $scope.MinLoginMins = data.MinLoginMins;

            });
        };

        $scope.passwordpolicy();

        /* Validating the create page mandatory fields
        checking mandatory for the follwing fields
        NewPasssword,ReenterPassword
        and showing alert message when it is null.
        */
        $scope.Validationresetcontrols = function () {
          $scope.passwordpolicy();
        
            if (typeof ($scope.Autolist) == "undefined" || $scope.Employee_Selected == undefined || $scope.Autolist =="") {
                alert("Please enter Employee");
                return false;
            }  
        
            else if (typeof ($scope.NewPassword) == "undefined" || $scope.NewPassword == '') {
                alert("Please enter New password");
                return false;
            }          
        
            else if (typeof ($scope.ReenterPassword) == "undefined" || $scope.ReenterPassword == '') {
                alert("Please enter Re-enter password");
                return false;
            }
      
            else if (($scope.NewPassword) != ($scope.ReenterPassword)) {
                alert("New password and Re-enter Password mismatch please enter same password");
                return false;
            }
            else if (parseInt(('' + $scope.NewPassword).length) < parseInt($scope.MinLength)) {
                alert("Your Name Should Contain Minimum Length is " + $scope.MinLength);
                return false;
            }

            else if (parseInt(('' + $scope.NewPassword).length) > parseInt($scope.MaxLength)) {
                alert("Sorry You are Exceeding the Limit is " + $scope.MaxLength);
                return false;
            }

            $scope.flag = 0;
            $scope.flagchar = 0;

            var newpass = ('' + $scope.NewPassword).length;

            /* Validation for new password have a special character password */
            if (($scope.MinOneSpecChar != null)) {

                var newpasschar = ('' + $scope.NewPassword).length;
                var format = /^[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]*$/;

                while (newpasschar--) {

                    var y = $scope.NewPassword.substring(newpasschar, newpasschar + 1);

                    if (y.match(format)) {

                        $scope.flagchar += 1;
                    }
                }

                if ($scope.flagchar <= 0) {
                    alert("Please enter atleast one special character ");
                    return false;
                }
                // return false;

            }


            $scope.flagspl = 0;
            $scope.flagchars = 0;

            /* Validation for new password have not a special character and number in password */

            if (($scope.WithoutChar != null)) {

                var newpasssplchar = ('' + $scope.NewPassword).length;
                while (newpasssplchar--) {
                    var z = $scope.NewPassword.substring(newpasssplchar, newpasssplchar + 1);

                    var leng = ('' + $scope.WithoutChar).length;
                    while (leng--) {
                        var a = $scope.WithoutChar.substring(leng, leng + 1);

                        if (angular.equals(z, a)) {
                            //if (z.valueOf() == a.valueOf()) {
                            //if (typeof(z) == typeof(a)) {                       
                            //$scope.flagspl += 1;
                            alert($scope.WithoutChar + "  characters not allowed, please check");
                            return false;
                        }

                    }

                }
            }


            /* Validation for new password have a number password */
            if (($scope.MinOneNumChar != null)) {

                while (newpass--) {

                    var x = $scope.NewPassword.substring(newpass, newpass + 1);
                    if (!isNaN(x)) {

                        $scope.flag += 1;
                    }

                }
                if ($scope.flag <= 0) {
                    alert("Please enter atleast one number ");
                    return false;
                }

            }



            /* Allow the user name same as password*/
            $scope.flagAllow = 0;
            if (($scope.AllowUserName == null)) {
                $scope.username = $window.localStorage['Username'];
                var user = $scope.username;
                var pwd = $scope.NewPassword

                if (user == pwd) {
                    alert("Username and password is same, please check the password");
                    return false;
                }

            }




            $scope.flagUpper = 0;
            $scope.flagcharUpper = 0;

            var newpass = ('' + $scope.NewPassword).length;

            /* Validation for new password have a special character password */
            if (($scope.AtleastOneUpperCase != null)) {

                var newpassupperchar = ('' + $scope.NewPassword).length;
                var format = /[A-Z]/;

                while (newpassupperchar--) {

                    var y = $scope.NewPassword.substring(newpassupperchar, newpassupperchar + 1);

                    if (y.match(format)) {

                        $scope.flagcharUpper += 1;
                    }
                }

                if ($scope.flagcharUpper <= 0) {
                    alert("Please enter atleast one uppercase letter ");
                    return false;
                }
                // return false;

            }


            return true;
        };

        /* Validating the create page mandatory fields
       checking mandatory for the follwing fields based on password policy
       NewPasssword,confirmpassword,minimum length,maximum length,minimum special characters,minimum characters,allow the username
       and showing alert message when it is null.
       */
        $scope.Changepasswordvalidation = function () {


            return true;
        };

        $scope.Validationcontrolspassword = function () {

            $scope.passwordpolicy();
            if (typeof ($scope.OldPassword) == "undefined" || $scope.OldPassword == '') {
                alert("Please enter Password");
                return false;
            }

            if (typeof ($scope.NewPassword) == "undefined" || $scope.NewPassword == '') {
                alert("Please enter New password");
                return false;
            }
            else if (typeof ($scope.confirmpassword) == "undefined" || $scope.confirmpassword == '') {
                alert("Please enter Confirm password");
                return false;
            }

            else if (($scope.confirmpassword) != ($scope.NewPassword)) {
                alert("New password and Confirm Password mismatch Please enter same password");
                return false;
            }
            else if (parseInt(('' + $scope.NewPassword).length) < parseInt($scope.MinLength)) {
                alert("Your Name Should Contain Minimum Length is " + $scope.MinLength);
                return false;
            }

            else if (parseInt(('' + $scope.NewPassword).length) > parseInt($scope.MaxLength)) {
                alert("Sorry You are Exceeding the Limit is " + $scope.MaxLength);
                return false;
            }



            $scope.flag = 0;
            $scope.flagchar = 0;

            var newpass = ('' + $scope.NewPassword).length;

            /* Validation for new password have a special character password */
            if (($scope.MinOneSpecChar != null)) {

                var newpasschar = ('' + $scope.NewPassword).length;
                var format = /^[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]*$/;

                while (newpasschar--) {

                    var y = $scope.NewPassword.substring(newpasschar, newpasschar + 1);

                    if (y.match(format)) {

                        $scope.flagchar += 1;
                    }
                }

                if ($scope.flagchar <= 0) {
                    alert("Please enter atleast one special character ");
                    return false;
                }
                // return false;

            }


            $scope.flagspl = 0;
            $scope.flagchars = 0;

            /* Validation for new password have not a special character and number in password */

            if (($scope.WithoutChar != null)) {

                var newpasssplchar = ('' + $scope.NewPassword).length;
                while (newpasssplchar--) {
                    var z = $scope.NewPassword.substring(newpasssplchar, newpasssplchar + 1);

                    var leng = ('' + $scope.WithoutChar).length;
                    while (leng--) {
                        var a = $scope.WithoutChar.substring(leng, leng + 1);

                        if (angular.equals(z, a)) {
                            //if (z.valueOf() == a.valueOf()) {
                            //if (typeof(z) == typeof(a)) {                       
                            //$scope.flagspl += 1;
                            alert($scope.WithoutChar + "  characters not allowed, please check");
                            return false;
                        }

                    }

                }
            }


            /* Validation for new password have a number password */
            if (($scope.MinOneNumChar != null)) {

                while (newpass--) {

                    var x = $scope.NewPassword.substring(newpass, newpass + 1);
                    if (!isNaN(x)) {

                        $scope.flag += 1;
                    }

                }
                if ($scope.flag <= 0) {
                    alert("Please enter atleast one number ");
                    return false;
                }

            }



            /* Allow the user name same as password*/
            $scope.flagAllow = 0;
            if (($scope.AllowUserName == null)) {
                $scope.username = $window.localStorage['Username'];
                var user = $scope.username;
                var pwd = $scope.NewPassword

                if (user == pwd) {
                    alert("Username and password is same, please check the password");
                    return false;
                }

            }




            $scope.flagUpper = 0;
            $scope.flagcharUpper = 0;

            var newpass = ('' + $scope.NewPassword).length;

            /* Validation for new password have a special character password */
            if (($scope.AtleastOneUpperCase != null)) {

                var newpassupperchar = ('' + $scope.NewPassword).length;
                var format = /[A-Z]/;

                while (newpassupperchar--) {

                    var y = $scope.NewPassword.substring(newpassupperchar, newpassupperchar + 1);

                    if (y.match(format)) {

                        $scope.flagcharUpper += 1;
                    }
                }

                if ($scope.flagcharUpper <= 0) {
                    alert("Please enter atleast one uppercase letter ");
                    return false;
                }
                // return false;

            }


            return true;
        }



        /* 
       Calling api method for the dropdown list in the html page for the fields 
      Accounttype
       */
        //$http.get(baseUrl + 'api/Login/GetAccountTypeList/', config).success(function (data) {
        //    $scope.AccountTypeList = data;
        //});

        $scope.DuplicateId = 0;

        /* Validating the create page mandatory fields
          checking mandatory for the follwing fields
          Username,Password
          and showing alert message when it is null.
          */
        $scope.Validationcontrols = function () {
            $scope.errorlist = null;
            if (typeof ($scope.Username) == "undefined" || $scope.Username == "") {
                $scope.errorlist = "Please enter Username";
                return false;
            }
            else if (typeof ($scope.Password) == "undefined" || $scope.Password == "") {
                $scope.errorlist = "Please enter Password";
                return false;
            }

            return true;

        };

        $scope.Validationchangepasscontrols = function () {
       
            if (typeof ($scope.Password) != ($scope.OldPassword == "")) {
                $scope.errorlist = "Not a valid password";
                return false;
            }
            return true;
        };


        $scope.loading = false;

        /*
        Call the api method for insert and Update the record for a employee login
        and display the record of selected employee login when Id is greater than 0
        in edit.html and provide an option for create and modify the employee login and save the employee login record
        */
        $scope.EmployeeLogin_AddEdit = function () {


            $scope.errorlist = null;


            // check the DB connection validity
            // return True if Valid DB Connection
            // return False if Invalid DB Connection
            $http.get(baseUrl + '/api/Login/CheckDBConnection/').success(function (data) {
                if (data == false) {
                    $scope.errorlist = "Invalid DB Connection";
                    return;
                }
            });

        

           if($scope.Validationcontrols() == true)
            {
                $scope.EmployeeId = $window.localStorage['UserId'];
                var obj = {
                    Id: $scope.Id,
                    UserName: $scope.Username,
                    Password: $scope.Password
                };

                $scope.Id = 0;

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 second

                $http.get(baseUrl + '/api/Login/Employeelogin_AddEdit/?Id=' + $scope.Id + '&UserName=' + $scope.Username + '&Password=' + $scope.Password).success(function (data) {
              

                    $scope.EmployeeId = data.EmployeeId;
                            

                    var Balance = data.Balance;
                    var data = data.data;        
               
              
            
                    if (data == 1) {
                        $scope.errorlist = null;
                    
                        if ($scope.remember == true) {                      
                            $rememberMeService('dXNlcm5hbWVocm1z', ($scope.Username));
                            $rememberMeService('cGFzc3dvcmRocm1z', ($scope.Password));
                            $rememberMeService('cmVtZW1iZXJocm1z',($scope.remember));
                      
                        } else {
                            $rememberMeService('dXNlcm5hbWVocm1z', '');
                            $rememberMeService('cGFzc3dvcmRocm1z', '');
                            $rememberMeService('cmVtZW1iZXJocm1z','');
                        }

                        // alert("Login As " + $scope.Username);
                        $window.localStorage['Username'] = $scope.Username;
                        $window.localStorage['UserId'] = $scope.EmployeeId;                  


                        window.location.href = baseUrl + "/Home/Index#/home";

                    }
                    else if (data == 2) {
                        // alert("Please Login After" + " " + Balance + " " + "minutes!")
                        $scope.errorlist = "Please Login After" + " " + Balance + " " + "minutes!";

                    }
            
                    else if (data == 4) {
                        // alert("Your Login Date is Expired!")
                        $scope.errorlist = "Your Login Date is Expired!";
                    }
                    else if (data == 5) {
                        // alert("Your Login Date is Expired!")
                        $scope.errorlist = "Inactive user cannot login";
                    }
                    else if (data == 7) {
                        // alert("Your Login Date is Expired!")
                      // $scope.errorlist = "Please change the passwords";
                        //$window.localStorage['Username'] = $scope.Username;
                        //$window.localStorage['UserId'] = $scope.changepasswordId;
                        // alert("Login As " + $scope.Username);
                        $window.localStorage['Username'] = $scope.Username;
                        $window.localStorage['UserId'] = $scope.EmployeeId;


                        window.location.href = baseUrl + "/Home/LoginIndex#/changepassword";
                    
                    }
                    else {
                        //  alert("Login Failed");
                        $scope.errorlist = "Login Failed \n Please check username and password ";
                    }

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "An error has occurred while Login this ID!" + data.ExceptionMessage;
                });
            }
        };
    

        $scope.PasswordList = [];

        /* Clear the reset password */
        $scope.resetpass = function () {

            $scope.NewPassword = "";
            $scope.OldPassword = "";
            $scope.confirmpassword = "";

        };

        $scope.Id = 0;
        $scope.DuplicatedId = 0; 
        //  $scope.ModifiedUser_Id = 1;

        $scope.NewPassword ="";
        $scope.OldPassword="";
       // $scope.ReenterPassword ="";
        $scope.ReenterPassword =0;
        $scope.confirmpassword ="";
        $scope.ModifiedUser_Id ="";
        $scope.ModifiedUser_Id =0;

         $scope.changepasswordlist = function () {

            //if ($scope.NewPassword == null) {

            //    alert("Please enter password");
            //}
            //else {

            if ($scope.Changepasswordvalidation() == true) {
                if ($scope.Validationcontrolspassword() == true) {
                    //  if ($scope.Validationchangepasscontrols() == true) {


                    var obj = {
                        Id: $scope.Id,
                        NewPassword: $scope.NewPassword,
                        OldPassword: $scope.OldPassword,
                        NewPassword: $scope.confirmpassword,
                        ModifiedUser_Id: $scope.ModifiedUser_Id
                    }
                     // console.log(obj);
                    //  if ($scope.OldPassword == "Admin")
                    //  {
                    //   alert("Admin password cannot be canged");
                    //   return false;
                    //}
                    //else if ($scope.OldPassword != "Admin") {

                

                    $scope.changepasswordId = $window.localStorage['UserId'];


                    //if ($scope.changepasswordId==-1)
                    //{
                    //    alert("Not a valid password");
                    //    return false;
                    //}
                    //else {


                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 second              
              

                    //console.log($scope.OldPassword);
                        $http.get(baseUrl + 'api/Login/ChangePassword/?Id=' + $scope.changepasswordId + '&NewPasssword=' + $scope.NewPassword + '&OldPassword=' + $scope.OldPassword + '&confirmpassword=' + $scope.confirmpassword + '&ModifiedUser_Id=' + $scope.ModifiedUser_Id).success(function (data1) {

                            if (data1 > 0) {
                                alert("Password changed successfully");
                                window.location.href = baseUrl + "/Home/Index#/home";

                            }

                            else {
                                alert("Not a valid password");
                            }


                        $scope.resetpass();

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                   
                    }).error(function (data) {

                        $scope.error = "Problem in checking login name duplicate!" + data.ExceptionMessage;
                    });
                }
                //  }
            }
            //}
        };

        // $scope.NewPasssword =0;
        /*
        Call the api method for insert and Update the record for a change password
        and display the record of selected change password when Id is greater than 0
        in edit.html and provide an option for create and modify the change password and save the change password record
        */
        $scope.changepassword = function () {

            //if ($scope.NewPassword == null) {

            //    alert("Please enter password");
            //}
            //else {

            if ($scope.Changepasswordvalidation() == true) {
                if ($scope.Validationcontrolspassword() == true) {
                    //  if ($scope.Validationchangepasscontrols() == true) {


                    var obj = {
                        Id: $scope.Id,
                        NewPassword: $scope.NewPassword,
                        OldPassword: $scope.OldPassword,
                        NewPassword: $scope.confirmpassword,
                        ModifiedUser_Id: $scope.ModifiedUser_Id
                    }
              
                    //  if ($scope.OldPassword == "Admin")
                    //  {
                    //   alert("Admin password cannot be canged");
                    //   return false;
                    //}
                    //else if ($scope.OldPassword != "Admin") {

                

                    $scope.changepasswordId = $window.localStorage['UserId'];                

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 second              
              
                   
                    $http.get(baseUrl + 'api/Login/ChangePassword/?Id=' + $scope.changepasswordId + '&NewPasssword=' + $scope.NewPassword + '&OldPassword=' + $scope.OldPassword + '&Confirmpassword=' + $scope.confirmpassword + '&ModifiedUser_Id=' + $scope.ModifiedUser_Id).success(function (data) {
                                                                 
                            if (data > 0) {
                                alert("Password changed successfully");

                            }

                            else {
                                alert("Not a valid password");
                            }


                        $scope.resetpass();

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                   
                    }).error(function (data) {

                        $scope.error = "Problem in checking login name duplicate!" + data.ExceptionMessage;
                    });
                }
                //  }
            }
            //}
        };


        $scope.Autolist = [];
        $scope.Autofilterlist = [];
        $http.get(baseUrl + 'api/Login/EmployeeName_Resetpwd/').success(function (data) {
            $scope.Autofilterlist = data;
            $scope.Autolist = data;
           // $scope.EmpNameList = data;
        });


    
        /*
         Call the api method for insert and Update the record for a reset password
         and display the record of selected reset password when Id is greater than 0
         in edit.html and provide an option for create and modify the reset password and save the reset password record
         */
        $scope.resetpassword = function () {
          // $scope.Employees_Id ='';

            if ($scope.Validationresetcontrols() == true)
            {   
                if ($scope.Employee_Selected != undefined) {
                    $scope.Employees_Id = $scope.Employee_Selected.originalObject.Id;
         
                   {
                        var obj = {
                            Id: $scope.Employees_Id,
                            Password: $scope.NewPassword,
                            Password: $scope.ReenterPassword,
                            //  FullName: $scope.FullName

                        }

                        $scope.ResetpasswordId = $window.localStorage['UserId'];
                        //if ($scope.ResetpasswordId == -1) {
                        //    alert("Not a valid password");
                        //    return false;
                        //}
                        //else {

                        $scope.loading = true;
                        $timeout(function () {
                            if ($scope.loading == true) {
                                $rootScope.$broadcast('show');
                            }
                        }, 3000); // 3 second                   
                
                       $http.get(baseUrl + 'api/Login/ResetPassword/?Id=' + $scope.Employees_Id + '&NewPassword=' + $scope.NewPassword + '&ReenterPassword=' + $scope.ReenterPassword).success(function (data) {
                                                   
                            if (data >0) {
                                alert('Reset Password successfully  ');
                            }
                            else {
                                alert("Not a valid password");
                            }
                            $scope.resetclear();

                            $scope.loading = false;
                            $rootScope.$broadcast('hide');

                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Employeedetails" + data;
                        });
                   // }
               }
            }
            //  }
          }
        };


        $scope.Buildnumber = function()
        {
             $http.get(baseUrl + 'api/Login/BuildVersion_Details/').success(function (data) {
                 $scope.BuildVersion = data;

                 angular.forEach($scope.BuildVersion, function (value, index) {
                     $scope.Versionnumber = value.BuildNo;
                    // console.log($scope.Versionnumber);
                 });
           
            });
        };
        $scope.Buildnumber();

        /* Clear the reset password */
        $scope.resetclear = function () {
            $scope.NewPassword = "";
            $scope.ReenterPassword = "";
            $scope.Password = "";
            $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
        };

        $scope.EmployeeId = $window.localStorage['UserId'];
        $scope.Period = new Date();


        /*
      Calling the api method to list the company details for the  filters  
      EmployeeId,Period From,Period To
      showing the result in table.
      */
        $scope.CompanyupdatesListSearch1 = function () {
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $http.get(baseUrl + '/api/CompanyUpdates/CompanyUpdatesList/?EmployeeId=' + $scope.EmployeeId + '&Period=' + $filter('date')($scope.Period, "yyyy-MMM-dd")).success(function (data) {
                $scope.Companyupdates = [];
                $scope.rowCollection = [];
                $scope.Companyupdates = data;
                $scope.rowCollection = data;

                var newarr = [];
                var unique = {};
                angular.forEach($scope.rowCollection, function (item) {
                    if (!unique[item.age]) {
                        newarr.push(item);
                        unique[item.LabelName] = item;
                    }
                });
                $scope.rowCollection = unique;

            }).error(function (data) {
                $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
            })

        };

    }
    ]);

    /* THIS IS FOR LOGIN CONTROLLER FUNCTION */
    EmpControllers.controller("HomeController", ['$scope', '$http', '$routeParams', '$location', '$rootScope', '$window', '$filter',
    function ($scope, $http, $routeParams, $location, $rootScope, $window, $filter) {
        //https://github.com/ninjatronic/angular-base64
        //http://stackoverflow.com/questions/15598917/adding-a-custom-header-to-http-request-using-angular-js
        var config = {
            headers: {
                'Authorization': 'Basic d2VudHdvcnRobWFuOkNoYW5nZV9tZQ==',
                'Accept': 'application/json',
                "X-Login-Ajax-call": 'true'
            }
        };
      


        var flag = 0;
        $scope.Username = $window.localStorage['Username'];
        $scope.Id = $window.localStorage['UserId'];

        $scope.RoleMapping_Validation = function () {

            $http.get(baseUrl + '/api/Login/Rolemapping_validation/?Id=' + $scope.Id + '&UserName=' + $scope.Username).success(function (data) {
           
              //  console.log(data);
                var datareturn = data.returnval;
         
                if (datareturn == 1)
                {
                    $scope.errorlist = "No roles assigned for this employee";
              
                    return false;
                }
                else
                {
                    $scope.CompanyupdatesListSearch();
                }
                return true;
            });
        };
       

        $scope.EmployeeId = $window.localStorage['UserId'];
        $scope.Period = new Date();
        //This is function for List page 
        $scope.CompanyupdatesListSearch = function () {         
       


            $scope.emptydata = [];
            $scope.rowCollection = [];
            $http.get(baseUrl + '/api/CompanyUpdates/CompanyUpdatesList/?EmployeeId=' + $scope.EmployeeId + '&Period=' + $filter('date')($scope.Period, "yyyy-MMM-dd")).success(function (data) {
                $scope.Companyupdates = [];
                $scope.rowCollection = [];
                $scope.Companyupdates = data;
                $scope.rowCollection = data;

                var newarr = [];
                var unique = {};
                angular.forEach($scope.rowCollection, function (item) {
                    if (!unique[item.LabelName]) {
                        newarr.push(item);
                        unique[item.LabelName] = item.LabelName;
                    }
                });
                $scope.rowCollection = newarr;
                //   console.log(unique);
            }).error(function (data) {
                $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
            })

        };

    }
    ]);

    //This is for Employee Skills List Request controller functions//
    EmpControllers.controller("SkillsListController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
        function ($scope, $http, $routeParams, $location, $filter,$window) {

            /*Values Initialization*/
            $scope.Id = 0;
            $scope.CategoryId = "0";
            $scope.Category = "0";
            $scope.CategoryName = "0";
            $scope.SkillName = '';
            //This is function for Pagination 
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            //This is for Leave Type list
            $scope.SkillCategoryList = [];
            $http.get(baseUrl + 'api/Common/GetSkillCategoryList/').success(function (data) {
                $scope.SkillCategoryList = data;
            });
            //This is for Validation
            $scope.Validationcontrols = function () {
                if (typeof ($scope.Category) == "undefined" || $scope.Category == 0) {
                    alert("Please select Category");
                    return Category;
                }
                else if (typeof ($scope.Skill) == "undefined" || $scope.Skill == "") {
                    alert("Please Enter Skill");
                    return Skill;
                }
            };


           // console.log($scope.Username);

            $scope.checkboxlist = {
                value1: true,
                value2: 'YES'
            };


            //This is function for List page 
            $scope.SkillListSearch = function () {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $http.get(baseUrl + '/api/SkillsList/Skill_List/?Id=' + $scope.Id + '&Skill=' + $scope.SkillName + '&CategoryId=' + $scope.CategoryName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                })

            };

            //This is function for List page 
            $scope.SkillListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.ListSkillsListPopUP(ListId);
            };



            //This is for clear the contents in the popup
            $scope.ClearSkillsListPopup = function () {
                $scope.Category = "0";
                $scope.Skill = "";
                $scope.Description = "";
                $scope.IsAttribute = 0;
                $scope.SkillName = '';
            };

            //This is function for View & Edit POP UP
            $scope.AddSkillsListPopUP = function (CatId) {
                $scope.Id = CatId;
              //  $scope.ViewSkillsList();
                angular.element('#SkillsListCreateModal').modal('show');
            };
            $scope.ViewSkillsListPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewSkillsList();
                angular.element('#SkillsListViewModal').modal('show');
            };
            $scope.EditSkillsListPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewSkillsList();
                angular.element('#SkillsListCreateModal').modal('show');
            };

            $scope.ListSkillsListPopUP = function (PFESIId) {
                $scope.Id = PFESIId;
                $scope.SkillListSearch();
            };


            //This is function for View page 
            $scope.ViewSkillsList = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/SkillsList/GetSkillsList_ById/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.Category = data.CategoryId.toString();
                    $scope.ViewCategory = data.Category;
                    $scope.Skill = data.Skill;
                    $scope.Description = data.Description;
                    $scope.IsAttribute = data.IsAttribute;
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing IT Declaration Lock Period Details!" + data;
                });
            };

            //$scope.list = function () {
            //    if ($scope.IsAttribute == 1) {
            //        ($scope.IsAttribute == true)
            //    }
            //    else if ($scope.IsAttribute == 0) {
            //        ($scope.IsAttribute == false)
            //    }

            //};

            $scope.DuplicateId = 0;
            //This is the values to create page 
            $scope.SkillsList_AddEdit = function () {

                $http.get(baseUrl + '/api/SkillsList/Skill_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Skill=' + $scope.Skill).success(function (data) {
                    if (data == 1) {
                        alert("Skill Name is already exists, cannot duplicate");
                        return false;
                    }


                    else {
                        var obj = {
                            Id: $scope.Id,
                            CategoryId: $scope.Category,
                            Skill: $scope.Skill,
                            Description: $scope.Description,
                            IsAttribute: $scope.IsAttribute,
                        };
                        $http.post(baseUrl + '/api/SkillsList/SkillsList_AddEdit/', obj).success(function (data) {
                            $scope.AddId = data;
                            $scope.ListSkillsListPopUP($scope.AddId);
                            $scope.CancelPopup();
                            $scope.ClearSkillsListPopup();
                            //$scope.SkillListSearch();
                            //$scope.CancelPopup();
                            //$scope.ClearSkillsListPopup();
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Skill Details!" + data.ExceptionMessage;
                        });
                    }
                }).error(function (data) {

                    $scope.error = "Problem in checking restaurant name duplicate!" + data.ExceptionMessage;
                });

            };

            //This is for calcel the popup
            $scope.CancelPopup = function () {

                angular.element('#SkillsListCreateModal').modal('hide');
                angular.element('#SkillsListViewModal').modal('hide');
                $scope.ClearSkillsListPopup();
            }
        }
    ]);

    //This is for Employee Leave Request controller functions//
    EmpControllers.controller("LeaveRequestController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

            // Declaration and initialization of Scope Variables.
            $scope.emptydata = [];
            $scope.flag = 0;
            $scope.rowCollection = [];
            $scope.Id = 0;
            $scope.Id = "0";
            //  $scope.AddToDropdown = "2";
            $scope.AddToDropdown = "1";
            $scope.AddFromDropdown = "1";
            $scope.LeaveTypeId = "0";
    
            $scope.LeaveType = "0";
            $scope.LeaveType = 0;
           // $scope.LeaveType = 0;
            $scope.Leave_Type = "0";
            $scope.Status = "0";
            $scope.From_Date = '';
            $scope.Full_Name = '';
            $scope.Period = new Date();
            $scope.Status_List = "0";
            $scope.ChangeStatus = "0";
            $scope.Status_List1 = "0";
            $scope.StatusList = "-1";
            $scope.IsActive = "1";
            $scope.WorkFlow_Status = [];
            $scope.EmployeeId = $window.localStorage['UserId'];
            $scope.listPage = $routeParams.view;
            $scope.Mode = $routeParams.Mode;        
            $scope.Name = "0";      
           // $scope.Name = 0;
       

            if ($scope.listPage == 2) {
                $scope.Status_List = "-1";
            }
            else {
                $scope.Status_List = "0";
            }

            $scope.LeaveRequestId = 0;
            //$scope.Transaction = 'Leave Request';
            $scope.CompanyName = "0";
            $scope.Department_Name = "0";
            $scope.BranchName = "0";
            $scope.ChangeToStatus = "0";

            //This is function for Pagination 
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }



            /* Open the view pop up window and show the details for the employee leave Balance details */
            $scope.Viewleavebalance = function () {            
           
                $scope.LeaveBalance();
                angular.element('#LeaveBalance').modal('show');
            
            }
            $scope.ViewAdminleavebalance = function () {

                $scope.LeaveBalancefunction();
                angular.element('#LeaveBalance').modal('show');

            }


            //To show the leave balance for the employee      
            $scope.LeaveBalancefunction = function () { 

                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth() + 1;
                var yyyy = today.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd;

                }
                if (mm < 10) {
                    mm = '0' + mm;

                }
                today = yyyy + '-' + mm + '-' + dd;

                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.Id;  
                    $http.get(baseUrl + '/api/Common/LeaveBalance/?EmpId=' + EmpName + '&LeaveDate=' + today + '&LeaveTypeId=' +$scope.LeaveType).success(function (data) {                    

                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                
                        $scope.CommonTransaction_Id = data;
                        $scope.rowCollection = data;                  

                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }
                        angular.forEach($scope.rowCollection, function (value, index) {
                            $scope.LeaveAvailable = value.LeaveAvailable;
                            $scope.LeaveBalances = value.LeaveBalance;

                            if ($scope.rowCollection.length > 0 && $scope.LeaveAvailable < 0) {

                                $scope.flag = 0;
                            }                     
                        });

                    }).error(function (data) {
                        $scope.error = "An error has occurred while Listing leave adjustment Details!" + data;
                    });
                }
            };


            $scope.LeaveBalance = function () {          
                var today = new Date();
                var dd = today.getDate();

                var mm = today.getMonth() + 1;
                var yyyy = today.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd;

                }

                if (mm < 10) {
                    mm = '0' + mm;

                }
                today = yyyy + '-' + mm + '-' + dd;           
                    $scope.EmployeeId = $window.localStorage['UserId'];
                    $http.get(baseUrl + '/api/Common/LeaveBalance/?EmpId=' + $scope.EmployeeId + '&LeaveDate=' + today + '&LeaveTypeId=' + $scope.LeaveType).success(function (data) {
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                                       
                        $scope.CommonTransaction_Id = data;
                        $scope.rowCollections = data;

                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }
                        angular.forEach($scope.rowCollection, function (value, index) {
                            $scope.LeaveAvailable = value.LeaveAvailable;
                            $scope.LeaveBalances = value.LeaveBalance;

                            if ($scope.rowCollection.length > 0 && $scope.LeaveAvailable < 0) {

                                $scope.flag = 0;
                            }                       
                        });

                    }).error(function (data) {
                        $scope.error = "An error has occurred while Listing leave adjustment Details!" + data;
                    });
                 };

            /* Open the view pop up window and show the details for the employee leave adjustment details */
            $scope.ViewAdminleave = function (CMId,TotalAdjustment) {
                $scope.TotalAdjustment =TotalAdjustment;
                $scope.AdminId = CMId;
                $scope.LeavebalanceAdminPopup();
                angular.element('#LeaveModel').modal('show');
            }
            /* Open the view pop up window and show the details for the employee leave adjustment details */
            $scope.Viewleave = function (CMId,TotalAdjustment) {
                $scope.TotalAdjustment =TotalAdjustment;
                $scope.LeaveId = CMId;
                $scope.LeavebalancePopup();
                angular.element('#LeaveModel').modal('show');
            } 
            $scope.emptydatas = [];
            $scope.rowCollections = [];

            var EmpName = ''
      
            /* THIS IS FOR EMPLOYEE POPUP FUNCTION */
            $scope.LeavebalanceAdminPopup = function () {         
                if ($scope.rowCollections != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.rowCollections = [];
                    var EmpName = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;
                  
                        $http.get(baseUrl + '/api/LeaveAdjustment/LeaveAdjustmentDetails_View/?Id=' + EmpName + '&LeaveTypeId=' + $scope.AdminId).success(function (data) {
                            if(data == 0){    
                                $scope.leavename =-1;
                                $scope.employeename =-1;
                            }
                            else{
                                angular.forEach(data, function (value, index) {
                                    $scope.leavename = value.Name;;                            
                                    $scope.employeename = value.Employee_Name;                            
                                });
                            }

                            $scope.rowCollections = [];
                            $scope.emptydatas = [];
                            $scope.rowCollections = data;                     

                            if ($scope.rowCollections.length > 0) {
                                $scope.flag = 1;
                            }
                            else {
                                $scope.flag = 0;
                            }

                        }).error(function (data) {
                            $scope.error = "AN error has occured while getting leave adjustment!" + data;
                        });
                    }
                }
            };


            /* THIS IS FOR EMPLOYEE POPUP FUNCTION */
            $scope.LeavebalancePopup = function () {
                if ($scope.rowCollections != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.rowCollections = [];
                    var EmpName = '';
              
                    $scope.EmployeeId = $window.localStorage['UserId'];
                    $http.get(baseUrl + '/api/LeaveAdjustment/LeaveAdjustmentDetails_View/?Id=' + $scope.EmployeeId + '&LeaveTypeId=' + $scope.LeaveId).success(function (data) {

                        if(data == 0){    
                            $scope.leavename =-1;
                            $scope.employeename =-1;
                        }
                        else{
                            angular.forEach(data, function (value, index) {
                                $scope.leavename = value.Name;                            
                                $scope.employeename = value.Employee_Name;                            
                            });
                        }

                            $scope.rowCollections = [];
                            $scope.emptydatas = [];
                            $scope.rowCollections = data;


                            if ($scope.rowCollections.length > 0) {
                                $scope.flag = 1;
                            }
                            else {
                                $scope.flag = 0;
                            }


                        }).error(function (data) {
                            $scope.error = "AN error has occured while getting leave adjustment!" + data;
                        });              
                }
            };

     


            /* Open the view pop up window and show the details for the employee leave request details */
            $scope.ViewAdminRequest = function (CMId,TotalLeaveRequest) {
                $scope.TotalLeaveRequest =TotalLeaveRequest;
                $scope.AdminrequestId = CMId;
                $scope.LeaveAdminrequestPopup();
                angular.element('#RequestModel').modal('show');
            }

            /* Open the view pop up window and show the details for the employee leave request details */
            $scope.ViewRequest = function (CMId,TotalLeaveRequest) {
                $scope.TotalLeaveRequest =TotalLeaveRequest;
                $scope.RequestId = CMId;
                $scope.LeaverequestPopup();
                angular.element('#RequestModel').modal('show');
            }

        
            var EmpName = ''

            $scope.emptydatas = [];
            $scope.rowCollections = [];
     
            /* THIS IS FOR EMPLOYEE POPUP FUNCTION */
            $scope.LeaveAdminrequestPopup = function () {

                var today = new Date();
                var dd = today.getDate();

                var mm = today.getMonth() + 1;
                var yyyy = today.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd;

                }

                if (mm < 10) {
                    mm = '0' + mm;

                }
                today = yyyy + '-' + mm + '-' + dd;       


                if ($scope.rowCollections != undefined) {
                    $scope.rowCollections = [];

                    var EmpName = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpName = $scope.Employee_Selected.originalObject.Id;
                   
                        $http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_Days/?Id=' + EmpName + '&LeaveTypeId=' + $scope.AdminrequestId + '&LeaveDate=' + today).success(function (data) {

                            if(data == 0){                             
                                $scope.leavename =-1;
                                $scope.employeename =-1;
                           
                            }
                            else{
                                angular.forEach(data, function (value, index) {
                                    $scope.leavename = value.LeaveType;                            
                                    $scope.employeename = value.FullName;                            
                                });
                            }
                            $scope.rowCollections = [];
                            $scope.emptydatas = [];
                            $scope.rowCollections = data;                     

                            if ($scope.rowCollections.length > 0) {
                                $scope.flag = 1;
                            }
                            else {
                                $scope.flag = 0;
                            }


                        }).error(function (data) {
                            $scope.error = "AN error has occured while getting levae adjustment!" + data;
                        });
                    }
                }
            };


            /* THIS IS FOR EMPLOYEE POPUP FUNCTION */
            $scope.LeaverequestPopup = function () {

                var today = new Date();
                var dd = today.getDate();

                var mm = today.getMonth() + 1;
                var yyyy = today.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd;

                }

                if (mm < 10) {
                    mm = '0' + mm;

                }
                today = yyyy + '-' + mm + '-' + dd;      

                if ($scope.rowCollections != undefined) {
                    $scope.rowCollections = [];
                    var EmpName = '';
                    $scope.EmployeeId = $window.localStorage['UserId'];
             
                    $http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_Days/?Id=' + $scope.EmployeeId + '&LeaveTypeId=' + $scope.RequestId + '&LeaveDate=' + today).success(function (data) {
                   
                        if(data == 0){    
                            $scope.leavename =-1;
                            $scope.employeename =-1;
                        }
                        else{
                            angular.forEach(data, function (value, index) {
                                $scope.leavename = value.LeaveType;                            
                                $scope.employeename = value.FullName;                            
                            });
                        }                       
                            $scope.rowCollections = [];
                            $scope.emptydatas = [];
                            $scope.rowCollections = data;


                            if ($scope.rowCollections.length > 0) {
                                $scope.flag = 1;
                            }
                            else {
                                $scope.flag = 0;
                            }


                        }).error(function (data) {
                            $scope.error = "AN error has occured while getting leave adjustment!" + data;
                        });              
                }
            };



            $scope.WorkFlowInitialStatus = [];
            $scope.WorkFlowInitialStatusAll = [];
            $scope.Transaction = 'Leave Request';

            $http.get(baseUrl + 'api/Common/WorkFlow_InitialStatus/?Transaction=' + $scope.Transaction).success(function (data) {
            
                // all Status records list including active and inactive 
                // used for list page DD and inactive records filtering         
                $scope.WorkFlowInitialStatus = data;            
                // only active Status
                $scope.WorkFlowInitialStatusAll = $ff(data, { IsActive: 1 });
            });

            $scope.WorkflowStatusList = [];
            $scope.WorkflowstatusFilterList = [];
            $http.get(baseUrl + 'api/Common/WorkFlow_StatusList/?Transaction=' + $scope.Transaction).success(function (data) {
         
                $scope.WorkflowStatusList = data;
                $scope.WorkflowstatusFilterList = $ff(data, { IsActive: 1 });
            });
        

            /*Leave Type List*/
           $scope.LeaveTypeFilter = [];     

            $scope.leavetypefunction = function () {
            
                $scope.LeaveTypeFilter = [];
                var EmpName = '';           
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmpName = $scope.Employee_Selected.originalObject.Id;
                    } 
                    else if ($scope.EmployeeId == -1)
                    {               
                        $http.get(baseUrl + '/api/Common/GetLeaveTypeList_FromLeavePolicy/?Id=' + $scope.EmpName).success(function (data) {                             
                            $scope.LeaveTypeFilter = data;                  
                
                        }); 
                    }
                    else {                
                        $scope.EmpName = $window.localStorage['UserId'];
                    }           
                    $http.get(baseUrl + '/api/Common/GetLeaveTypeList_FromLeavePolicy/?Id=' + $scope.EmpName).success(function (data) {
                        // all Leave Type records list including active and inactive 
                        // used for list page DD and inactive records filtering               
                        $scope.LeaveTypeFilter = data;                   
                        // only active Leave Type
                        //  $scope.LeaveTypeList = $ff(data, { Active: 1 });
                    }); 
            };

            $scope.leavetypefunction();

            //List page Leave Type filter
                $scope.LeaveTypelist = [];
                $http.get(baseUrl + '/api/Common/GetLeaveTypeList_FromLeavePolicyList/?Id=' + $scope.Id).success(function (data) {
                    // all Leave Type records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.LeaveTypelist = data;              
                });

     
            //This is for Leave Type list WorkFlowStatus
            $http.get(baseUrl + 'api/Common/CommonTransaction/?Transaction=' + $scope.Transaction).success(function (data) {
                $scope.TransactionId = data.Id;
                $http.get(baseUrl + 'api/Common/WorkFlowStatus/?TransactionName=' + $scope.Transaction).success(function (data) {
                    $scope.WorkFlow_Status = data;
                });
            });
               
            $scope.WorkFlow_ChangeStatus = [];
            $scope.statusfunction = function () {
                $scope.flagstatus = true;
                $http.get(baseUrl + 'api/Common/CommonWorkFlow_GetLeaveApprovalStatus/?Id=' + $scope.EmployeeId + '&Transaction_Name=' + $scope.Transaction + '&CurrentStatus=' + $scope.ChangeStatus).success(function (data) {
                    //$scope.sName = data.sName;
                    $scope.WorkFlow_ChangeStatus = data;
                });
            };

            /*Company Name List*/
            $scope.CompanyFilterList = [];
            $scope.CompanyNameList = [];
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });

            });

            /*Department List*/
            $scope.DepartmentFilterList = [];
            $scope.DepartmentList = [];
            $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DepartmentFilterList = data;
                // only active Department
                $scope.DepartmentList = $ff(data, { Active: 1 });
            });               

            $scope.AppConfiguration = "LeaveRequest_Session";
            $scope.AppConfigurationfilter = [];      
            $scope.SessionFilter = [];
              $http.get(baseUrl + '/api/Common/AppConfigurationtable/?Name=' + $scope.AppConfiguration).success(function (data) {
                // all Leave Type records list including active and inactive 
                  // used for list page DD and inactive records filtering
                  $http.get(baseUrl + '/api/Common/Session/').success(function (data1) {
               
                      if (data.Value == 2)
                      {
                          var data2 = data1.slice(0, 2);
                          $scope.SessionFilter = data2;
                      }
                      else
                      {
                          $scope.SessionFilter = data1;
                      }
                  });         

              });
        
        
              $scope.Leaveflagfunction = function () {
                  if ($scope.listPage == 1 || $scope.listPage == 2) {
                      $scope.Leavetypeflag();
                  }
                  else {
                      LeavetypeAdminflag();
                  }
              };

             // $scope.Leaveflagfunction();

            /*Leave policy flag for login user List*/    
              $scope.Leavetypeflag = function () {
                  //$scope.EmpId = Id;             
                  if ($scope.Id==0 || $scope.Id == undefined)
                  {
                      $scope.AttachmentFlaglist = [];
                      $scope.AttachmentFlaglistfilter = [];
         
                      if ($scope.Employee_Selected != undefined) {
                          $scope.EmployeesId = $scope.Employee_Selected.originalObject.Id;
                      }
             
                      else 
                      {
                          $scope.EmployeesId = $window.localStorage['UserId'];
                      }
                 
                      $http.get(baseUrl + 'api/Common/Leavepolicy_Attachmentflag/?LeaveTypeId=' + $scope.LeaveType + '&Id='+$scope.EmployeesId).success(function (data) {
                          // all Leave policy flag list including active and inactive 
                          // used for list page DD and inactive records filtering
                     
                          $scope.AttachmentFlaglist = data;
                          //   $scope.AttachmentFlaglistfilter = $ff(data, { AttachmentFlag: 'true' });
                          $scope.Attachmentlist = data.AttachmentFlag;
                          $scope.Leavedays =data.LeaveRequesteddays;                 
                      });            
                  }
              else 
                  {
                      $scope.AttachmentFlaglist = [];
                      $scope.AttachmentFlaglistfilter = []; 
                      $http.get(baseUrl + 'api/Common/Leavepolicy_Attachmentflag/?LeaveTypeId=' + $scope.LeaveType + '&Id='+$scope.EmployeeId).success(function (data) {
                      // all Leave policy flag list including active and inactive 
                      // used for list page DD and inactive records filtering
                     
                      $scope.AttachmentFlaglist = data;
                      //   $scope.AttachmentFlaglistfilter = $ff(data, { AttachmentFlag: 'true' });
                      $scope.Attachmentlist = data.AttachmentFlag;
                      $scope.Leavedays =data.LeaveRequesteddays;                 
                  });            
                  }
                  };
             


            $scope.CompanyBranchList = [];
            $scope.CompanyBranchNameList = [];
            $scope.Company_Name = "0";
            $scope.CompanyName = "0";

            // populate branch for the selected company
            $scope.Branchlist = function (CompanyId) {

                if ($scope.CompanyBranchNameList != undefined) {  // to avoid going to DB each time when Search clicked
                    $scope.CompanyBranchNameList = [];
                    $http.get(baseUrl + 'api/CompanyBranchMaster/GetBranchList/?CompanyID=' + CompanyId).success(function (data) {
                        $scope.CompanyBranchList = data;
                        $scope.CompanyBranchNameList = $ff(data, { Active: 1 });
                    });
                }
            };
            // populate all branches for the Branch dropdown in list page
            $scope.Branchlist(0);


            /* Clear popup function */
            $scope.Clearbranch = function () {
                $scope.Branch_Name = "0";
                $scope.BranchName = "0";
            };
        

            /* THIS IS FOR VALIDATION FUNCTION */
            /* Validating the list page fields 
            checking mandatory for the follwing fields
            From Date,To Date
            and showing alert message when it is invalid.
            */
            $scope.ListValidation = function () {

                if (isDate($scope.From_Date) == false) {
                    alert("From Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.To_Date) == false) {
                    alert("To Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (($scope.From_Date != "") && ($scope.To_Date != "")) {
                    if ((ParseDate($scope.From_Date) > ParseDate($scope.To_Date))) {
                        alert("From Date should not be greater than To Date");
                        return false;
                    }
                }
                return true;
            };

            /* Validation check when the inactive record is try to edit,
            It shows alert */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            //Delete popup function// 
            $scope.DeleteLeaveRequest = function (LRId) {
                $scope.Id = LRId;
                $scope.LeaveRequestDelete();
            };
            $scope.ActiveLeaveRequest = function (LRId) {
                $scope.Id = LRId;
                $scope.ActiveLeaveRequest_Details();
            };

            /* THIS IS FOR DELETE FUNCTION */
            $scope.LeaveRequestDelete = function () {
                var del = confirm("Do you like to inactivate the selected leave request?");
                if (del == true) {
                    $http.get(baseUrl + 'api/LeaveRequest/LeaveRequest_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected leave request has been inactivated successfully");
                        $scope.LeaveRequest_ListSearch();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting leave request details" + data;
                    });
                };
            };
            /* THIS IS FOR ACTIVE FUNCTION */
            $scope.ActiveLeaveRequest_Details = function () {
                var del = confirm("Do you like to activate the selected leave request?");
                if (del == true) {
                    $http.get(baseUrl + 'api/LeaveRequest/LeaveRequest_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected leave request has been activated successfully");
                        $scope.LeaveRequest_ListSearch();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while Active Leave Request Details" + data;
                    });
                };
            };


            /* THIS IS FOR VALIDATION FUNCTION */
            /* Validating the create page mandatory fields
            checking mandatory for the follwing fields
            Leave Type,From Date,To Date,No. Of Days,Status,Reason,Balance
            and showing alert message when it is null.
            */
            $scope.Validationcontrols = function () {           
          
                if (typeof ($scope.EmployeeId) == "undefined" || $scope.Employee_Selected == undefined && $scope.listPage==3) {
                    alert("Please select Employee Name");
                    return false;
                }
                else if (typeof ($scope.LeaveType) == "undefined" || $scope.LeaveType == 0) {
                    alert("Please select Leave Type");
                    return false;
                }
                else if (typeof ($scope.FromDate) == "undefined" || $scope.FromDate == "") {
                    alert("Please select From Date and Session ");             
                             
                    return false;
                }
                else if (typeof ($scope.AddFromDropdown) == "undefined" || $scope.AddFromDropdown == 0) {
                    alert("Please select From Date Session ");               
                    return false;
                }
                else if (typeof ($scope.ToDate) == "undefined" || $scope.ToDate == "") {
                    alert("Please select To Date and Session");               
               
                    return false;
                }
                else if (isDate($scope.FromDate) == false) {
                    alert("From Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.ToDate) == false) {
                    alert("To Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (typeof ($scope.AddToDropdown) == "undefined" || $scope.AddToDropdown == 0) {
                    alert("Please select To Date session");
                    return false;
                }

                else if (typeof ($scope.Reason) == "undefined" || $scope.Reason == "") {
                    alert("Please enter Reason");
                    return false;
                }
                else if (typeof ($scope.ChangeStatus) == "undefined" || $scope.ChangeStatus == 0) {
                    alert("Please select Status");
                    return false;
                }
        
                else if (typeof ($scope.MedicalCertificate_filename) == "undefined" || ($scope.MedicalCertificate_filename == null || $scope.MedicalCertificate_filename == 0 || $scope.MedicalCertificate_filename == "") && (($scope.Attachmentlist == true|| $scope.AttachmentAdminlist== true) && ($scope.Leavedays <=$scope.NoOfDays))) {
                    alert("Please Upload Medical Certificate");
                    return false;
                }

                else if (isDate($scope.FromDate) == false) {
                    alert("From Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.ToDate) == false) {
                    alert("To Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (typeof ($scope.Balance) == "undefined" || $scope.Balance == "0") {
                    alert("You don't have enough Leave Balance");
                    return false;
                }
                else if ($scope.NoOfDays > $scope.Balance) {
                    alert("You don't have enough Leave Balance");
                    return false;
                }

                else if (ParseDate($scope.ToDate) < ParseDate($scope.FromDate)) {
                    alert("Please select To Date greater than From Date");
                    $scope.Datevalidation();
                    return false;
                }
                else if ($scope.NoOfDays < $scope.MinDaysRequest) {
                    alert("You have to take leave above minimum days limit");
                    return false;
                }
                else if ($scope.NoOfDays > $scope.MaxDaysRequest) {
                    alert("You are exceeding the maximum  limit" + " " + $scope.MaxDaysRequest + " " + "days");
                    $scope.LeaveBalanceDays = parseFloat($scope.TotalLeaveBalance - $scope.NoOfDays)
                    //alert("You are having" + " " + $scope.LeaveBalanceDays + " " + "balance");
                    return false;
                }

                return true;

            };               

     


            // To show default month start date and current date in the list filter.
            var d = new Date();
            var currMonth = d.getMonth();
            var currYear = d.getFullYear();
            var startDate = $filter('date')(new Date(currYear, currMonth, "01"), 'dd-MMM-yyyy');
            $scope.From_Date = startDate;
            $scope.To_Date = $filter('date')(new Date(currYear, currMonth + 1, 0), 'dd-MMM-yyyy');

            //This is function for List page Leave Request
            $scope.emptydatalist = [];
            $scope.rowCollectionlist = [];
            $scope.flags = 0;
            $scope.loading = false;
           // $scope.EmpName = '';
            $scope.LeaveRequest_ListSearch = function () {
          
                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.FullName;
                };
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds         
                $http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_List/?Id=' + $scope.Id + '&UserId=' + $scope.Employee_Id + '&FullName=' + EmpName + '&FromDate=' + $scope.From_Date + '&ToDate=' + $scope.To_Date + '&Status=' + $scope.Status_List + '&CompanyId=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&Branch_Id=' + $scope.BranchName + '&LeaveTypeId=' + $scope.Leave_Type + '&ListType=' + $scope.listPage + '&IsActive=' + $scope.IsActive).success(function (data) {
                    $scope.emptydatalist = [];
                    $scope.rowCollectionlist = [];
                    $scope.rowCollectionlist = data;            
                    if ($scope.rowCollectionlist.length > 0) {
                        $scope.flags = 1;
                    }
                    else {
                        $scope.flags = 0;
                    }
                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing Leave request Details!" + data;
                });
            };


            $scope.LeaveApprove_ListSearch = function () {
           
                var EmpNamelist = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.FullName;
                };
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds
            
                $http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_List/?Id=' + $scope.Id + '&UserId=' + $scope.Employee_Id + '&FullName=' + EmpNamelist + '&FromDate=' + $scope.From_Date + '&ToDate=' + $scope.To_Date + '&Status=' + $scope.Status_List + '&CompanyId=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&Branch_Id=' + $scope.BranchName + '&LeaveTypeId=' + $scope.Leave_Type + '&ListType=' + $scope.listPage + '&IsActive=' + $scope.IsActive).success(function (data) {
                    $scope.emptydatalist = [];
                    $scope.rowCollectionlist = [];
                    $scope.rowCollectionlist = data;              
                    if ($scope.rowCollectionlist.length > 0) {
                        $scope.flags = 1;
                    }
                    else {
                        $scope.flags = 0;
                    }
                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing Leave request Details!" + data;
                });
            };              

            $scope.Full_Name_list=""; 

            //This is function for List page Leave Request Admin      
            $scope.emptydatalist = [];
            $scope.rowCollectionlist = [];
            $scope.Id = 0;
            $scope.Id = "0";
            $scope.LeaveRequest_ListSearchAdmin = function () {
                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.FullName;
                };

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds

                //$http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_List/?Id=' + $scope.Id + '&FullName=' + $scope.Full_Name + '&FromDate=' + $scope.From_Date + '&ToDate=' + $scope.To_Date + '&Status=' + $scope.Status_List + '&CompanyId=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&Branch_Id=' + $scope.BranchName + '&LeaveTypeId=' + $scope.Leave_Type).success(function (data) {
                $http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_List/?Id=' + $scope.Id + '&FullName=' + EmpName + '&FromDate=' + $scope.From_Date + '&ToDate=' + $scope.To_Date + '&Status=' + $scope.Status_List + '&CompanyId=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&Branch_Id=' + $scope.BranchName + '&LeaveTypeId=' + $scope.Leave_Type + '&ListType=' + $scope.listPage + '&IsActive=' + $scope.IsActive).success(function (data) {
                    $scope.emptydatalist = [];
                    $scope.rowCollectionlist = [];
                    $scope.rowCollectionlist = data;
                    if ($scope.rowCollectionlist.length > 0) {
                        $scope.flags = 1;
                    }
                    else {
                        $scope.flags = 0;
                    }

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing Leave request Details!" + data;
                });
            };

            /* on click Go calling the list function leave request*/
            $scope.LeaveRequest_ListGo = function () {
                if ($scope.ListValidation() == true) {
                    $scope.Id = 0;
                    $scope.Mode = 1;              
                    $scope.ListLeaveRequestPopUP($scope.Id, $scope.Mode);
                }
            };

            $scope.LeaveApproval_ListGo = function () {       
                    $scope.Mode = 1;
                    $scope.Id = 0; 
                    $scope.ListLeaveApprovePopUP($scope.Id, $scope.Mode);            
            };


            /* on click Go calling the list function leave request for admin. */
            $scope.LeaveRequestAdmin_ListGo = function () {
                if ($scope.ListValidation() == true) {
                    $scope.Id = 0;
                    $scope.Mode = 1;
                    $scope.ListLeaveRequestAdminPopUP($scope.Id, $scope.Mode);
                }
            };


            $scope.ListLeaveApprovePopUP = function (LRID) {
                $scope.Id = LRID;
                $scope.LeaveApprove_ListSearch();
            };

            //This is for clear the contents in the popup
            $scope.ClearLeaveRequestPopup = function () {         
                $scope.LeaveType = "0";
                $scope.FromDate = "";
                $scope.AddToDropdown = "2";
                $scope.AddFromDropdown = "1";
                $scope.ToDate = "";
                $scope.NoOfDays = "";
                $scope.ChangeStatus = "0";
                $scope.Reason = "";
                $scope.Comments = "";
                $scope.Balance = "";
                $scope.NameList = [];
                $scope.Employee_Id = 0;
                $scope.Employee_Name = ""
                $scope.FullName = "0";
                $scope.Employee_No = "";
                $scope.ViewStatus = "0";
                $scope.FullNamelist = "";
                $scope.NameList = [];
                $scope.FullName = "0";
                $scope.MedicalCertificate_filename = "";
               // $scope.viewsId = "0";
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            };

            $scope.MedicalCertificate_filename = "";
            $scope.Id = "0";
            $scope.Company_Name = "0";
       

            // Dropdown list for the employee.
            $scope.NameList = [];
            $scope.NameListFilter = [];
            $scope.LeaverequestEmployeeList = function () {
                if ($scope.NameList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NameListFilter = $ff(data, { Active: 1 });

                    });
                }
            }
        

            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            $scope.requestEmployeeList = function () {
                var EMPName = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EMPName = $scope.Employee_Selected.originalObject.Id;
           
                $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EMPName).success(function (data) {
                    $scope.Employee_No = data.Employee_No;
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
                };
            };

            /* To show the employee code at the time of employee selection */
            $scope.LeaverequestEmployeeNameList = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/EmployeeAttendance/EmployeenameView/?Id=' + $scope.EmployeeNo).success(function (data) {

                        $scope.Employee_No = data.Employee_No;

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };

            $scope.ProcessedFunction = function () {           
                //  $scope.ViewLeaveRequestDetails();
                if (($scope.ViewStatus != "Draft") && ($scope.Id > 0)) {
                    alert("Only Reason and Comments can be edited");
                }
            };

            $scope.StatusFlowFunction = function () {           
           
                if (($scope.Statuslist == "Canceled") || ($scope.Statuslist == "Rejected")) {
                    alert("Cancel and Reject status cannot be edited");
                    return false;
                }            
                return true;
            };
      

            /* Open the create pop up window */
            $scope.AddLeaveRequestPopUP = function (LRID) {
                $scope.ClearLeaveRequestPopup();
                $scope.Id = LRID;
                angular.element('#LeaveRequestCreateModal').modal('show');
            };

            /* Open the view pop up window and show the details for the 
                LeaveRequest for the  Leave Request Id */
            $scope.ViewLeaveRequestPopUP = function (LRID) {
                $scope.Id = LRID;          
                $scope.ViewLeaveRequestDetails();
                angular.element('#LeaveRequestViewModal').modal('show');
            };

  
            /* Open the edit pop up window and show the details for the 
               LeaveRequest for the  Leave Request Id */
            $scope.EditLeaveRequestPopUP = function (LRID,Statuslist) {
                $scope.Statuslist =Statuslist;
              //  $scope.StatusFlowFunction();
                $scope.Id = LRID; 
           
                if($scope.StatusFlowFunction() == true)
                {                   
                    //  $scope.ShowBalanceNo();
                    $scope.ViewLeaveRequestDetails();
                    angular.element('#LeaveRequestCreateModal').modal('show');
                }  
            };


            /* List page pop up function Leave Request*/
            $scope.ListLeaveRequestPopUP = function (LRID) {
                $scope.Id = LRID;
                $scope.LeaveRequest_ListSearch();
            };

            /* List page pop up function Leave Request admin*/
            $scope.ListLeaveRequestAdminPopUP = function (LRID) {
                $scope.Id = LRID;
                $scope.LeaveRequest_ListSearchAdmin();
            };

            /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            $scope.Autolist = [];
            $scope.AutolistFilter = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                $scope.Autolist = data;
                $scope.AutolistFilter = $ff(data, { IsActive: 1 });
            });

            //This is function for View page 
            $scope.ViewLeaveRequestDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicatesId = $routeParams.Id;
                   // $scope.viewsId = $routeParams.Id;
                }

         
                $http.get(baseUrl + 'api/LeaveRequest/GetLeaveRequest_ById/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicatesId = data.Id;
                   // $scope.Id = data.Id;
                    $scope.LeaveRequestId = data.Id;
                    $scope.EmployeeRequestId = data.EmployeeId;
                    $scope.EmployeeId = data.EmployeeId;
                    $scope.FullNamelist = data.FullNamelist;
                    $scope.Employee_No = data.Employee_No;
                    $scope.LeaveType = data.LeaveTypeId.toString();
                    $scope.ViewLeaveType = data.LeaveType;
                    $scope.FromDate = $filter('date')(data.FromDate, "dd-MMM-yyyy");
                    $scope.ToDate = $filter('date')(data.ToDate, "dd-MMM-yyyy");
                    $scope.NoOfDays = data.NoOfDays;
                    $scope.ChangeStatus = data.CommonStatusId.toString();
                    $scope.ViewStatus = data.Status.toString();
                    $scope.Reason = data.Reason;
                    $scope.Comments = data.Comments;
                    //$scope.AttachmentFlag = data.AttachmentFlag;
                    //$scope.LeaveRequesteddays = data.LeaveRequesteddays;
                    $scope.ViewFromDropdown = data.FromDropdown.toString();
                    $scope.ViewAddFromDropdown = data.ViewFromDropdown;
                    $scope.ViewToDropdown = data.ToDropdown.toString();
                    $scope.ViewAddToDropdown = data.ViewToDropdown;
                    $scope.MedicalCertificate = data.MedicalCertificate;
                    $scope.MedicalCertificate_fullpath = data.MedicalCertificate_fullpath;
                    $scope.MedicalCertificate_filename = data.MedicalCertificate_filename;

                    var sel = {
                        Id: data.EmployeeId,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;

                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                    //$scope.LeaveInactiveFlag = 0;
                    //if (($ff($scope.LeaveTypeFilter, { Id: $scope.LeaveType, Name: $scope.ViewLeaveType, Active: 0 }).length) == 1) {
                    //    $scope.LeaveInactiveFlag = 1;
                    //}

                    $scope.CommonstatusInactiveFlag = 0;
                    //if (($ff($scope.WorkFlowInitialStatus, { Id: $scope.ChangeStatus, Name: $scope.ViewStatus, IsActive: 0 }).length) == 1) {
                    //    $scope.CommonstatusInactiveFlag = 1;
                    //}
                    // $scope.Balance = $scope.Balance + $scope.NoOfDays;
                    // $scope.showbalancevalue();
                    if ($scope.listPage == 1 || $scope.listPage == 3)
 
                        $scope.ShowBalance();
                    if ($scope.listPage == 1 || $scope.listPage == 2)
                        $scope.Leavetypeflag();
                    if ($scope.listPage == 3)
                        $scope.Leavetypeflag();
                    $scope.ShowBalance();
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Leave Request Details!" + data;
                });
               // $scope.Leavebalanceshow();
            };


            $scope.EmployeeId = $window.localStorage['UserId'];  
            //To show the leave balance for the employee
            $scope.ShowBalance = function () {
                var today = new Date();
                var dd = today.getDate();

                var mm = today.getMonth() + 1;
                var yyyy = today.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd;
                }

                if (mm < 10) {
                    mm = '0' + mm;
                }
                today = yyyy + '-' + mm + '-' + dd;
                $scope.Balance = "0";
                if ($scope.listPage == 1) {
                    $scope.EmployeeId = $window.localStorage['UserId'];
                }
                else if ($scope.listPage == 3) {
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                    }               
                }
                $http.get(baseUrl + '/api/Common/LeaveBalance/?EmpId=' + $scope.EmployeeId + '&LeaveDate=' + today + '&LeaveTypeId=' + $scope.LeaveType).success(function (data) {
                    //  console.log(data);
                    angular.forEach(data, function (value, index) {

                        if (value.TotalLeaveBalance == null || value.TotalLeaveBalance <= 0) {
                            $scope.Balance = "0";
                        }
                        else {

                            if($scope.Id == 0)
                            {                             
                                $scope.Balance = value.TotalLeaveBalance;
                            }
                            else
                            {                            
                                $scope.Balance = value.TotalLeaveBalance + $scope.NoOfDays;  
                            }
                        
                        }

                        $scope.TotalLeaveBalance = value.TotalLeaveBalance;
                        $scope.MaxDaysRequest = value.MaxDaysRequest;
                        $scope.MinDaysRequest = value.MinDaysRequest;
                    });
                });

            };      
       
            $scope.ClearEmployee = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
            };


            $scope.EmployeeId = "0";
         //   $scope.LeaveType = "0";
            $scope.FromDate = "";
            $scope.ToDate = "";


            //var vm = this;
            //console.log(vm);
            //$scope.focuss = vm.focus;
            //console.log($scope.focuss);

            //$scope.focuss = function () {

            //    var vm = this;
            //    console.log(vm);
            
            //    $scope.focus = vm;
            //    console.log($scope.foc);
            //    alert("1");
            //    alert(document.getElementById('fromdate').focus());
            //    document.getElementById('fromdate').style.color='red';
            //    document.getElementById('todate').focus();
           
            //};

            $scope.Datevalidation = function () {
                    $scope.FromDate = "";
                    $scope.ToDate = ""; 
            };

            $scope.open = function () {
                $scope.shouldBeOpen = true;           
            };

            $scope.DuplicatesId =0;
            $scope.LeaveRequest_AddEdit = function () {
         
                if ($scope.Validationcontrols() == true) {
                    if ($scope.listPage == 1) {
                        $scope.EmployeeId = $window.localStorage['UserId'];
                    }
                    else {
                        $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                    }
             
                    $http.get(baseUrl + '/api/LeaveRequest/LeaveRequest_Duplicatecheck/?Id=' + $scope.DuplicatesId + '&LeaveType=' + $scope.LeaveType + '&EmployeeId=' + $scope.EmployeeId+ '&FromDate=' + $scope.FromDate+ '&ToDate=' + $scope.ToDate).success(function (data) {
                   
                        if (data == 1) {

                            alert("Already Leave Requested for selected employee, cannot duplicate");
                            return false;
                        }
                        else {
                      
                            $http.get(baseUrl + '/api/LeaveRequest/GetLeavePolicyBackdated/?Id=' + $scope.EmployeeId + '&LeaveTypeId=' + $scope.LeaveType + '&LeaveDateFrom=' + $scope.FromDate + '&LeaveDateTo=' + $scope.ToDate).success(function (data) {
                                                       
                                if (data != null) {

                                var dataval = data.returnval;

                                if (dataval == 'ValidationAllow') {
                                    $scope.InsertLeaveRequest_AddEdit();
                                }
                                else if (dataval == 'Val') {

                                    $scope.today = $filter('date')(new Date(), 'dd-MMM-yyyy');
                                    if((ParseDate($scope.FromDate) < (ParseDate($scope.today))) || (ParseDate($scope.ToDate) < (ParseDate($scope.today)))) {
                                        alert("Past date cannot be allowed");
                                    $scope.Datevalidation();
                                    $scope.open();
                                    return false;                                
                                     }
                       
                                    else if ((ParseDate($scope.FromDate) >= (ParseDate($scope.today))) || (ParseDate($scope.ToDate) >= (ParseDate($scope.today)))) {
                                        $scope.InsertLeaveRequest_AddEdit();     
                                        }   
                                    }
                               
                                    $http.get(baseUrl + '/api/LeaveRequest/GetLeavePolicyIncHoliday/?Id=' + $scope.EmployeeId + '&LeaveTypeId=' + $scope.LeaveType + '&FromDate=' + $scope.FromDate + '&ToDate=' + $scope.ToDate).success(function (data) {                             
                                                                                
                                        var flag = data.returnval;                                  
                                    
                                        if (flag == 3) {                             
                                            $scope.NoOfDays = 0;
                                            var days = 0;
                                            var date2 = ParseDate($scope.FromDate);
                                            var date1 = ParseDate($scope.ToDate);
                              
                                            var date2Session = $scope.AddFromDropdown;
                                            var date1Session = $scope.AddToDropdown;

                                            if (ParseDate(date1) < ParseDate(date2)) {
                                                alert("Please enter To Date greater than From Date");
                                                $scope.Datevalidation();
                                                return false;
                                            }
                                            if (ParseDate(date1) == ParseDate(date2) && (date2Session < date1Session)) {
                                                alert("Please select valid Leave Sessions");
                                                return false;
                                            }
                                            else {                                    
                                                $scope.AppConfigleave = "LeaveRequest_Session";
                                                $http.get(baseUrl + '/api/Common/AppConfigurationtable/?Name=' + $scope.AppConfigleave).success(function (data) {
                                                    if (data.Value == 4) {
                                                        var timeDiff = Math.abs(date1.valueOf() - date2.valueOf());
                                                        days = Math.ceil(timeDiff / (1000 * 3600 * 24));
                                                        if (date1Session == 0 && date2Session == 0) {
                                                            $scope.NoOfDays = parseInt(days + 1);
                                                        }
                                                        else if (date1Session != 0 && date2Session != 0) {
                                                            if (
                                                                (date1Session == date2Session && (date2Session == SessionOne))
                                                                || (date1Session == date2Session && (date2Session == SessionTwo))
                                                                || (date1Session == date2Session && (date2Session == SessionThree))
                                                                || (date1Session == date2Session && (date2Session == SessionFour))
                                                                ) {
                                               
                                                                $scope.NoOfDays = parseFloat(days + 0.25);
                                                            }
                                                            else if (
                                                                (date1Session + SessionOne == date2Session && (date2Session == SessionTwo))
                                                                || (date1Session + SessionOne == date2Session && (date2Session == SessionThree))
                                                                || (date1Session + SessionOne == date2Session && (date2Session == SessionFour))
                                                                || (date1Session - SessionThree == date2Session && (date2Session == SessionOne))
                                                                ) {
                                                 
                                                                $scope.NoOfDays = parseFloat(days + 0.5);
                                                            }
                                                            else if (
                                                                (date1Session + SessionTwo == date2Session && (date2Session == SessionThree))
                                                                || (date1Session + SessionTwo == date2Session && (date2Session == SessionFour))
                                                                || (date1Session - SessionTwo == date2Session && (date2Session == SessionOne))
                                                                || (date1Session - SessionTwo == date2Session && (date2Session == SessionTwo))
                                                                ) {
                                                   
                                                                $scope.NoOfDays = parseFloat(days + 0.75);                                                   
                                                            }
                                                            else if (
                                                                (date1Session + SessionThree == date2Session && (date2Session == SessionFour))
                                                                || (date1Session - SessionOne == date2Session && (date2Session == SessionOne))
                                                                || (date1Session - SessionOne == date2Session && (date2Session == SessionTwo))
                                                                || (date1Session - SessionOne == date2Session && (date2Session == SessionThree))
                                                                ) {                                                   
                                                                $scope.NoOfDays = parseFloat(days + 1.0);
                                                            }
                                                        }
                                                    }

                                                    else {
                                                        var timeDiff = Math.abs(date1.valueOf() - date2.valueOf());
                                                        days = Math.ceil(timeDiff / (1000 * 3600 * 24));                                          
                                                        if (date1Session == 0 && date2Session == 0) {
                                                            $scope.NoOfDays = parseInt(days + 1);
                                                        }
                                                        else if (date1Session != 0 && date2Session != 0) {
                                                            $scope.NoOfDays = parseInt(days + 1);

                                                            if (
                                                               (date1Session == date2Session && (date2Session == SessionOne))
                                                               || (date1Session == date2Session && (date2Session == SessionTwo))
                                                               ) {
                                                   
                                                                $scope.NoOfDays = parseFloat(days + 0.5);
                                                            }
                                                            else if (
                                                                (date1Session + SessionOne == date2Session && (date2Session == SessionTwo))
                                                                || (date1Session - SessionOne == date2Session && (date2Session == SessionOne))
                                                                ) {
                                                   
                                                                $scope.NoOfDays = parseFloat(days + 1.0);
                                                            }
                                                        }

                                                    }
                                                })
                                            }                                       
                                            $scope.InsertLeaveRequest_AddEdit();                              
                                        }
                                            //$scope.InsertLeaveRequest_AddEdit();  
                                  
                                        else 
                                        {                                     
                                            $scope.InsertLeaveRequest_AddEdit();  
                                        }                                   

                                        //   $scope.InsertLeaveRequest_AddEdit();  
                                    }); 
                                  }
                           
                          
                               // $scope.InsertLeaveRequest_AddEdit();

                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding tableno!" + data.ExceptionMessage;
                            });
                        }

                        //$scope.InsertLeaveRequest_AddEdit();
                    }).error(function (data) {
                        $scope.error = "Problem in checking Reference duplicate!" + data.ExceptionMessage;
                    });
                }
                //  }
                //else {
                //            $scope.InsertLeaveRequest_AddEdit();
                //}

                return true;

            }



            /*This is for getting a file url for uploading the url into the database*/
            $scope.dataURItoBlob = function (dataURI) {
                var binary = atob(dataURI.split(',')[1]);
                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                var array = [];
                for (var i = 0; i < binary.length; i++) {
                    array.push(binary.charCodeAt(i));
                }
                return new Blob([new Uint8Array(array)], {
                    type: mimeString
                });
            }
       

            //This is for file change function//
            $scope.docfileChange = function () {
     
                if ($('#License')[0].files[0] != undefined) {
                    $scope.MedicalCertificate_filename = $('#License')[0].files[0]['name'];
                }
                else if ($('#License1')[0].files[0] != undefined) {
                    $scope.MedicalCertificate_filename = $('#License1')[0].files[0]['name'];
                }
            }




            $scope.loading = false;
            /* THIS IS FOR ADD EDIT FUNCTION */
            $scope.InsertLeaveRequest_AddEdit = function () {
                // console.log($scope.Balanceleave);
               // if ($scope.Validationcontrols() == true) {               
                    var MedicalCertificate_filename = "";
                    var MedicalCertificate_filename1 = "";

                    var fd = new FormData();
                    var imgBlob;
                    var imgBlobfile;
                    var itemIndexLogo = -1;
                    var itemIndexfile = -1;
                    var fd = new FormData();           
                    if ($('#License')[0].files[0] != undefined) {
                        MedicalCertificate_filename = $('#License')[0].files[0]['name'];
                        imgBlobfile = $scope.dataURItoBlob($scope.licedoc);

                        if (itemIndexLogo == -1) {
                            itemIndexfile = 0;
                        }
                        else {
                            itemIndexfile = 1;
                        }
                    }
                    else if ($('#License1')[0].files[0] != undefined) {
                        MedicalCertificate_filename1 = $('#License1')[0].files[0]['name'];
                        imgBlobfile = $scope.dataURItoBlob($scope.licedoc1);


                        if (itemIndexLogo == -1) {
                            itemIndexfile = 0;
                        }
                        else {
                            itemIndexfile = 1;
                        }
                    }


                    if (itemIndexLogo != -1) {
                        fd.append('file', imgBlob);

                    }
                    if (itemIndexfile != -1) {
                        fd.append('file1', imgBlobfile);
                    }

                    $http.post(baseUrl + 'api/Common/AttachFile',
                    fd,
                    {
                        transformRequest: angular.identity,
                        headers: {
                            'Content-Type': undefined
                        }
                    }
                    )
                    .success(function (response) {
                
                        if ($scope.MedicalCertificate_filename == "") {
                            $scope.MedicalCertificate = "";
                        }
                        else if (itemIndexfile > -1) {
                            if ($scope.MedicalCertificate_filename != "" && response[itemIndexfile] != "") {
                                $scope.MedicalCertificate = response[itemIndexfile];
                            }
                        }
                        else if ($scope.MedicalCertificate_filename == "") {
                            $scope.MedicalCertificate = "";
                        }
                        else if (itemIndexfile > -1) {
                            if ($scope.MedicalCertificate_filename != "" && response[itemIndexfile] != "") {
                                $scope.MedicalCertificate = response[itemIndexfile];
                            }
                        }




                    if ($scope.listPage == 1) {
                        $scope.EmployeeId = $window.localStorage['UserId'];
                    }
                    else {
                        $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                    }


                    var obj = {
                        Id: $scope.Id,
                        EmployeeId: $scope.EmployeeId,
                        Employee_No: $scope.Employee_No,
                        FullNamelist: $scope.FullNamelist,
                        LeaveTypeId: $scope.LeaveType,
                        FromDate: $scope.FromDate,
                        FromDropdown: $scope.AddFromDropdown == 0 ? null : $scope.AddFromDropdown,
                        ToDate: $scope.ToDate,
                        ToDropdown: $scope.AddToDropdown == 0 ? null : $scope.AddToDropdown,
                        NoOfDays: $scope.NoOfDays,
                        CommonStatusId: $scope.ChangeStatus,
                        Reason: $scope.Reason,
                        Comments: $scope.Comments,
                        MedicalCertificate_fullpath: "",
                        MedicalCertificate: $scope.MedicalCertificate == "" ? "" : $scope.MedicalCertificate,
                        MedicalCertificate_fullpath: "",
                        MedicalCertificate_filename: $scope.MedicalCertificate_filename == "" ? "" : $scope.MedicalCertificate_filename,
                        //AttachmentFlag: $scope.AttachmentFlag,
                        //LeaveRequesteddays: $scope.LeaveRequesteddays,

                    };
                
                //    console.log(obj);

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 8000); // 3 seconds
                    $http.post(baseUrl + '/api/LeaveRequest/LeaveRequest_AddEdit/', obj).success(function (data) {
                        $scope.AddId = data;
                        var AddId = data;

                        if ($scope.listPage == 1) {                    
                            $scope.ListLeaveRequestPopUP(AddId);
                        }
                        else if ($scope.listPage == 3) {
                            $scope.ListLeaveRequestAdminPopUP(AddId);
                        }

                        angular.element('#LeaveRequestCreateModal').modal('hide');
                        $scope.ClearLeaveRequestPopup();
                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Leave Request Details!" + data.ExceptionMessage;
                    });
                    }).error(function (response) {
                        $scope.MedicalCertificate = "";
                        $scope.MedicalCertificat_fullpath = "";

                    });

             //   }
            };

            //This is for Resume file clear function//
            $scope.fileclear = function () {
           
                $scope.MedicalCertificate_filename = "";
                MedicalCertificate_fullpath: "",
                $scope.MedicalCertificate ="";            
                $('#License').val('');
            };
            $scope.adminfileclear = function () {
           
                $scope.MedicalCertificate_filename = "";
                MedicalCertificate_fullpath: "",
                $scope.MedicalCertificate ="";            
                $('#License1').val('');
            };



            /* To Clear the value after closing the view popup window */
            $scope.CancelView = function () {
                angular.element('#LeaveRequestViewModal').modal('hide');
                $scope.ClearLeaveRequestPopup();
            }

            /* To Clear the value after closing the edit popup window */
            $scope.CancelPopup = function () {

                angular.element('#LeaveRequestCreateModal').modal('hide');
                $scope.ClearLeaveRequestPopup();
            }

            //This is function for dropdown session value.

            $scope.CommonConfiguration_ListSearch = function () {
                $http.get(baseUrl + '/api/Common/CommonConfiguration_List/?Id=' + $scope.Id).success(function (data) {

                    if ($scope.Id == 1) {
                        $scope.ForFromDropDown = function (FromDropdown) {
                            $scope.FromDropdown = FromDropdown;
                            if ($scope.FromDropdown == 1) {
                                $scope.ViewFromDropDown = 'First Session';
                            }
                            else if ($scope.FromDropdown == 2) {
                                $scope.ViewFromDropDown = 'Second Session';
                            }
                        };

                        $scope.ForToDropDown = function (ToDropdown) {
                            $scope.ToDropdown = ToDropdown;
                            if ($scope.ToDropdown == 1) {
                                $scope.ViewToDropDown = 'First Session';
                            }
                            else if ($scope.ToDropdown == 2) {
                                $scope.ViewToDropDown = 'Second Session';
                            }
                        };
                    }
                    else {
                        $scope.ForFromDropDown = function (FromDropdown) {
                            $scope.FromDropdown = FromDropdown;
                            if ($scope.FromDropdown == 1) {
                                $scope.ViewFromDropDown = 'First Session';
                            }
                            else if ($scope.FromDropdown == 2) {
                                $scope.ViewFromDropDown = 'Second Session';
                            }
                            else if ($scope.FromDropdown == 3) {
                                $scope.ViewFromDropDown = 'Third Session';
                            }
                            else if ($scope.FromDropdown == 4) {
                                $scope.ViewFromDropDown = 'Fourth Session';
                            }
                        };

                        $scope.ForToDropDown = function (ToDropdown) {
                            $scope.ToDropdown = ToDropdown;
                            if ($scope.ToDropdown == 1) {
                                $scope.ViewToDropDown = 'First Session';
                            }
                            else if ($scope.ToDropdown == 2) {
                                $scope.ViewToDropDown = 'Second Session';
                            }
                            else if ($scope.FromDropdown == 3) {
                                $scope.ViewFromDropDown = 'Third Session';
                            }
                            else if ($scope.FromDropdown == 4) {
                                $scope.ViewFromDropDown = 'Fourth Session';
                            }
                        };
                    }


                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                });
            };


            $scope.IncludeHoliday = function () {

                $scope.NoOfDays = 0;
                var days = 0;
                var date2 = ParseDate($scope.FromDate);
                //var date4 = ParseDate($scope.FromDate);
                var date1 = ParseDate($scope.ToDate);
                //  var date3 = ParseDate($scope.ToDate);


                //var date1Session = $scope.AddToDropdown;
                //var date2Session = $scope.AddFromDropdown;

                var date1Session = parseInt($scope.AddFromDropdown);
                var date2Session = parseInt($scope.AddToDropdown);

         
                var SessionOne = 1;
                var SessionTwo = 2;
                var SessionThree = 3;
                var SessionFour = 4;

           
                if (ParseDate(date1) < ParseDate(date2)) {
                    alert("Please enter To Date greater than From Date");
                    $scope.Datevalidation();
                    return false;
                }

                if (ParseDate(date1) == ParseDate(date2) && (date2Session < date1Session)) {
                    alert("Please select valid Leave Sessions");
                    return false;
                }
                else {


                    $scope.AppConfigleave = "LeaveRequest_Session";              

                    $http.get(baseUrl + '/api/Common/AppConfigurationtable/?Name=' + $scope.AppConfigleave).success(function (data) {                 
                        if (data.Value == 4) {                          
                       
                                var timeDiff = Math.abs(date1.valueOf() - date2.valueOf());

                                days = Math.ceil(timeDiff / (1000 * 3600 * 24));
                                if (date1Session == 0 && date2Session == 0) {                              
                                    $scope.NoOfDays = parseInt(days + 1);
                                }

                            
                                else if (date1Session != 0 && date2Session != 0) {                              
                              
                                    if (
                                        (date1Session == date2Session && (date2Session == SessionOne))
                                        || (date1Session == date2Session && (date2Session == SessionTwo))
                                        || (date1Session == date2Session && (date2Session == SessionThree))
                                        || (date1Session == date2Session && (date2Session == SessionFour))
                                        )
                                    {
                                  
                                        $scope.NoOfDays = parseFloat(days + 0.25);                                   
                                    }
                              
                                    else if (
                                        (date1Session + SessionOne == date2Session && (date2Session == SessionTwo))
                                        || (date1Session + SessionOne == date2Session && (date2Session == SessionThree))
                                        || (date1Session + SessionOne == date2Session && (date2Session == SessionFour))
                                        || (date1Session - SessionThree == date2Session && (date2Session == SessionOne))
                                        )
                                    {
                                 
                                        $scope.NoOfDays = parseFloat(days + 0.5);
                                    }
                                    else if (
                                        (date1Session + SessionTwo == date2Session && (date2Session == SessionThree))
                                        || (date1Session + SessionTwo == date2Session && (date2Session == SessionFour))
                                        || (date1Session - SessionTwo == date2Session && (date2Session == SessionOne))
                                        || (date1Session - SessionTwo == date2Session && (date2Session == SessionTwo))
                                        )
                                    {
                                 
                                        $scope.NoOfDays = parseFloat(days + 0.75);
                                    
                                    }
                                    else if (
                                        (date1Session + SessionThree == date2Session && (date2Session == SessionFour))
                                        || (date1Session - SessionOne == date2Session && (date2Session == SessionOne))
                                        || (date1Session - SessionOne == date2Session && (date2Session == SessionTwo))
                                        || (date1Session - SessionOne == date2Session && (date2Session == SessionThree))
                                        )
                                    {
                                   
                                        $scope.NoOfDays = parseFloat(days + 1.0);
                                    }
                                }

                            }

                            else {
                            

                                var timeDiff = Math.abs(date1.valueOf() - date2.valueOf());

                                days = Math.ceil(timeDiff / (1000 * 3600 * 24));
                            // value =2

                           
                                if (date1Session == 0 && date2Session == 0) {
                                    $scope.NoOfDays = parseInt(days + 1);
                                }
                               else if (date1Session != 0 && date2Session != 0) {
                                    $scope.NoOfDays = parseInt(days + 1);
                          
                                 if (
                                    (date1Session == date2Session && (date2Session == SessionOne))
                                    || (date1Session == date2Session && (date2Session == SessionTwo))
                                    )
                                {
                              
                                    $scope.NoOfDays = parseFloat(days + 0.5);
                                }
                                else if (
                                    (date1Session + SessionOne == date2Session && (date2Session == SessionTwo))
                                    || (date1Session - SessionOne == date2Session && (date2Session == SessionOne))
                                    )
                                {
                               
                                    $scope.NoOfDays = parseFloat(days + 1.0);
                                }
                                }
                           
                            }


                      
                            $http.get(baseUrl + '/api/LeaveRequest/GetLeavePolicyIncHoliday/?Id=' + $scope.EmployeeId + '&LeaveTypeId=' + $scope.LeaveType + '&FromDate=' + $scope.FromDate + '&ToDate=' + $scope.ToDate).success(function (data) {
                                                      
                                if (data.flag == 3) {
                                    $scope.NoOfDays = $scope.NoOfDays - data.Holiday;
                                    if ($scope.NoOfDays <= '0') {
                                        $scope.NoOfDays = 0;
                                    }
                               
                                }
                            
                            });
                    });

                }

                //console.log($scope.NoOfDays);
            };


            /* THIS IS FOR VALIDATION FUNCTION */
            /* Validating the view approval page mandatory fields
            checking mandatory for the follwing fields
            Leave Type,From Date,To Date,No. Of Days,Status,Reason,Balance
            and showing alert message when it is null.
            */
            $scope.Validation = function () {
                if (typeof ($scope.ChangeToStatus) == "undefined" || $scope.ChangeToStatus == 0) {
                    alert("Please select Change Status");
                    return false;
                }
                var flag = true;
                angular.forEach($scope.WorkFlow_ChangeStatus, function (value, index) {
                    if (($scope.ChangeToStatus == value.Id) && (value.Status == 'Canceled' || value.Status == 'Rejected')) {
                        if (typeof ($scope.Remarks) == "undefined" || $scope.Remarks == "") {
                            alert("Please enter Remarks");
                            flag = false;
                        }
                    }
                });
                return flag;
            };


            ///* on click Go calling the list function.*/
            //$scope.LeaveApproval_ListGo = function () {
            //    if ($scope.ListValidation() == true) {
            //        $scope.Id = 0;
            //        $scope.EmpName="";
            //        $scope.LeaveApproval_ListSearch();
            //    }
            //};

            /* Clear the create page scope variable values. */
            $scope.ClearLeaveApprovalPopup = function () {
                $scope.ChangeToStatus = "0";
                $scope.Remarks = "";
                $scope.flagstatus = false;
            };

            $scope.ViewLeaveApprovalPopUP = function (LAID) {
                $scope.Id = LAID;
                $scope.ViewLeaveRequestDetails();
                $scope.ClearLeaveApprovalPopup();
                angular.element('#LeaveRequestViewModal').modal('show');
            };

            /* THIS IS FOR LEAVE APPROVAL ADD EDIT FUNCTION */
            $scope.UpdateStatus = function () {
                if ($scope.Validation() == true) {
                    var obj = {
                        Id: $scope.AddId,
                        TransactionId: $scope.TransactionId,
                        PKId: $scope.LeaveRequestId,
                        EmployeeId: $scope.EmployeeRequestId,
                        StatusId: $scope.ChangeToStatus,
                        Remarks: $scope.Remarks
                    };
                    $http.post(baseUrl + '/api/Common/StatusAudit_AddEdit/', obj).success(function (data) {
                        //$scope.LeaveApproval_ListGo();
                        $scope.LeaveRequest_ListSearch();
                        $scope.ClearLeaveApprovalPopup();
                        angular.element('#LeaveRequestViewModal').modal('hide');
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Leave Request Details!" + data.ExceptionMessage;
                    });
                }
            }

        }
    ]);

    /* THIS IS FOR EMPLOYEE ADVANCE STOP CONTROLLER FUNCTION */
    EmpControllers.controller("AdvanceDeductionStopController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
    function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {              

        // Declaration and initialization of Scope Variables.
        $scope.Id = 0;
        // $scope.Id = "0";
        $scope.Full_Name = '';
        $scope.Period_From = '';
        $scope.Period_To = '';

        $scope.Employee_No = '';
        $scope.FullName = '';
        $scope.Name = "0";
        $scope.Stop_FromMonth = "0";
        $scope.Stop_FromYear = "0";
        $scope.Stop_ToMonth = "0";
        $scope.Stop_ToYear = "0";
        $scope.Remarks = '';

        // List Page Pagination.
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }
        $scope.rowCollection = [];


        $scope.Employee_ID = 0;
        $scope.CompanyName = "0";

        $scope.flag = 0;
        $scope.Company_Name = "0";
        $scope.Employee_Name = "";
        $scope.emptydata = [];
        $scope.rowCollection = [];

        /*
      Calling the api method to list the advance deduction stop details for the  filters  employee name,from period, to period and
      showing the result in table.
      */
        $scope.Advance_Listsearch = function () {
            $scope.emptydata = [];
            $scope.rowCollection = [];
            var EmpName = '';
            if ($scope.Employee_Selected != undefined) {
                EmpName = $scope.Employee_Selected.originalObject.Id;
            };
            $http.get(baseUrl + '/api/AdvanceDeductionStop/Advance_List/?Id=' + $scope.Id + '&Employee_Id=' + EmpName + '&Period_From=' + $scope.Period_From + '&Period_To=' + $scope.Period_To).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;

                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }

                //  console.log($scope.rowCollection);
            }).error(function (data) {
                //console.log(data);
                $scope.error = "AN error has occured while deleting Employee Advance Details" + data;
            });

        };


        /* To show the employee code at the time of employee selection */
        $scope.AttendanceEmployeeNameList = function () {
            var EmployeeNo = '';
            if ($scope.Employee_Selected != undefined) {
                $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                    $scope.Employee_No = data.Employee_No;

                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };
        };

        /* To show the employee code at the time of employee selection */
        $scope.AttendanceEmployeeNameList = function () {
            var EmployeeNo = '';
            if ($scope.Employee_Selected != undefined) {
                $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                    $scope.Employee_No = data.Employee_No;

                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };
        };


        /*THIS IS FOR EDIT FUNCITON */
        $scope.ErrorFunction = function () {
            alert("Inactive record cannot be edited");
        }

        /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
        $scope.autocompleteclear = function () {
            $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            $scope.Employee_No = "";
            //$scope.CompanyName = "0";
            //$scope.Autolist = [];
        };

        /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
        $scope.Advance_Listsearchgo = function () {
            if ($scope.ListValidation() == true) {
                $scope.Id = 0;
                var ListId = $scope.Id;
                //  $scope.ListAdvancePopUP(ListId);
                $scope.Mode = 1;
                $scope.Advance_Listsearch($scope.Id, $scope.Mode);
            }
        };

        /* THIS IS FOR SCORE LIST FUNCTION */
        //$http.get('/api/AdvanceDeductionStop/EmployeeList/').success(function (data) {
        //    $scope.EmployeeeList = data;
        //});


        /* 
       Calling api method for the dropdown list in the html page for the fields 
       advance type,from year,to year,month list,group by from year ,group by to year
       */
        $http.get(baseUrl + 'api/Common/AdvanceTypeList/').success(function (data) {
            $scope.TypeList = data;
        });


        $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
            $scope.getFyYear = data;

        });
        $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
            $scope.getFyToYear = data;
        });

        //This is for Month list
        $scope.MonthList = [];
        $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
            $scope.MonthList = data;
        });

        /*FINANCIAL GROUP BY FROM YEAR*/
        $http.get(baseUrl + 'api/Common/GroupBy_FromYear/').success(function (data) {
            $scope.GroupFromYear = data;
        });
        /*FINANCIAL GROUP BY TO YEAR*/
        $http.get(baseUrl + 'api/Common/GroupBy_ToYear/').success(function (data) {
            $scope.GroupToYear = data;
        });


        /* Validating the list page.
       check these field full name is invalid
       and showing alert message when it is null.
       */
        $scope.Validationcontrols = function () {

            var retFlag = true;
            if (typeof ($scope.FullName) == "undefined" || $scope.Employee_Selected == undefined) {
                alert("Please select Employee Name");
                return false;
            }
            else if (typeof ($scope.Name) == "undefined" || $scope.Name == 0) {
                alert("Please select Advance Type");
                return false;
            }
            else if (typeof ($scope.Stop_FromMonth) == "undefined" || $scope.Stop_FromMonth == 0) {
                alert("Please select Advance Period From Month");
                return false;
            }
            else if (typeof ($scope.Stop_FromYear) == "undefined" || $scope.Stop_FromYear == 0) {
                alert("Please select Advance Period From Year");
                return false;
            }
            else if (typeof ($scope.Stop_ToMonth) == "undefined" || $scope.Stop_ToMonth == 0) {
                alert("Please select Advance Period To Month");
                return false;
            }
            else if (typeof ($scope.Stop_ToYear) == "undefined" || $scope.Stop_ToYear == 0) {
                alert("Please select Advance Period To Year");
                return false;
            }
            return retFlag;
        };

        /* Validating the list page.
          check these field period from and to Date is invalid
          and showing alert message when it is null.
          */
        $scope.ListValidation = function () {
            var retFlag = true;
            if (isDate($scope.Period_From) == false) {
                alert("Period From is in Invalid format, please enter dd-mm-yyyy");
                return false;
            }
            else if (isDate($scope.Period_To) == false) {
                alert("Period To is in Invalid format, please enter dd-mm-yyyy");
                return false;
            }
            else if (($scope.Period_To != "") && ($scope.Period_From != "")) {
                if ((ParseDate($scope.Period_To) < ParseDate($scope.Period_From))) {
                    alert("From Date should not be greater than To Date");
                    retFlag = false;
                }
            }
            return retFlag;
        };


        /* Open the create pop up window */
        $scope.AddAdvancePopUP = function (ASId) {
            $scope.Id = ASId;
            // $scope.ViewAdvance();
            angular.element('#AdvanceModel').modal('show');
        };

        /* Open the view pop up window and show the details for the advance deduction stop for the advance deduction stop Id */
        $scope.ViewAdvancePopUP = function (ASId) {
            $scope.Id = ASId;
            $scope.ViewAdvance();
            angular.element('#AdvanceView').modal('show');
        };

        /* Open the edit pop up window and show the details for the advance deduction stop for the advance deduction stop Id */
        $scope.EditAdvancePopUP = function (ASId) {
            $scope.Id = ASId;
            $scope.ViewAdvance();
            angular.element('#AdvanceModel').modal('show');
        };

        /*calling list popup function */
        $scope.ListAdvancePopUP = function (PFESIId) {
            if ($routeParams.Id == 0) {
                $scope.rowCollection = [];
            }
            if ($scope.Id == 0 && $scope.Mode == 1) {

                $scope.Advance_Listsearch();
            }
            else if ($scope.Id > 0 && $scope.Mode == 1) {

                $scope.Advance_Listsearch();
            }
            if (PFESIId > 0) {
                $scope.Id = PFESIId;
                $scope.Advance_Listsearch();
                // angular.element('#PFandESIModel').modal('show');
            }
        }

        /*
       Calling the api method to view the details of the Advance Deduction Stop details
       for the Advance Deduction Stop Id 
       and display the details in the view pop up window.
       */
        $scope.ViewAdvance = function () {
            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/AdvanceDeductionStop/Advance_View/?Id=' + $scope.Id).success(function (data) {
                $scope.Employee_Id = data.Employee_Id;
                $scope.Employee_No = data.Employee_No;
                $scope.FullName = data.FullName;
                $scope.Name = data.AdvanceTypeId;
                $scope.listName = data.Name;
                $scope.EmployeeAdvanceId = data.EmployeeAdvanceId;
                $scope.Stop_FromMonth = data.StopPeriod_FromMonth_Id.toString();
                $scope.listStop_FromMonth = data.Stop_FromMonth;
                $scope.Stop_FromYear = data.StopPeriod_FromYear_Id.toString();
                $scope.listStop_FromYear = data.Stop_FromYear;
                $scope.Stop_ToMonth = data.StopPeriod_ToMonth_Id.toString();
                $scope.listStop_ToMonth = data.Stop_ToMonth;
                $scope.Stop_ToYear = data.StopPeriod_ToYear_Id.toString();
                $scope.listStop_ToYear = data.Stop_ToYear;
                $scope.Remarks = data.Remarks;
                $scope.FullNamelist = data.FullNamelist;

                var sel = {
                    Id: data.Employee_Id,
                    FullName: data.FullName,
                    FullNamelist: data.FullNamelist
                };

                $scope.DisplayFullName = sel;

                $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);


            }).error(function (data) {
                $scope.error = "AN error has occured while list Advance Deduction Stop List!" + data;
            });
        };





        /* THIS IS FOR DELETE FUNCTION */
        $scope.DeleteAdvance = function (LRId) {
            $scope.Id = LRId;
            $scope.Advance_Delete();
        };

        /* 
        Calling the api method to detele the details of the Advance Deduction Stop details 
        for the  Advance Deduction Stop details Id,
        and redirected to the list page.
        */
        $scope.Advance_Delete = function () {
            var del = confirm("Do you like to inactivate the selected Advance deductiuon stop details?");
            if (del == true) {
                $http.get(baseUrl + 'api/AdvanceDeductionStop/Advance_Delete/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected advance deduction stop details has been inactivated successfully");
                    $scope.Advance_Listsearchgo();
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Advance" + data;
                });
            }
        };


        /* THIS IS FOR ACTIVE FUNCTION */
        $scope.ActiveAdvance = function (LRId) {
            $scope.Id = LRId;
            $scope.Advance_Active();
        };


        /* 
        Calling the api method to inactived the details of the Advance Deduction Stop details 
        for the  Advance Deduction Stop details Id,
        and redirected to the list page.
        */
        $scope.Advance_Active = function () {
            var del = confirm("Do you like to activate the selected advance deduction stop details?");
            if (del == true) {
                $http.get(baseUrl + 'api/AdvanceDeductionStop/Advance_Active/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected advance deduction stop details has been activated successfully");
                    $scope.Advance_Listsearchgo();
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Advance" + data;
                });
            }
        };

        /* THIS IS FOR CLEARE POPUP FUNCTION  */
        $scope.ClearAdvancePopup = function () {
            $scope.Employee_No = '';
            $scope.FullName = '';
            $scope.Name = "0";
            $scope.Stop_FromMonth = "0";
            $scope.Stop_FromYear = "0";
            $scope.Stop_ToMonth = "0";
            $scope.Stop_ToYear = "0";
            $scope.Remarks = '';
            $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
        };

        $scope.Id = "0";
        $scope.Company_Name = "0";

        /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
        $scope.NameList = [];
        $scope.NamefilterList = [];
        $scope.EmployeeAttendancelist = function () {
            // $scope.autocompleteclear();
            if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                $scope.NameList = [];
                $scope.NamefilterList = [];
                // $scope.NameList = [];
                // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                    $scope.NameList = data;
                    $scope.NamefilterList = $ff(data, { IsActive: 1 });

                });
            }
        }


        /*Call the api method for insert and Update the record for a Advance Deduction Stop details 
          and display the record of selected Advance Deduction Stop details  when Id is greater than 0
          in edit.html and provide an option for create and modify the Advance Deduction Stop details and save the Advance Deduction Stop details  record*/
        $scope.AdvanceDeduction_AddEdit = function () {
            if ($scope.Validationcontrols() == true) {
                $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                var obj = {
                    Id: $scope.Id,
                    Employee_Id: $scope.EmployeeId,
                     EmployeeAdvanceId: $scope.EmployeeAdvanceId=3,
                    AdvanceTypeId: $scope.Name  == 0 ? null : $scope.Name,
                    StopPeriod_FromMonth_Id: $scope.Stop_FromMonth == 0 ? null : $scope.Stop_FromMonth,
                    StopPeriod_ToMonth_Id: $scope.Stop_ToMonth  == 0 ? null : $scope.Stop_ToMonth,
                    StopPeriod_FromYear_Id: $scope.Stop_FromYear == 0 ? null : $scope.Stop_FromYear,
                    StopPeriod_ToYear_Id: $scope.Stop_ToYear == 0 ? null : $scope.Stop_ToYear,
                    Remarks: $scope.Remarks,
                };

                $http.post(baseUrl + '/api/AdvanceDeductionStop/Advance_AddEdit/', obj).success(function (data) {
                    $scope.AddId = data;
                    var AddId = data;
                    $scope.ListAdvancePopUP($scope.AddId);
                    angular.element('#AdvanceModel').modal('hide');
                    // $scope.CancelPopup();
                    $scope.ClearAdvancePopup();

                    //$scope.Advance_Listsearch();
                    //$scope.CancelPopup();
                    //$scope.ClearAdvancePopup();
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                });
            }
        };

        /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
        $scope.Autolist = [];
        $scope.Autofilterlist = [];
        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
            $scope.Autofilterlist = data;
            $scope.Autolist = data;
        });

        /*THIS IS EMPLOYEENAME DROPDOWN FILTER LIST*/
        $scope.Autocompletefilter = function () {
            if ($scope.IsActive == 1) {

                $scope.Autolist = [];
                $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

            }
            else if ($scope.IsActive == 0) {
                $scope.Autolist = [];
                $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

            }
            else if ($scope.IsActive == -1) {
                $scope.Autolist = [];
                $scope.Autolist = $scope.Autofilterlist;
            }
        };

        /*This is the function for redirect the view page*/
        $scope.ViewRedirect = function () {
            $location.path("/EditAdvance/" + $scope.Id);
        }

        /*This is the function for redirect the list page*/
        $scope.ListRedirect = function () {
            $location.path("/EmployeeAdvanceStopList/" + $scope.Id);
        }
        //$scope.CancelPopup = function () {

        //    angular.element('#AdvanceModel').modal('hide');
        //    angular.element('#AdvanceView').modal('hide');
        //    $scope.ClearAdvancePopup();
        //}


        /*
       Close the pop up window for the view pop up on click cancel button 
       */
        $scope.CancelView = function () {
            angular.element('#AdvanceView').modal('hide');
            $scope.ClearAdvancePopup();
            //  $scope.Advance_Listsearchgo();
        }

        /*
      Close the pop up window for the create and edit pop up on click cancel button 
      */
        $scope.CancelPopup = function () {
            //if ($scope.Id > 0) {
            //    angular.element('#AdvanceModel').modal('hide');
            //    $scope.ClearAdvancePopup();
            //  //  $scope.Advance_Listsearchgo();
            //}

            angular.element('#AdvanceModel').modal('hide');
            $scope.ClearAdvancePopup();
            //  $scope.Company_ListsearchGo();
        }

        /*
        Close the pop up window for the create and edit pop up on click cancel button 
        */
        $scope.CancelPopupButton = function () {
            angular.element('#FyconfigurationModal').modal('hide');
            $scope.ClearPopup();
            //$scope.FyconfigurationListGo();
        }
    }
    ]);

    /* THIS IS FOR EMPLOYEE EMAIL CONFIGURATION CONTROLLER FUNCTION */
    EmpControllers.controller("EmailConfigurationController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
    function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

        // Declaration and initialization of Scope Variables.
        $scope.Id = 0;
        $scope.CompanyName = "0";
        //$scope.CompanyName = "0";
        $scope.SSL_Enable = "0";


        /*clear the company details */
        $scope.clearcompany = function () {
            if ($scope.CompanyName != null) {
                $scope.ClearFields();
            }
        };

        /* 
        the email scope variables */
        $scope.EmailDDL = function (Mail) {
            if ($scope.Mail == 1) {
                $scope.MailView = ' YES';
                //return InterestTypeView;
            }
            else if ($scope.Mail == 2) {
                $scope.MailView = 'NO';
            }
        };

        $scope.EmployeeList = [];

        /*
        Calling the api method to view the details of the email configuration
        for the email configuration Id 
        and display the details in the view pop up window.
        */
        $scope.EmailConfiguration_ViewEdit = function () {
            //if ($routeParams.Id != undefined) {
            //    $scope.Id = $routeParams.Id;

            $scope.ClearFields();
            $http.get(baseUrl + 'api/EmailConfiguration/EmailConfiguration_View/?Id=' + $scope.CompanyName).success(function (data) {
                $scope.Id = data.Id;
                $scope.CompanyName = data.CompanyId.toString();
                $scope.listCompanyName = data.CompanyName;
                $scope.Sender_Email_Id = data.Sender_Email_Id;
                $scope.UserName = data.UserName;
                $scope.Password = data.Password;
                $scope.ServerName = data.ServerName;
                $scope.PortNo = data.PortNo;
                $scope.DisplayName = data.DisplayName;
                $scope.SSL_Enable = data.SSL_Enable.toString();
                $scope.EmailDDL(data.SSL_Enable);
                $scope.Remarks = data.Remarks;

                // $scope.CompanyInactiveFlag = 0;
                // if the current viewing company is inactive
                // set the flag value to 1
                //if (($ff($scope.CompanyList, { Id: $scope.CompanyName, CompanyName: $scope.listCompanyName, Active: 0 }).length) == 1) {
                //    $scope.CompanyInactiveFlag = 1;
                //}
                //$scope.EmailDDL(data.SSL_Enable);
            }).error(function (data) {
                $scope.error = "An error has occcurred while editing Email Configuration Details!" + data;
            });

           //}
        };

        /* Validating the create page mandatory fields not null and email format.
       checking mandatory for the follwing fields sender email id   
       and showing alert message when it is null and not null.
       */
        $scope.validation = function () {
       
            if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                alert("Please select Company");
                return false;
            }
           else if (typeof ($scope.Sender_Email_Id) == "undefined" || $scope.Sender_Email_Id == "") {
                alert("Please enter Sender Email ID");
                return false;
            }
           else if (typeof ($scope.UserName) == "undefined" || $scope.UserName == "") {
               alert("Please enter User Name");
                return false;
            }
           else if (typeof ($scope.Password) == "undefined" || $scope.Password == "") {
               alert("Please enter Password");
                return false;
            }
           else if (typeof ($scope.ServerName) == "undefined" || $scope.ServerName == "") {
               alert("Please enter Server Name(SMTP)");
                return false;
           }
           else if (typeof ($scope.PortNo) == "undefined" || $scope.PortNo == "") {
               alert("Please enter Port No");
               return false;
           }
           else if (typeof ($scope.DisplayName) == "undefined" || $scope.DisplayName == "") {
               alert("Please enter Display Name");
               return false;
           }
           else if (typeof ($scope.SSL_Enable) == "undefined" || $scope.SSL_Enable == 0) {
               alert("Please select SSL Enable");
               return false;
           }
            if (EmailFormate($scope.Sender_Email_Id) == false) {
                alert("Invalid email format");
                return false;
            }

            return true;
        };

    
        $scope.AddSubtract = "0";

        /* 
        Calling api method for the dropdown list in the html page for the fields 
       company name
        */
        $scope.CompanyList = [];
        $scope.CompanyFilterList = [];
        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
            $scope.CompanyList = data;
            $scope.CompanyFilterList = $ff(data, { Active: 1 });
        });

        /* Clear the scope variables */
        $scope.ClearFields = function () {
            //$scope.Id = 0;
            //$scope.CompanyId = "0";
            //$scope.CompanyName = 0;
            $scope.Sender_Email_Id = "";
            $scope.UserName = "";
            $scope.Password = "";
            $scope.ServerName = "";
            $scope.PortNo = "";
            $scope.DisplayName = "";
            $scope.SSL_Enable = "0";
            $scope.Id = "0";
            $scope.Remarks = "";
        }
        $scope.clearcompany = function () {
            $scope.CompanyName ="0";
        }

        // $scope.MasterId = "0";
   
        $scope.loading = false;

        /*Call the api method for insert and Update the record for a email configurations
        and display the record of selected email configurations when Id is greater than 0
        in edit.html and provide an option for create and modify the email configurations and save the email configurations record*/
        $scope.EmailConfiguration_AddEdit = function () {
            if ($scope.validation() == true) {
                //if ($scope.CompanyName == 0) {
                //    alert("Please select Company");
                //}
                //else {

                    var obj = {
                        Id: $scope.Id,
                        CompanyId: $scope.CompanyName == 0 ? null : $scope.CompanyName,
                        Sender_Email_Id: $scope.Sender_Email_Id,
                        UserName: $scope.UserName,
                        Password: $scope.Password,
                        ServerName: $scope.ServerName,
                        PortNo: $scope.PortNo,
                        DisplayName: $scope.DisplayName,
                        SSL_Enable: $scope.SSL_Enable,
                        Remarks:$scope.Remarks
                    };

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    },3000); // 3 second

                    $http.post(baseUrl + '/api/EmailConfiguration/Email_AddEdit/', obj).success(function (data) {

                        alert("Saved Successfully");
                        $scope.ClearFields();
                        $scope.clearcompany();

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                        $location.path("/EditEmailConfiguration/" + data);
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Email Configuration!" + data.ExceptionMessage;
                    });
               // }
            }
        };

        /* This the function for redirect view page */
        $scope.ViewRedirect = function () {
            $location.path("/EmailConfiguration_AddEdit/" + $scope.Id);
        }

        /* This the function for redirect list page */
        $scope.ListRedirect = function () {
            $location.path("/EmailConfiguration/");
        }

    }
    ]);

    /*This is for EmployeeAdvance controller functions*/
    EmpControllers.controller("EmployeeAdvanceController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
    function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {

        // Declaration and initialization of Scope Variables.
        $scope.Id = "0";
        $scope.Company_Name = "0";
        $scope.Employee_Name = '';
        $scope.AdvanceType = "0";
        $scope.EmployeeId = "0";
        $scope.InstallmentStart_Month = "0";
        $scope.InstallmentStart_Year = "0";
        $scope.Status = "0";
        $scope.InterestType = "0";
        $scope.Id = 0;
        $scope.CompanyName = "0";
        $scope.EmployeeList = [];
        $scope.Employee_Id = "0";
        $scope.EmployeeName = '';

        // List Page Pagination.
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }

        $scope.rowCollection = [];
        $scope.emptydata = [];

        /*
        Calling the api method to list the company details for the  filters  company name,status and
        showing the result in table.
        */

        $scope.emptydata = [];
        $scope.rowCollection = [];
        $scope.flag = 0;


        $scope.EmployeeAdvance_Listsearch = function () {

            if ($scope.Employee_Selected != undefined) {
                var EmpName = '';
                EmpName = $scope.Employee_Selected.originalObject.Id;
            }
            $http.get(baseUrl + '/api/EmployeeAdvance/EmployeeAdvance_List/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&Employee_Id=' + EmpName + '&Period_From=' + $scope.Period_From + '&Period_To=' + $scope.Period_To).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }
                //   console.log($scope.rowCollection);

            }).error(function (data) {
                //console.log(data);
                $scope.error = "AN error has occured while deleting OverTime" + data;
            });

        };


        /*THIS IS FOR VALIDATION FUNCTION */
        /* Validating the create page mandatory fields
          checking mandatory for the follwing fields
          employee name,Attendance Date
          and showing alert message when it is null.
          */

        $scope.Validationcontrols = function () {
            if (typeof ($scope.Employee_Name) == "undefined" || $scope.Employee_Selected == undefined) {
                alert("Please select Employee Name");
                return false;
            }
            else if (typeof ($scope.AdvanceType) == "undefined" || $scope.AdvanceType == 0) {
                alert("Please select Advance Type");
                return false;
            }
            else if (typeof ($scope.AdvanceDate) == "undefined" || $scope.AdvanceDate == 0) {
                alert("Please select Attendance Date");
                return false;
            }
            else if (typeof ($scope.AdvanceAmount) == "undefined" || $scope.AdvanceAmount == 0) {
                alert("Please select Advance Amount");
                return false;
            }
            else if (typeof ($scope.InterestType) == "undefined" || $scope.InterestType == 0) {
                alert("Please select Interest Type");
                return false;
            }
            else if (typeof ($scope.Interest_Percentage) == "undefined" || $scope.Interest_Percentage == 0) {
                alert("Please select Interest Percentage");
                return false;
            }
            else if (typeof ($scope.No_of_Installments) == "undefined" || $scope.No_of_Installments == 0) {
                alert("Please select No of Installments");
                return false;
            }
            else if (typeof ($scope.Status) == "undefined" || $scope.Status == 0) {
                alert("Please select Status");
                return false;
            }
            else if (isDate($scope.AdvanceDate) == false) {
                alert("Advance Date is in Invalid format, please enter dd-mm-yyyy");
                return false;
            }

            return true;
        };


        /*THIS IS FOR VALIDATION FUNCTION */
        /* Validating the list page.
          check these field Period From, Period To is invalid
          and showing alert message when it is null.
          */
        $scope.ListValidation = function () {
            var retFlag = true;
            if (isDate($scope.Period_From) == false) {
                alert("Period From is in Invalid format, please enter dd-mm-yyyy");
                return false;
            }
            else if (isDate($scope.Period_To) == false) {
                alert("Period To is in Invalid format, please enter dd-mm-yyyy");
                return false;
            }
            else if (($scope.Period_To != "") && ($scope.Period_From != "")) {
                if ((ParseDate($scope.Period_To) < ParseDate($scope.Period_From))) {
                    alert("From Date should not be greater than To Date");
                    retFlag = false;
                }
            }
            return retFlag;
        };

        /*  Calling api method for the dropdown list in the html page for the fields 
            Company name, month, year,common status, advance type*/


        $scope.MonthList = [];

        //$http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
        //    $scope.CompanyNameList = data;
        //});

        $scope.CompanyFilterList = [];
        $scope.CompanyNameList = [];
        /*Company Master dropdown*/
        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
            // all company records list including active and inactive 
            // used for list page DD and inactive records filtering
            $scope.CompanyFilterList = data;
            // only active company
            $scope.CompanyNameList = $ff(data, { Active: 1 });
        });

        $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
            $scope.MonthList = data;
        });
        $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
            $scope.getYearList = data;
            $scope.getYear = $ff(data, { Active: 1 });
        });
        $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
            $scope.getFyYear = data;

        });
        //$http.get(baseUrl + 'api/Common/GetCommonStatusList/').success(function (data) {
        //    $scope.getCommonStatus = data;

        //});
        $scope.WorkFlowInitialStatus = [];
        $scope.WorkFlowInitialStatusAll = [];
        $scope.Transaction = 'Employee Advance';

        $http.get(baseUrl + 'api/Common/WorkFlow_InitialStatus/?Transaction=' + $scope.Transaction).success(function (data) {           
        
            // all Status records list including active and inactive 
            // used for list page DD and inactive records filtering
            // $scope.WorkFlowInitialStatus = $ff(data, { Status: 'Submitted'});
            $scope.WorkFlowInitialStatus = data;
            
            // only active Status
            $scope.WorkFlowInitialStatusAll = $ff(data, { IsActive: 1 });
        });

        $http.get(baseUrl + 'api/Common/AdvanceTypeList/').success(function (data) {
            $scope.getadvance = data;
        });


        /* Open the create pop up window */
        $scope.AddEmployeeAdvancePopUP = function (OTId) {
            $scope.Id = OTId;
            //  $scope.ViewEmployeeAdvance();
            angular.element('#EmployeeAdvanceModel').modal('show');
        }

        /* Open the view pop up window and show the details for the 
             employee advance matching the specified employee advance Id */
        $scope.ViewEmployeeAdvancePopUP = function (OTId) {
            $scope.Id = OTId;
            $scope.ViewEmployeeAdvance();
            angular.element('#EmployeeModelView').modal('show');
        }

        /* Open the edit pop up window and show the details for the 
            employee advance matching the specified employee advance Id */
        $scope.EditEmployeeAdvancePopUP = function (OTId) {
            $scope.Id = OTId;
            $scope.ViewEmployeeAdvance();
            angular.element('#EmployeeAdvanceModel').modal('show');
        }

        /* List page pop up function */
        $scope.ListEmployeeAdvancePopUP = function (OTId) {
            //if ($routeParams.Id == 0) {
            //    $scope.rowCollection = [];
            //}
            //if ($scope.Id == 0 && $scope.Mode == 1) {

            //    $scope.EmployeeAdvance_Listsearch();
            //}
            //else if ($scope.Id > 0 && $scope.Mode == 1) {

            //    $scope.EmployeeAdvance_Listsearch();
            //}
            //if (OTId > 0) {
            $scope.Id = OTId;
            $scope.EmployeeAdvance_Listsearch();

            // }
        };

        /*
     Calling the api method to view the details of the employee advance
     for the employee advance Id 
     and display the details in the view pop up window.
     */
        $scope.ViewEmployeeAdvance = function () {

            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
            }

            $http.get(baseUrl + 'api/EmployeeAdvance/EmployeeAdvance_View/?Id=' + $scope.Id).success(function (data) {

                $scope.Employee_Id = data.Employee_Id;
                $scope.Employee_No = data.Employee_No;
                $scope.Employee_Name = data.Employee_Name;
                $scope.AdvanceType = data.AdvanceType_Id.toString();
                $scope.ViewAdvanceType = data.AdvanceType;
                $scope.AdvanceDate = $filter('date')(data.AdvanceDate, "dd-MMM-yyyy");
                $scope.AdvanceAmount = data.AdvanceAmount;
                $scope.InterestType = data.InterestType.toString();
                $scope.InterestTypeDDL(data.InterestType);
                $scope.No_of_Installments = data.No_of_Installments;
                $scope.Interest_Percentage = data.Interest_Percentage;
                $scope.EMI = data.EMI;
                $scope.InstallmentStart_Month = data.InstallmentStart_MonthId.toString();
                $scope.ViewInstallmentStart_Month = data.InstallmentStart_Month;
                $scope.InstallmentStart_Year = data.InstallmentStart_YearId.toString();
                $scope.ViewInstallmentStart_Year = data.InstallmentStart_Year;
                $scope.Remarks = data.Remarks;
                $scope.Status = data.Status_Id.toString();
                $scope.ViewStatus = data.Status;
                $scope.FullNamelist = data.FullNamelist;


                var sel = {
                    Id: data.Employee_Id,
                    FullName: data.FullName,
                    FullNamelist: data.FullNamelist
                };
                $scope.DisplayFullName = sel;

                $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);


                $scope.CompanyInactiveFlag = 0;

                // if the current viewing company is inactive
                // set the flag value to 1
                if (($ff($scope.CompanyFilterList, { Id: $scope.Company_Name, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                    $scope.CompanyInactiveFlag = 1;
                }

                //console.log(data);
            }).error(function (data) {
                $scope.error = "AN error has occured while list Countryname!" + data;
            });

        };

        /* To show the employee code at the time of employee selection */
        $scope.AttendanceEmployeeNameList = function () {
            var EmployeeNo = '';
            if ($scope.Employee_Selected != undefined) {
                $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                    $scope.Employee_No = data.Employee_No;

                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };
        };




        $scope.Id = "0";
        $scope.Company_Name = "0";

        /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
        $scope.NameList = [];
        $scope.NamefilterList = [];
        $scope.EmployeeAttendancelist = function () {
            // $scope.autocompleteclear();
            if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                $scope.NameList = [];
                $scope.NamefilterList = [];
                // $scope.NameList = [];
                // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                    $scope.NameList = data;
                    $scope.NamefilterList = $ff(data, { IsActive: 1 });

                });
            }
        }



        /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
        $scope.EmployeeAdvance_Listsearchgo = function () {
            if ($scope.ListValidation() == true) {
                $scope.Id = 0;
                //var ListId = $scope.Id;
                //$scope.ListEmployeeAdvancePopUP(ListId);
                $scope.Mode = 1;
                $scope.EmployeeAdvance_Listsearch($scope.Id, $scope.Mode);
            }
        };




        /* THIS IS FOR DELETE FUNCTION */
        $scope.DeleteEmployeeAdvance = function (LRId) {
            $scope.Id = LRId;
            $scope.EmployeeAdvanceList_Delete();
        };


        /* 
       Calling the api method to detele the details of the employee advance 
       for the  employee advance Id,
       and redirected to the list page.
       */
        $scope.EmployeeAdvanceList_Delete = function () {
            var del = confirm("Do you like to inactivate the selected employee advance details?");
            if (del == true) {
                $http.get(baseUrl + 'api/EmployeeAdvance/EmployeeAdvance_Delete/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected employee advance details has been inactivated successfully");
                    $scope.EmployeeAdvance_Listsearchgo();
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Employeedetails" + data;
                });
            }
        };


        /*ReInsert popup function*/
        $scope.ActiveEmployeeAdvance = function (LRId) {
            $scope.Id = LRId;
            $scope.EmployeeAdvanceList_Active();
        };


        /* 
       Calling the api method to inactived the details of the employee advance  
       for the  employee advance  Id,
       and redirected to the list page.
       */
        $scope.EmployeeAdvanceList_Active = function () {
            var del = confirm("Do you like to activate the selected employee advance details?");
            if (del == true) {
                $http.get(baseUrl + 'api/EmployeeAdvance/EmployeeAdvance_Active/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected employee advance details has been activated successfully");
                    $scope.EmployeeAdvance_Listsearchgo();
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Employeedetails" + data;
                });
            }
        };



        /* THIS IS FOR CLEAR POPUP FUNCTION */
        $scope.ClearEmployeeAdvancePopup = function () {
            $scope.Employee_No = "";
            $scope.Employee_Name = "";
            $scope.AdvanceType = "0";
            $scope.AdvanceDate = "";
            $scope.AdvanceAmount = "";
            $scope.InterestType = "0";
            $scope.No_of_Installments = "";
            $scope.Interest_Percentage = "";
            $scope.EMI = "";
            $scope.InstallmentStart_Month = "0";
            $scope.InstallmentStart_Year = "0";
            $scope.Status = "0";
            $scope.Remarks = "";
            $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
        };


        /*THIS IS FOR EDIT FUNCITON */
        $scope.ErrorFunction = function () {
            alert("Inactive record cannot be edited");
        }

        /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
        $scope.autocompleteclear = function () {
            $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            $scope.Employee_No = "";
            //$scope.CompanyName = "0";
            // $scope.Autolist = [];
        };

        /*
      Close the pop up window for the view pop up on click cancel button 
      */
        $scope.CancelView = function () {
            angular.element('#EmployeeModelView').modal('hide');
            $scope.ClearEmployeeAdvancePopup();
            //$scope.EmployeeAdvance_Listsearchgo();
        }

        /*
       Close the pop up window for the create and edit pop up on click cancel button 
       */
        $scope.CancelPopup = function () {
            //if ($scope.Id > 0) {
            //    angular.element('#EmployeeAdvanceModel').modal('hide');
            //    $scope.ClearOverTimePopup();
            //    $scope.EmployeeAdvance_Listsearchgo();
            //}

            angular.element('#EmployeeAdvanceModel').modal('hide');
            $scope.ClearEmployeeAdvancePopup();
            //  $scope.Company_ListsearchGo();


        }
        //$scope.CancelPopupButton = function () {
        //    angular.element('#EmployeeAdvanceModel').modal('hide');
        //    $scope.ClearEmployeeAdvancePopup();
        //   // $scope.FyconfigurationListGo();
        //}

        // $scope.Employee_Id = $window.localStorage['UserId'];


        /*Call the api method for insert and Update the record for a employee advance
          and display the record of selected employee advance when Id is greater than 0
          in edit.html and provide an option for create and modify the employee advance and save the employee advance record*/
        $scope.EmployeeAdvance_AddEdit = function () {
            if ($scope.Validationcontrols() == true) {
                $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                var obj = {
                    Id: $scope.Id,
                    Employee_Id: $scope.EmployeeId,
                    AdvanceType_Id: $scope.AdvanceType == 0 ? null : $scope.AdvanceType,
                    AdvanceDate: $scope.AdvanceDate  == '' ? null : $scope.AdvanceDate,
                    AdvanceAmount: $scope.AdvanceAmount == 0 ? null : $scope.AdvanceAmount,
                    InterestType: $scope.InterestType == 0 ? null : $scope.InterestType,
                    No_of_Installments: $scope.No_of_Installments  == 0 ? null : $scope.No_of_Installments,
                    Interest_Percentage: $scope.Interest_Percentage  == 0 ? null : $scope.Interest_Percentage,
                    EMI: $scope.EMI  == 0 ? null : $scope.EMI,
                    InstallmentStart_MonthId: $scope.InstallmentStart_Month == 0 ? null : $scope.InstallmentStart_Month,
                    InstallmentStart_YearId: $scope.InstallmentStart_Year == 0 ? null : $scope.InstallmentStart_Year,
                    Status_Id: $scope.Status == 0 ? null : $scope.Status,
                    Remarks: $scope.Remarks,
                };
                $http.post(baseUrl + '/api/EmployeeAdvance/EmployeeAdvance_AddEdit/', obj).success(function (data) {
                    $scope.AddId = data;
                    var AddId = data;
                    $scope.ListEmployeeAdvancePopUP($scope.AddId);
                    angular.element('#EmployeeAdvanceModel').modal('hide');
                    // $scope.CancelPopup();
                    $scope.ClearEmployeeAdvancePopup();
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                });
            }
        };


        /*
    This is the function for employee filtred on company 
    */
        $scope.Autolist = [];
        $scope.Autofilterlist = [];
        $scope.Company_Name = "0";
        $scope.Autocompletefilters = function () {
            if ($scope.Autolist != undefined) {
                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                    $scope.Autofilterlist = data;
                    $scope.Autolist = data;
                });
            }
        };

        /*THIS IS EMPLOYEENAME FILTER LIST*/
        $scope.Autocompletefilter = function () {
            if ($scope.IsActive == 1) {

                $scope.Autolist = [];
                $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

            }
            else if ($scope.IsActive == 0) {
                $scope.Autolist = [];
                $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

            }
            else if ($scope.IsActive == -1) {
                $scope.Autolist = [];
                $scope.Autolist = $scope.Autofilterlist;
            }
        };

        /*
        This is the function for redirect the view page
        */
        $scope.ViewRedirect = function () {
            //$location.path("/EditCompany/" + $scope.Id);
            $location.path("/EditOverTime/" + $scope.Id);
        }

        /*
      This is the function for redirect the list page
      */
        $scope.ListRedirect = function () {
            //$location.path("/ListCompany");
            $location.path("/OverTimeList" + $scope.Id);
        }
        //$scope.CancelPopup = function () {

        //    angular.element('#EmployeeAdvanceModel').modal('hide');
        //    angular.element('#EmployeeModelView').modal('hide');
        //    $scope.ClearOverTimePopup();
        //}


        /*
      This is the function for dropdown interest values
      */
        $scope.InterestTypeDDL = function (InterestType) {

            if ($scope.InterestType == 1) {
                $scope.InterestTypeView = 'No Interest';


            }
            else if ($scope.InterestType == 2) {
                $scope.InterestTypeView = 'Simple Interest';
                //  return InterestTypeView;
            }
            else if ($scope.InterestType == 3) {
                $scope.InterestTypeView = 'Reducing Balance';
                // return InterestTypeView;
            }
        };


        /*
      This is the function for EMI calculations
      */
        $scope.EMIValue = function () {

            var Int_Type = $scope.InterestType;          /*Interest 1. No Interest 2.Simple Interest 3. Compound interest */
            var Principle = $scope.AdvanceAmount;        /* Principle Amount */
            var No = $scope.No_of_Installments;          /* No of Installments */
            var Rate_Int = $scope.Interest_Percentage;   /*Interest Percentage */

            /* Where the interest type is No interest the emi is calculated as principle / no */

            if (Int_Type == 1) {

                /* Emi is calculated with no interest principle amount is divided by No of installments */

                var Emi = (Principle / No);
                $scope.EMI = parseFloat(Emi.toFixed(2));
                $scope.Interest_Percentage = 0;/* parseFloat is to fiX the variable value to the scope variable in a float value */
                /*    and toFixed is used to round of the value into two decimal format */
            }


                /* Where the interest type is Simple interest the emi is calculated PNR /100 */

            else if (Int_Type == 2) {

                var YearlyInterest = Principle * (Rate_Int / 100);             /* 1.Finding the Yearly interest with the formula (P * R/100 ) */
                var MonthlyInterest = YearlyInterest / 12;                     /* 2.Finding tye monthly interest by formula       ( TOTInterest / 12) */
                var TotInterest = No * MonthlyInterest;                        /* 3.Finding the TotalEmi by multiplying the no of instalments and the Monthlyinterest calculated */
                var TotAmt = parseInt(Principle) + parseInt(TotInterest);      /* 4.Finding the TotalAmount by adding the principle amount and the totalinterest calculated */
                var Emi = (Principle / No) + parseInt(MonthlyInterest);        /* 5.Findint the EMI for a month by diving the principle and no of installment and have to add the monthly interest amount calculated */
                $scope.EMI = parseFloat(Emi.toFixed(2));

            }
                /* Where the interest type is Simple interest the emi is calculated  (p* Math.pow((1 + (r/(n*100))), (n*t))); */
            else if (Int_Type == 3) {

                var monthlyInterestRatio = (Rate_Int / 100) / 12;      /*  1.Finding the monthly interest with the formula (R/100/12 ) */
                var top = Math.pow((1 + monthlyInterestRatio), No);    /*  2.Finding the numerator value using the Math.pow funtion */
                var bottom = top - 1;                                   /* 3.Emi is calculated using the formula  */
                var sp = top / bottom;
                var emi = ((Principle * monthlyInterestRatio) * sp);  /* Total Emi per Month */

                $scope.EMI = parseFloat(emi.toFixed(2));

            }

        };

    }
    ]);

    //This is for Employee Advance Preclosure Controller functions//
    EmpControllers.controller("AdvancePreclosureController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {


            // List Page Pagination.
            $scope.Id = "0";
            $scope.Id = 0;
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }
            $scope.listdata = [];

            /* Validating the create page mandatory fields
               checking mandatory for the follwing fields
               Period From,Period To
               and showing alert message when it is null.
            */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.Employee_Name) == "undefined" || $scope.Employee_Selected == undefined) {
                    alert("Please select Employee Name");
                    return false;
                }
                else if (typeof ($scope.AdvanceType) == "undefined" || $scope.AdvanceType == 0) {
                    alert("Please select AdvanceType ");
                    return false;
                }
                else if (typeof ($scope.PreclosureDate) == "undefined" || $scope.PreclosureDate == 0) {
                    alert("Please select Preclosure Date ");
                    return false;
                }
                else if (typeof ($scope.PreclosureAmount) == "undefined" || $scope.PreclosureAmount == 0) {
                    alert("Please enter Preclosure Amount");
                    return false;
                }
                else if (typeof ($scope.Name) == "undefined" || $scope.Name == 0) {
                    alert("Please select Preclosure Type");
                    return false;
                }
               else if (parseInt($scope.Period_To) < parseInt($scope.Period_From)) {
                    alert("Please enter advance preclosure to year greater than advance preclosure From Year");
                    return false;
                }
                else if (isDate($scope.Period_From) == false) {
                    alert("Period From is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Period_To) == false) {
                    alert("Period To is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            };

            $scope.Validationcontrolslist = function () {
                if (parseInt($scope.Period_To) < parseInt($scope.Period_From)) {
                    alert("Please enter advance preclosure to year greater than advance preclosure From Year");
                    return false;
                }
                else if (isDate($scope.Period_From) == false) {
                    alert("Period From is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Period_To) == false) {
                    alert("Period To is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            };

            // Declaration and initialization of Scope Variables.
            $scope.CompanyId = "0";
            $scope.Company_Name = "0";

            $scope.Period_From = "0";
            $scope.Period_To = "0";
            $scope.EmployeeName = '';

            /* Open the create pop up window */
            $scope.AddAdvancePreclosurePopUP = function (PreclosureId) {
                $scope.Id = PreclosureId;
                // $scope.ViewAdvancePreclosureDetails();
                angular.element('#AdvancePreclosureModal').modal('show');
            }

            /* Open the view pop up window and show the details for the advance preclosure for the  advance preclosure Id */
            $scope.ViewAdvancePreclosurePopUP = function (PreclosureId) {
                $scope.Id = PreclosureId;
                $scope.ViewAdvancePreclosureDetails();
                angular.element('#AdvancePreclosureViewModal').modal('show');
            }

            /* Open the edit pop up window and show the details for the advance preclosure for the  advance preclosure Id */
            $scope.EditAdvancePreclosurePopUP = function (PreclosureId) {
                $scope.Id = PreclosureId;
                $scope.ViewAdvancePreclosureDetails();
                angular.element('#AdvancePreclosureModal').modal('show');
            }

            /*calling list function */
            $scope.ListAdvancePreclosurePopUP = function (PFESIId) {

                //if ($routeParams.Id == 0) {
                //    $scope.rowCollection = [];
                //}
                //if ($scope.Id == 0 && $scope.Mode == 1) {

                //    $scope.EmpAdvancePreclosureList();
                //}
                //else if ($scope.Id > 0 && $scope.Mode == 1) {

                //    $scope.EmpAdvancePreclosureList();
                //}
                //if (PFESIId > 0) {
                $scope.Id = PFESIId;
                $scope.EmpAdvancePreclosureList();
                // angular.element('#PFandESIModel').modal('show');
                //}
            }

            /*
           Calling the api method to view the details of the advance preclosure
           for the advance preclosure Id 
           and display the details in the view pop up window.
           */
            $scope.ViewAdvancePreclosureDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/AdvancePreclosure/AdvancePreclosure_View/?Id=' + $scope.Id).success(function (data) {

                    $scope.Employee_Id = data.Employee_Id;
                    $scope.Employee_No = data.Employee_No;
                    $scope.Employee_Name = data.Employee_Name;
                    $scope.AdvanceType = data.AdvanceType_Id.toString();
                    $scope.listAdvanceType = data.AdvanceType;
                    $scope.PreclosureDate = $filter('date')(data.PreclosureDate, "dd-MMM-yyyy");
                    $scope.PreclosureAmount = data.PreclosureAmount;
                    $scope.Name = data.PreclosureType_Id.toString();
                    $scope.ListName = data.Name;
                    $scope.BankName = data.BankName;
                    $scope.ChequeNo = data.ChequeNo;
                    $scope.ChequeDate = $filter('date')(data.ChequeDate, "dd-MMM-yyyy");
                    $scope.Remarks = data.Remarks;
                    $scope.FullNamelist = data.FullNamelist;

                    var sel = {
                        Id: data.Employee_Id,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;

                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Advance Preclosure details!" + data;
                });
            };

            $scope.AdvanceType = "0";
            $scope.Name = "0";


            /* 
            Calling api method for the dropdown list in the html page for the fields 
            Advance type and preclosure type
            */
            $http.get(baseUrl + 'api/Common/AdvanceTypeList/').success(function (data) {
                $scope.AdvanceTypeList = data;
            });

            $http.get(baseUrl + 'api/Common/PreclosureTypeList/').success(function (data) {
                $scope.PreclosureTypeList = data;
            });


            /*THIS IS FOR DELETE FUNCITON */
            $scope.DeleteAdvancePreclosure = function (LRId) {
                $scope.Id = LRId;
                $scope.DeleteAdvancePreclosureDetails();
            };

            /* 
            Calling the api method to detele the details of the advance preclosure 
            for the advance preclosure Id,
            and redirected to the list page.
            */
            $scope.DeleteAdvancePreclosureDetails = function () {
                var del = confirm("Do you like to inactivate the selected Advance Preclosure Details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/AdvancePreclosure/AdvancePreclosure_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected Advance Preclosure Details has been inactivated successfully");
                        $scope.EmpAdvancePreclosureListGo();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Advance Preclosure details" + data;
                    });
                }
            };

            /*THIS IS FOR ACTIVE FUNCITON */
            $scope.ActiveAdvancePreclosure = function (LRId) {
                $scope.Id = LRId;
                $scope.ActiveAdvancePreclosureDetails();
            };

            /* 
           Calling the api method to inactived the details of advance preclosure 
           for the  advance preclosure Id,
           and redirected to the list page.
           */
            $scope.ActiveAdvancePreclosureDetails = function () {
                var del = confirm("Do you like to activate the selected Advance Preclosure Details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/AdvancePreclosure/AdvancePreclosure_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected Advance Preclosure Details has been activated successfully");
                        $scope.EmpAdvancePreclosureListGo();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Advance Preclosure details" + data;
                    });
                }
            };


            /* Clear the create page scope variable values.*/
            $scope.ClearAdvancePreclosurePopup = function () {

                $scope.Employee_Id = "";
                $scope.Employee_Name = "";
                $scope.AdvanceType = "0";
                //$scope.AdvanceType_Id = "0";
                //$scope.PreclosureType_Id = "0";
                $scope.PreclosureDate = "";
                $scope.PreclosureAmount = "";
                $scope.Name = "0";
                $scope.BankName = '';
                $scope.ChequeNo = "";
                $scope.ChequeDate = "";
                $scope.Remarks = '';
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
            };

            $scope.Name=0;
            $scope.DuplicatedId=0;
            $scope.EmployeeId='';
            $scope.AdvanceType ='';
            $scope.PreclosureDate ='';


            /*
            Call the api method for insert and Update the record for a advance preclosure 
            and display the record of selected advance preclosure when Id is greater than 0
            in edit.html and provide an option for create and modify the advance preclosure and save the advance preclosure record
            */
            $scope.AdvancePreclosure_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
               
                    if ($scope.Employee_Selected != undefined) {                   
                        $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                    }
                    else {                 

                        $scope.EmployeeId = null;
                    }
                    //console.log($scope.DuplicatedId);
                    //$http.get(baseUrl + '/api/AdvancePreclosure/AdvancePreclosure_AddEdit/?Id=' + $scope.DuplicatedId + '&Employee_Id=' + $scope.EmployeeId + '&AdvanceType_Id=' + $scope.AdvanceType + '&PreclosureDate=' + $scope.PreclosureDate).success(function (data) {

                    //    if (data == 1) {

                    //        alert("Employee Advance Preclosure is already exists, cannot duplicate");
                    //        return false;
                    //    }
                    //    else {
                 //   $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                    var obj = {
                        Id: $scope.Id,
                        Employee_Id: $scope.EmployeeId == 0 ? null : $scope.EmployeeId,
                        AdvanceType_Id: $scope.AdvanceType == 0 ? null : $scope.AdvanceType,
                        PreclosureDate: $scope.PreclosureDate == '' ? null : $scope.PreclosureDate,
                        PreclosureAmount: $scope.PreclosureAmount == 0 ? null : $scope.PreclosureAmount,
                        PreclosureType_Id: $scope.Name == 0 ? null : $scope.Name,
                        BankName: $scope.BankName == 0 ? null : $scope.BankName,
                        ChequeNo: $scope.ChequeNo == 0 ? null : $scope.ChequeNo,
                        ChequeDate: $scope.ChequeDate == '' ? null : $scope.ChequeDate,
                        Remarks: $scope.Remarks == 0 ? null : $scope.Remarks,
                    };
         
              
                    $http.post(baseUrl + '/api/AdvancePreclosure/AdvancePreclosure_AddEdit/', obj).success(function (data) {

                        $scope.AddId = data;
                        var AddId = data;
                        $scope.ListAdvancePreclosurePopUP($scope.AddId);
                        angular.element('#AdvancePreclosureModal').modal('hide');
                        // $scope.CancelPopup();
                        $scope.ClearAdvancePreclosurePopup();

                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Advance Preclosure details!" + data.ExceptionMessage;
                    });
                        }
                    //})
                //}
            };

            $scope.Period_From = "";
            $scope.Period_To = "";
            $scope.Id = 0;


            /*THIS IS FOR EDIT FUNCITON */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            /*THIS IS EMPLOYEE NAME CLEAR LIST*/
            $scope.autocompleteclear = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
                //$scope.CompanyName = "0";
                $scope.Autolist = [];
            };

            $scope.flag = 0;
            $scope.Company_Name = "0";
            $scope.Employee_Name = "";
            $scope.emptydata = [];
            $scope.rowCollection = [];

            /*
           Calling the api method to list the advance preclosure details for the  filters  employee name, period from, period to and
           showing the result in table.
           */

            $scope.EmpAdvancePreclosureList = function () {
                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.Id;
                };
                $http.get(baseUrl + 'api/AdvancePreclosure/AdvancePreclosureList/?Id=' + $scope.Id + '&Employee_Id=' + EmpName + '&Period_From=' + $scope.Period_From + '&Period_To=' + $scope.Period_To).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            }


            /* To show the employee code at the time of employee selection */
            $scope.AttendanceEmployeeNameList = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                        $scope.Employee_No = data.Employee_No;

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };

            $scope.Id = "0";
            $scope.Company_Name = "0";

            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            $scope.NameList = [];
            $scope.NamefilterList = [];
            $scope.EmployeeAttendancelist = function () {
                // $scope.autocompleteclear();
                if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                    // $scope.NameList = [];
                    // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            }

            /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                $scope.Autofilterlist = data;
                $scope.Autolist = data;
            });

            /*THIS IS EMPLOYEENAME FILTER LIST*/
            $scope.Autocompletefilter = function () {
                if ($scope.IsActive == 1) {

                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                }
                else if ($scope.IsActive == 0) {
                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                }
                else if ($scope.IsActive == -1) {
                    $scope.Autolist = [];
                    $scope.Autolist = $scope.Autofilterlist;
                }
            };



            /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
            $scope.EmpAdvancePreclosureListGo = function () {
                if ($scope.Validationcontrolslist() == true) {
                    $scope.Id = 0;
                    var ListId = $scope.Id;
                    //$scope.ListAdvancePreclosurePopUP(ListId);
                    $scope.Mode = 1;
                    $scope.EmpAdvancePreclosureList($scope.Id, $scope.Mode);
                }
            };


            /*Redirect the view function*/
            $scope.ViewRedirect = function () {
                $location.path("/AdvancePreclosureEdit/" + $scope.Id);
            }

            /*Redirect the list function*/
            $scope.ListRedirect = function () {
                $location.path("/AdvancePreclosureList/" + $scope.Id);
            }

            //$scope.CancelPopup = function () {
            //    angular.element('#AdvancePreclosureViewModal').modal('hide');
            //    angular.element('#AdvancePreclosureModal').modal('hide');
            //    $scope.ClearAdvancePreclosurePopup();
            //};

            $scope.rowCollection = [];


            /*
           Close the pop up window for the view pop up on click cancel button 
           */
            $scope.CancelView = function () {
                angular.element('#AdvancePreclosureViewModal').modal('hide');
                $scope.ClearAdvancePreclosurePopup();
                // $scope.EmpAdvancePreclosureListGo();
            }

            /*
          Close the pop up window for the create and edit pop up on click cancel button 
          */
            $scope.CancelPopup = function () {
                //if ($scope.Id > 0) {
                //    angular.element('#AdvancePreclosureModal').modal('hide');
                //    $scope.ClearAdvancePreclosurePopup();
                //    $scope.EmpAdvancePreclosureListGo();
                //}

                angular.element('#AdvancePreclosureModal').modal('hide');
                $scope.ClearAdvancePreclosurePopup();
                //  $scope.Company_ListsearchGo();


            }

            /*
          Close the pop up window for add/edit page 
          */
            $scope.CancelPopupButton = function () {
                angular.element('#FyconfigurationModal').modal('hide');
                $scope.ClearPopup();
                $scope.FyconfigurationListGo();
            }

            /*
           Close the pop up window for view page 
           */
            $scope.CancelPopupView = function () {
                angular.element('#AdvancePreclosureViewModal').modal('hide');
                $scope.ClearAdvancePreclosurePopup();
            };
        }
    ]);

    //This is for Employee EMI Override controller functions//
    EmpControllers.controller("EMIOverrideController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {

            // Declaration and initialization of Scope Variables.
            $scope.Id = 0;
            //$scope.FullName = '';
            $scope.Full_Name = '';
            $scope.Name = "0";
            $scope.AdvanceType = "0";
            $scope.FromMonth = "0";
            $scope.FromYear = "0";
            $scope.ToMonth = "0";
            $scope.ToYear = "0";
            $scope.Stop_FromYear = "0";
            $scope.Stop_ToYear = "0";
            $scope.AdvanceType = "0";

            // List Page Pagination.
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.rowCollection = [];



            /*  Calling api method for the dropdown list in the html page for the fields 
                advance type,from year list,to year list,month list, group by from year,group by to year */
            /* Advance Type List */
            $scope.AdvanceTypeList = [];
            $http.get(baseUrl + 'api/Common/AdvanceTypeList/').success(function (data) {
                $scope.AdvanceTypeList = data;
            });

            /* From Year List */
            $scope.FromYearList = [];
            $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
                $scope.FromYearList = data;
            });

            /* To Year List */
            $scope.ToYearList = [];
            $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                $scope.ToYearList = data;
            });

            /* Month List */
            $scope.MonthList = [];
            $http.get(baseUrl + 'api/Common/GetMonthList/').success(function (data) {
                $scope.MonthList = data;
            });

            /*FINANCIAL GROUP BY FROM YEAR*/
            $http.get(baseUrl + 'api/Common/GroupBy_FromYear/').success(function (data) {
                $scope.GroupFromYear = data;
            });
            /*FINANCIAL GROUP BY TO YEAR*/
            $http.get(baseUrl + 'api/Common/GroupBy_ToYear/').success(function (data) {
                $scope.GroupToYear = data;
            });

            /* Validating the create page mandatory fields
              checking mandatory for the follwing fields
              employee name
              and showing alert message when it is null.
              */
            $scope.Validationcontrols = function () {
                /*   if (typeof ($scope.Category) == "undefined" || $scope.Category == 0) {
                       alert("Please select Category");
                       return Category;
                   }
                   else if (typeof ($scope.Skill) == "undefined" || $scope.Skill == "") {
                       alert("Please Enter Skill");
                       return Skill;
                   } */
                if (typeof ($scope.Employee_Name) == "undefined" || $scope.Employee_Selected == undefined) {
                    alert("Please select Employee Name");
                    return false;
                }
                else if (typeof ($scope.Name) == "undefined" || $scope.Name == 0) {
                    alert("Please select Advance Type");
                    return Category;
                }
                else if (typeof ($scope.FromMonth) == "undefined" || $scope.FromMonth == 0) {
                    alert("Please select Prepayment Period From Month");
                    return Category;
                }
                else if (typeof ($scope.FromYear) == "undefined" || $scope.FromYear == 0) {
                    alert("Please select Prepayment Period From Year");
                    return Category;
                }
                else if (typeof ($scope.ToMonth) == "undefined" || $scope.ToMonth == 0) {
                    alert("Please select Prepayment Period To Month");
                    return Category;
                }
                else if (typeof ($scope.ToYear) == "undefined" || $scope.ToYear == 0) {
                    alert("Please select Prepayment Period To Year");
                    return Category;
                }
                else if (typeof ($scope.PrepaymentAmount) == "undefined" || $scope.PrepaymentAmount == 0) {
                    alert("Please select Prepayment Amount");
                    return Category;
                }
                else if (parseInt($scope.ToYear) < parseInt($scope.FromYear)) {
                    alert("Please enter EMI override to year greater than EMI override From Year");
                    return ToYear;
                }
            };

            $scope.flag = 0;
            $scope.Company_Name = "0";
            $scope.Employee_Name = "";
            $scope.emptydata = [];
            $scope.rowCollection = [];


            /*
            Calling the api method to list the emi override details matching the specified filters employee name, advance type
            showing the result in table.
            */
            $scope.EMIOverrideList_Search = function () {
                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.Id;
                };
                $http.get(baseUrl + '/api/EMIOverride/EMIOverride_List/?Id=' + $scope.Id + '&Employee_Id=' + EmpName + '&AdvanceTypeId=' + $scope.AdvanceType).success(function (data) {
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing EMI Override Details!" + data;
                });
            };

            /* on click Go calling the list function.*/
            $scope.EMIOverrideList_Go = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                //$scope.ListEMIOverridePopUP(ListId);
                $scope.Mode = 1;
                $scope.EMIOverrideList_Search($scope.Id, $scope.Mode);
            };

            /* Clear the create page scope variable values. */
            $scope.ClearEMIOverridePopup = function () {
                $scope.Employee_No = "";
                $scope.FullName = "";
                $scope.Name = "0";
                $scope.AdvanceType = "0";
                $scope.EmpAdvanceId = "0";
                $scope.FromMonth = "0";
                $scope.FromYear = "0";
                $scope.ToMonth = "0";
                $scope.ToYear = "0";
                $scope.PrepaymentAmount = "";
                $scope.Remarks = "";
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            };

            /* Open the create pop up window */
            $scope.AddEMIOverridePopUP = function (CatId) {
                $scope.Id = CatId;
                //$scope.ViewEMIOverrideDetails();
                angular.element('#CreateModal').modal('show');
            };

            /* Open the view pop up window and show the details for the 
              emi override matching the specified emi override Id */
            $scope.ViewEMIOverridePopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewEMIOverrideDetails();
                angular.element('#ViewModal').modal('show');
            };

            /* Open the edit pop up window and show the details for the 
             emi override matching the specified emi override Id */
            $scope.EditEMIOverridePopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewEMIOverrideDetails();
                angular.element('#CreateModal').modal('show');
            };

            /* List page pop up function */
            $scope.ListEMIOverridePopUP = function (CatId) {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.EMIOverrideList_Search();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.EMIOverrideList_Search();
                }
                if (CatId > 0) {
                    $scope.Id = CatId;
                    $scope.EMIOverrideList_Search();
                }
            };

            //Delete popup function// 
            $scope.DeleteEMIOverride = function (LRId) {
                $scope.Id = LRId;
                $scope.EMIOverrideDelete();
            };


            /* 
        Calling the api method to detele the details of the emi override  details
        for the   emi override Id,
        and redirected to the list page.
        */
            $scope.EMIOverrideDelete = function () {
                var del = confirm("Do you like to inactivate the selected emi override details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EMIOverride/EMIOverride_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected emi override details has been inactivated successfully");
                        $scope.EMIOverrideList_Go();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting EMI Override" + data;
                    });
                }
            };

            /*ReInsert popup function*/
            $scope.ActiveEMIOverride = function (LRId) {
                $scope.Id = LRId;
                $scope.EMIOverrideActive();
            };


            /*calling Alert function for cannot edit inactive record */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            /* 
        Calling the api method to inactived the details of the emi override  details 
        for the  emi override Id,
        and redirected to the list page.
        */
            $scope.EMIOverrideActive = function () {
                var del = confirm("Do you like to activate the selected emi override details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EMIOverride/EMIOverride_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected emi overide details has been activated successfully");
                        $scope.EMIOverrideList_Go();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting EMI Override" + data;
                    });
                }
            };


            /*
       Calling the api method to view the details of the emi override  details 
       for the emi override Id 
       and display the details in the view pop up window.
       */
            $scope.ViewEMIOverrideDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/EMIOverride/GetEMIOverride_ById/?Id=' + $scope.Id).success(function (data) {
                    $scope.Employee_Id = data.Employee_Id;
                    $scope.Employee_No = data.Employee_No;
                    $scope.FullName = data.FullName;
                    $scope.Name = data.AdvanceTypeId.toString();
                    $scope.ViewName = data.Name;
                    $scope.EmpAdvanceId = data.EmpAdvanceId;
                    $scope.FromMonth = data.FromMonthId.toString();
                    $scope.ViewFromMonth = data.FromMonth;
                    $scope.FromYear = data.FromYearId.toString();
                    $scope.ViewFromYear = data.FromYear;
                    $scope.ToMonth = data.ToMonthId.toString();
                    $scope.ViewToMonth = data.ToMonth;
                    $scope.ToYear = data.ToYearId.toString();
                    $scope.ViewToYear = data.ToYear;
                    $scope.PrepaymentAmount = data.PrepaymentAmount;
                    $scope.Remarks = data.Remarks;

                    var sel = {
                        Id: data.Employee_Id,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;

                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing EMI Override Details!" + data;
                });
            };

            //  $scope.EmpAdvanceId = 3;
            //This is the values to create page 
            $scope.EMIOverride_AddEdit = function () {
                //   if ($scope.Validationcontrols() == true) {
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                }
                else {
                    $scope.EmployeeId = null;
                }
               // $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                var obj = {
                    Id: $scope.Id,
                    Employee_Id: $scope.EmployeeId,
                    AdvanceTypeId: $scope.Name == 0 ? null : $scope.Name,
                    //EmpAdvanceId: $scope.EmpAdvanceId,
                    FromMonthId: $scope.FromMonth == 0 ? null : $scope.FromMonth,
                    FromYearId: $scope.FromYear == 0 ? null : $scope.FromYear,
                    ToMonthId: $scope.ToMonth == 0 ? null : $scope.ToMonth,
                    ToYearId: $scope.ToYear == 0 ? null : $scope.ToYear,
                    PrepaymentAmount: $scope.PrepaymentAmount,
                    Remarks: $scope.Remarks
                };
                $http.post(baseUrl + '/api/EMIOverride/EMIOverride_AddEdit/', obj).success(function (data) {
                    $scope.AddId = data;
                    var AddId = data;
                    $scope.ListEMIOverridePopUP($scope.AddId);
                    angular.element('#CreateModal').modal('hide');
                    // $scope.CancelPopup();
                    $scope.ClearEMIOverridePopup();
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding EMI Override Details!" + data.ExceptionMessage;
                });
                //   }
            };

            $scope.Id = "0";
            $scope.Company_Name = "0";

            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            $scope.NameList = [];
            $scope.NamefilterList = [];
            $scope.EmployeeAttendancelist = function () {
                // $scope.autocompleteclear();
                if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                    // $scope.NameList = [];
                    // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            };

            /* To show the employee code at the time of employee selection */
            $scope.AttendanceEmployeeNameList = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                        $scope.Employee_No = data.Employee_No;

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };

            /*THIS IS EMPLOYEENAME DROPDOWN FILTER LIST*/
            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                $scope.Autofilterlist = data;
                $scope.Autolist = data;
            });

            /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            $scope.Autocompletefilter = function () {
                if ($scope.IsActive == 1) {

                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                }
                else if ($scope.IsActive == 0) {
                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                }
                else if ($scope.IsActive == -1) {
                    $scope.Autolist = [];
                    $scope.Autolist = $scope.Autofilterlist;
                }
            };

            /*List redirect function */
            $scope.ListRedirect = function () {
                $location.path("/EMIOverrideList/" + $scope.Id);
            };

            //This is for Cancel Popup function 
            //$scope.CancelPopup = function () {
            //    angular.element('#CreateModal').modal('hide');
            //    angular.element('#ViewModal').modal('hide');
            //    $scope.ClearEMIOverridePopup();
            //};


            /*
            Close the pop up window for the view pop up on click cancel button 
            */
            $scope.CancelView = function () {
                angular.element('#ViewModal').modal('hide');
                $scope.ClearEMIOverridePopup();
                // $scope.EMIOverrideList_Go();
            }

            /*
            Close the pop up window for the create and edit pop up on click cancel button 
            */
            $scope.CancelPopup = function () {
                //if ($scope.Id > 0) {
                //    angular.element('#CreateModal').modal('hide');
                //    $scope.ClearEMIOverridePopup();
                //    $scope.EMIOverrideList_Go();
                //}

                angular.element('#CreateModal').modal('hide');
                $scope.ClearEMIOverridePopup();
                //  $scope.Company_ListsearchGo();
            }

        }
    ]);

    //This is for Company Work Schedule controller functions//
    EmpControllers.controller("WorkScheduleController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {
            $scope.selectedindex = [];       

            // Declaration and initialization of Scope Variables.
            $scope.Id = 0;
            $scope.CompanyName = "0";
            $scope.CompanyId = "";
            $scope.Region = "0";
            $scope.StateName = "0";
            $scope.LocationName = "0";
            $scope.Day = "0";
            $scope.Department_Name = "0";
            $scope.DepartmentName = "0";
            $scope.Department_Id = "0";
            $scope.MasterId = 0;
            $scope.Mode = $routeParams.Mode;
            $scope.StartTime = "";
            $scope.EndTime = "";
            $scope.WorkingHours = "";
            $scope.rowCollection = [];

            /* This is function clear the auto complete variables */
            $scope.autoclear = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
            };


            /* This is function for Pagination */
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            // $scope.Clearlist = function () {


            /* 
           Calling api method for the dropdown list in the html page for the fields 
           company name,employee name,region,start day,Department,location,state
           */
    
            $scope.Clearlist = function () {

                /*Company Name List*/
                $scope.CompanyFilterList = [];
                $scope.CompanyNameList = [];
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.CompanyFilterList = data;
                    // only active company
                    $scope.CompanyNameList = $ff(data, { Active: 1 });

                });

                $scope.EmployeeLists = [];
                $http.get(baseUrl + 'api/WorkSchedule/GetEmployeeList/').success(function (data) {
                    $scope.EmployeeLists = data;

                });

                /*Region List*/
                $scope.RegionList = [];
                $scope.RegionFilterList = [];
                $http.get(baseUrl + 'api/WorkSchedule/GetRegionList/').success(function (data) {

                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.RegionFilterList = data;
                    //   console.log($scope.RegionFilterList);
                    // only active company
                    $scope.RegionList = $ff(data, { Active: 1 });
                });


                /*Location List*/

                $scope.LocationFilterList = [];
                $scope.LocationNameList = [];



                /*Week Start Day List*/
                $scope.StartDayList = [];
                $scope.StartDayFilterList = [];
                $http.get(baseUrl + 'api/WorkSchedule/GetStartDayList/').success(function (data) {
                    $scope.StartDayList = data;
                    $scope.StartDayFilterList = $ff(data, { Active: 1 });
                });


                /*Department List*/
                $scope.DepartmentFilterList = [];
                $scope.DepartmentList = [];
                $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {

                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.DepartmentFilterList = data;
                    // only active company
                    $scope.DepartmentList = $ff(data, { Active: 1 });
                });

                // };

                $http.get('/api/Common/GetLocationList/').success(function (data) {

                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.LocationFilterList = data;
                    // only active company
                    $scope.LocationNameList = $ff(data, { Active: 1 });
                    $scope.LocationStateFilteredList = $scope.LocationNameList;
                    $scope.LocationStateFiltered = $scope.LocationFilterList;

                });


                /*State List*/
                $scope.StateFilterList = [];
                $scope.StateList = [];
                $http.get(baseUrl + 'api/Common/StateList/').success(function (data) {

                    $scope.StateFilterList = data;
                    $scope.StateList = $ff(data, { IsActive: 1 });
                });

                $scope.LocationStateFiltered = [];
                $scope.StateFilterLists = [];
                $scope.LocationStateFilteredList = [];
                $scope.StateFilterList = [];
                $scope.LocationNameList = [];
                $scope.FilterLocationByState = function () {

                    $scope.LocationStateFilteredList = [];
                    //  $scope.LocationNameList = [];
                    if ($scope.StateName == 0 || $scope.StateName == '') {
                        $scope.LocationStateFilteredList = $scope.LocationNameList;
                    }
                    else {
                        angular.forEach($scope.LocationNameList, function (value, index) {
                            if (value.StateId == $scope.StateName) {
                                $scope.LocationStateFilteredList.push(value);
                            }
                        });
                        $scope.LocationName = "0";
                    }
                };



                $scope.listFilterLocationByState = function () {
                    $scope.LocationStateFiltered = [];
                    //  $scope.LocationNameList = [];
                    if ($scope.State_Name == 0 || $scope.State_Name == '') {
                        $scope.LocationStateFiltered = $scope.LocationFilterList;
                    }
                    else {
                        angular.forEach($scope.LocationFilterList, function (value, index) {
                            if (value.StateId == $scope.State_Name) {
                                $scope.LocationStateFiltered.push(value);
                            }
                        });
                        $scope.Location_Name = "0";
                    }
                };

            };


            $scope.Clearlist();


        /*
        Validating the create page mandatory fields
        checking mandatory for the follwing fields
        CompanyName,LocationName,Day,WorkingHours,StartTime,EndTime
        and showing alert message when it is null.
        */
            $scope.Validationcontrols = function () {

                if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                    alert("Please select Company ");
                    return false;
                }
                    //else if (typeof ($scope.Region) == "undefined" || $scope.Region == 0) {
                    //    alert("Please select Region");
                    //    return Region;
                    //}
                    //else if (typeof ($scope.StateName) == "undefined" || $scope.StateName == 0) {
                    //    alert("Please select State");
                    //    return StateName;
                    //}

                else if (typeof ($scope.LocationName) == "undefined" || $scope.LocationName == 0) {
                    alert("Please select Location");
                    return false;
                }
                else if (typeof ($scope.Day) == "undefined" || $scope.Day == 0) {
                    alert("Please select Week Start Day");
                    return false;
                }
                //else if (typeof ($scope.FullName) == "undefined" || $scope.Branch_Selected == undefined) {
                //    alert("Please enter Employee Name");
                //    return FullName;
                //}
                else if ($scope.WorkingHours == "" || ((($scope.StartTime != "" || $scope.EndTime != "") && (typeof ($scope.EndTime) == "undefined" || $scope.EndTime == "" || typeof ($scope.StartTime) == "undefined" || $scope.StartTime == "")))) {
                    alert("Please enter Start Time and End Time or Working Hours");
                    return false;
                }
                else if ((typeof ($scope.StartTime) == "undefined" && typeof ($scope.EndTime) == "undefined") && (typeof ($scope.WorkingHours) == "undefined" || $scope.WorkingHours == "")) {
                    alert("Please enter Working Hours");
                    return false;
                }
                else if ($scope.WorkingHours > 24) {
                    alert("Please enter valid Working Hours");
                    return false;
                }
                if (($scope.WorkingHours + "").split(".").length > 0) {
                    if (($scope.WorkingHours + "").split(".")[1] > 59) {
                        alert("Please enter valid Working Hours");
                        return false;
                    }
                }           
       
                if ($scope.WorkingHours.split(".")) {
                    if (($scope.WorkingHours + "").split(".")[1] =="") {                  
                        alert("Please enter valid Working Hours");
                        return false;
                    }
            }

                return true;
            };

            //angular.forEach($scope.WorkingHours, function (selectedPre, index) {
            //    if(index)
            //    {

            //    }
                   
            //        });
            /* THIS IS FOR EDIT RECORDS FUNCTION */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }



            ///* THIS IS FOR EMPLOYEE POPUP SELECTION FUNCTION */
            //$scope.EmployeeSelection = function (Id, Employee_No, FullName, Department_Name, Designation_Name) {
            //    $scope.Employee_Id = Id;
            //    $scope.Employee_No = Employee_No;
            //    $scope.FullName = FullName;
            //    $scope.Department_Name = Department_Name;
            //    $scope.Designation_Name = Designation_Name;
            //    angular.element('#EmployeeModel').modal('hide');
            //};


            //$scope.EmployeeId = "0";
            //$scope.DepartmentName = "0";
            //$scope.DepartmentName="";
            //$scope.emptydatas = [];
            //$scope.rowCollections = [];
            ///* THIS IS FOR EMPLOYEE POPUP FUNCTION */
            //$scope.EmployeeDetailsPopup = function () {
            //    if ($scope.rowCollections != undefined) {  // to avoid going to DB each time when Employee Search clicked
            //        $scope.rowCollections = [];
            //        $http.get(baseUrl + '/api/WorkSchedule/EmployeeListByDept/?Id=0' + '&Department_Id=' + $scope.DepartmentName).success(function (data) {
            //            $scope.rowCollections = [];
            //            $scope.emptydatas = [];
            //            $scope.rowCollections = data;
            //            //$scope.Clear();
            //            if ($scope.rowCollections.length > 0) {
            //                $scope.flags = 1;
            //            }
            //            else {
            //                $scope.flags = 0;
            //            }
            //        }).error(function (data) {
            //            $scope.error = "AN error has occured while getting Employee List!" + data;
            //        });
            //    }
            //};

            /* THIS IS FOR EMPLOYEE POPUP SELECTION FUNCTION */
            //$scope.EmployeeSelections = function () {

            //    $scope.Employee_Id = $scope.selectedindex.Id;
            //    $scope.Employee_No = $scope.selectedindex.Employee_No;
            //    $scope.FullName = $scope.selectedindex.FullName;
            //    $scope.Department_Name = $scope.selectedindex.Department_Name;
            //    $scope.Designation_Name = $scope.selectedindex.Designation_Name;
            //    angular.element('#EmployeeModel').modal('hide');


            //};


            /* THIS IS FOR EMPLOYEE SELECTION FUNCTION */
            $scope.GetValue = function () {
                if ($scope.EmployeeList != undefined) {  // to avoid going to DB each time when employee Search clicked
                    $scope.EmployeeList = [];
                    $http.get(baseUrl + '/api/WorkSchedule/EmployeeListByDept/?Id=' + $scope.EmployeeId + '&Department_Id=' + $scope.DepartmentName).success(function (data) {
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                    }).error(function (data) {
                        $scope.error = "AN error has occured while getting employee List!" + data;
                    });
                }
            };

            //$scope.Selected_Employee = function () {           
            //    var Emp_Item = [];
            //    if ($scope.Id <= 0) {
            //        angular.forEach($scope.EmployeeList, function (selectedPre) {
            //            if (!selectedPre.selectedPre) {
            //                Emp_Item.push(selectedPre);
            //            }

            //            $scope.EmployeeList = Emp_Item;
            //        });
            //        console.log($scope.EmployeeList);
            //    }
            //else if ($scope.Id > 0) {
            //    angular.forEach($scope.EmployeeList, function (selectedPre, index) {
            //        if (selectedPre.selectedPre) {
            //            $scope.Employee_Id = selectedPre.Id;
            //            $scope.EmployeeSelection();
            //        }
            //        if (!selectedPre.selectedPre) {
            //            Emp_Item.push(selectedPre);
            //        }
            //        $scope.EmployeeList = Emp_Item;
            //    });
            //    console.log($scope.EmployeeList);
            //}
            //};



            // Declaration and initialization of Scope Variables.
            $scope.Company_Name = "0";
            $scope.Region_Name = "0";
            $scope.State_Name = "0";
            $scope.Location_Name = "0";
            $scope.Department_Name = "0";
            $scope.FullName = "0";
            $scope.DepartmentName = "0";
            //$scope.DepartmentName
            //This is function for List page 
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;


            $scope.loading = false;
      /*
      Calling the api method to list the workschedule details for the filters
      company name,region,state,location,department,employeename and
      showing the result in table.
      */
            $scope.WorkScheduleListSearch = function () {

                var EmpName = '';
                if ($scope.Branch_Selected != undefined) {
                    EmpName = $scope.Branch_Selected.originalObject.FullName;
                };

                if ($routeParams.Id != undefined) {
                    $scope.Id = $routeParams.Id;


                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    },3000); // 3 seconds

                    $scope.WorkDays = ($scope.Weekday.Mon + ',' + $scope.Weekday.Tue + ',' + $scope.Weekday.Wed + ',' + $scope.Weekday.Thu + ',' + $scope.Weekday.Fri + ',' + $scope.Weekday.Sat + ',' + $scope.Weekday.Sun);
                    $http.get(baseUrl + '/api/WorkSchedule/WorkSchedule_List/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&RegionId=' + $scope.Region_Name + '&StateId=' + $scope.State_Name + '&LocationId=' + $scope.Location_Name + '&Department_Id=' + $scope.Department_Name + '&FullName=' + EmpName).success(function (data) {
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                        if ($scope.rowCollection.length > 0) {
                            $scope.flag = 1;
                        }
                        else {
                            $scope.flag = 0;
                        }

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                    }).error(function (data) {
                        $scope.error = "An error has occurred while Listing Work Schedule Details!" + data;
                    });
                }
            };


            $scope.loadData = function () {
                $http.get(baseUrl + 'api/CompanyMaster/CompanyMaster_List/?Id=' + $scope.Id + '&CompanyName=' + $scope.Company_Name + '&Active=' + $scope.IsActive).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                });
            };




            $scope.Autolist = [];
            $scope.Autofilterlist = [];

      /*
      Calling the api method to list the employee details for the  filters  company name,department and
      showing the result in table.
      */
            $scope.Employeefilterlist = function () {
                // $scope.autocompleteclear();
                if ($scope.Autolist != undefined) {  
                    $scope.Autolist = [];
                    $scope.Autofilterlist = [];
                
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.Location_Name).success(function (data) {
                        $scope.Autofilterlist = data;
                        $scope.Autolist = data;

                    });
                }
            }



            //$http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=' + $scope.Department_Name).success(function (data) {
            //    $scope.Autofilterlist = data;
            //    $scope.Autolist = data;
            //});


            /*THIS IS EMPLOYEE NAME DROPDOWN LIST BASED ON ACTIVE AND INACTIVED EMPLOYEE*/
            $scope.Autocompletefilter = function () {
                if ($scope.IsActive == 1) {

                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                }
                else if ($scope.IsActive == 0) {
                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                }
                else if ($scope.IsActive == -1) {
                    $scope.Autolist = [];
                    $scope.Autolist = $scope.Autofilterlist;
                }
            };


            /* on click Go calling the list function.*/
            $scope.WorkScheduleListGo = function () {
                location.path = baseUrl + "/Home/Index#/WorkingHoursList/0";
                $scope.WorkScheduleListSearch($routeParams.Id = 0);
            };

            /* Open the create pop up window */
            $scope.AddWorkSchedule = function (CatId) {
                $scope.Id = CatId;
                //  $scope.ViewWorkScheduleDetails();
                $location.path("/WorkingHoursCreate/");
            };

            /* Open the view pop up window and show the details for the workschedule for the  workschedule Id */
            $scope.ViewWorkSchedule = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewWorkScheduleDetails();
                $location.path("/WorkingHoursView/" + $scope.Id);
            };

            /* Open the edit pop up window and show the details for the workschedule for the  workschedule Id */
            $scope.EditWorkSchedule = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewWorkScheduleDetails();
                $location.path("/WorkingHoursEdit/" + $scope.Id);
            };

            /*calling list function */
            $scope.ListWorkSchedule = function (CatId) {

                if ($scope.Mode == 0) {
                    $scope.Id = CatId;
                    $scope.rowCollection = [];
                    //  $scope.EmployeeList_Search();
                }
                else if ($scope.Mode == 1) {

                    $scope.WorkScheduleListSearch();
                }
            };

            //Inactive popup function// 
            $scope.DeleteWorkSchedule = function (comId) {
                $scope.Id = comId;
                $scope.DeleteWorkSchedule_Details();
            };

            //Active popup function// 
            $scope.ActiveWorkSchedule = function (comId) {
                $scope.Id = comId;
                $scope.ActiveWorkSchedule_Details();
            };

            /*calling  the time function for convert 24 hr to 12 hrs function */
            $scope.Convert24to12Timeformat = function (inputTime) {
                var outputTime = null;
                if (inputTime != "" && inputTime != null) {
                    inputTime = inputTime.toString(); //value to string for splitting
                    var splitTime = inputTime.split(':');
                    splitTime.splice(2, 1);
                    var ampm = (splitTime[0] >= 12 ? ' PM' : ' AM'); //determine AM or PM 
                    splitTime[0] = splitTime[0] % 12;
                    splitTime[0] = (splitTime[0] == 0 ? 12 : splitTime[0]); //adjust for 0 = 12
                    outputTime = splitTime.join(':') + ampm;
                }
                return outputTime;
            };

            /*calling  the time function for convert 12 hr to 24 hrs function */
            $scope.Convert12To24Timeformat = function (timeval) {
                var outputTime = null;
                if (timeval != "") {
                    var time = timeval;
                    var hours = Number(time.match(/^(\d+)/)[1]);
                    var minutes = Number(time.match(/:(\d+)/)[1]);
                    var AMPM = time.match(/\s(.*)$/)[1];
                    if (AMPM == "PM" && hours < 12) hours = hours + 12;
                    if (AMPM == "AM" && hours == 12) hours = hours - 12;
                    var sHours = hours.toString();
                    var sMinutes = minutes.toString();
                    if (hours < 10) sHours = "0" + sHours;
                    if (minutes < 10) sMinutes = "0" + sMinutes;
                    outputTime = sHours + ":" + sMinutes;
                }
                return outputTime;
            };


            /* Declare the array list function */
            $scope.Weekday = [{
                "userid": 0,
                "name": "Mon"
            }, {
                "userid": 1,
                "name": "Tue"
            }, {
                "userid": 2,
                "name": "Wed"
            }, {
                "userid": 3,
                "name": "Thu"
            }, {
                "userid": 4,
                "name": "Fri"
            }, {
                "userid": 5,
                "name": "Sat"
            }, {
                "userid": 6,
                "name": "Sun"
            }];


            /* Concardination the array list function */
            $scope.wdays = [];
            $scope.wdays = [
                  { name: 'Weekday.Mon', selected: true },
                  { name: 'Weekday.Tue', selected: true },
                  { name: 'Weekday.Wed', selected: true },
                  { name: 'Weekday.Thu', selected: true },
                  { name: 'Weekday.Fri', selected: true },
                  { name: 'Weekday.Sat', selected: true },
                  { name: 'Weekday.Sun', selected: true }
            ];

            /* Split the array list function */
            $scope.selectedDays = {};
            $scope.mySplit = function (string) {
                var array = string.split(',');
                $scope.Weekday.Mon = Number(array[0]);
                $scope.Weekday.Tue = Number(array[1]);
                $scope.Weekday.Wed = Number(array[2]);
                $scope.Weekday.Thu = Number(array[3]);
                $scope.Weekday.Fri = Number(array[4]);
                $scope.Weekday.Sat = Number(array[5]);
                $scope.Weekday.Sun = Number(array[6]);

            }

            /* Display the string array list function */
            $scope.listdays = function (string) {

                var array = string.split(',');
                $scope.Weekday.Mon = Number(array[0]);
                $scope.Weekday.Tue = Number(array[1]);
                $scope.Weekday.Wed = Number(array[2]);
                $scope.Weekday.Thu = Number(array[3]);
                $scope.Weekday.Fri = Number(array[4]);
                $scope.Weekday.Sat = Number(array[5]);
                $scope.Weekday.Sun = Number(array[6]);

                if ($scope.Weekday.Mon == 1) { $scope.Weekday.Mon = 'Mon' } else { $scope.Weekday.Mon = '' }
                if ($scope.Weekday.Tue == 1) { $scope.Weekday.Tue = 'Tue' } else { $scope.Weekday.Tue = '' }
                if ($scope.Weekday.Wed == 1) { $scope.Weekday.Wed = 'Wed' } else { $scope.Weekday.Wed = '' }
                if ($scope.Weekday.Thu == 1) { $scope.Weekday.Thu = 'Thu' } else { $scope.Weekday.Thu = '' }
                if ($scope.Weekday.Fri == 1) { $scope.Weekday.Fri = 'Fri' } else { $scope.Weekday.Fri = '' }
                if ($scope.Weekday.Sat == 1) { $scope.Weekday.Sat = 'Sat' } else { $scope.Weekday.Sat = '' }
                if ($scope.Weekday.Sun == 1) { $scope.Weekday.Sun = 'Sun' } else { $scope.Weekday.Sun = '' }

                $scope.WorkDays = ($scope.Weekday.Mon + '  ' + $scope.Weekday.Tue + ' ' + $scope.Weekday.Wed + '  ' + $scope.Weekday.Thu + '  ' + $scope.Weekday.Fri + '  ' + $scope.Weekday.Sat + '  ' + $scope.Weekday.Sun);
            };

            // $scope.Department_Name = "0";
            $scope.Employee_Id = "";

       /*
       Calling the api method to view the details of the workschedule
       for the workschedule Id 
       and display the details in the view pop up window.
       */
            $scope.ViewWorkScheduleDetails = function () {

                // $scope.CompanyInactiveFlag - initialize flag 
                $scope.CompanyInactiveFlag = 0;
                $scope.RegionInactiveFlag = 0;
                $scope.StateInactiveFlag = 0;
                $scope.LocationInactiveFlag = 0;
                $scope.StartInactiveFlag = 0;
                $scope.DepartmentInactiveFlag = 0;

                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.MasterId = $routeParams.Id;

                    $http.get(baseUrl + 'api/WorkSchedule/GetWorkSchedule_ById/?Id=' + $scope.Id).success(function (data) {
                        $scope.DuplicateId = data.Id;
                        $scope.CompanyName = data.CompanyId.toString();
                        $scope.ViewCompanyName = data.CompanyName;
                        $scope.Employee_Id = data.Employee_Id;
                        $scope.Employee_No = data.Employee_No;
                        $scope.FullNamelist = data.FullNamelist;
                        $scope.FullName = data.FullName;
                        $scope.DepartmentName = data.Department_Id.toString();
                        $scope.ViewDepartmentName = data.DepartmentName;
                        $scope.LocationName = data.LocationId.toString();
                        $scope.ViewLocationName = data.LocationName;
                        $scope.Day = data.StartDayId.toString();
                        $scope.ViewDay = data.Day;
                        $scope.Region = data.RegionId.toString();
                        $scope.ViewRegion = data.Region;
                        $scope.StateName = data.StateId.toString();
                        $scope.ViewStateName = data.StateName;
                        $scope.WorkingHours = data.WorkingHours.toFixed(2);
                        $scope.mySplit(data.WorkDays);
                        $scope.WorkDays = ($scope.Weekday.Mon + ',' + $scope.Weekday.Tue + ',' + $scope.Weekday.Wed + ',' + $scope.Weekday.Thu + ',' + $scope.Weekday.Fri + ',' + $scope.Weekday.Sat + ',' + $scope.Weekday.Sun);
                        $scope.StartTime = data.StartTime == "" && data.StartTime == null ? null : $scope.Convert24to12Timeformat(data.StartTime);
                        $scope.EndTime = data.EndTime == "" && data.EndTime == null ? null : $scope.Convert24to12Timeformat(data.EndTime);

                        //console.log($scope.StateName);


                        // if the current viewing company is inactive
                        // set the flag value to 1


                        if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                            $scope.CompanyInactiveFlag = 1;
                        }

                        if (($ff($scope.RegionFilterList, { Id: $scope.Region, Region: $scope.ViewRegion, Active: 0 }).length) == 1) {
                            $scope.RegionInactiveFlag = 1;
                        }

                        if (($ff($scope.StateFilterList, { Id: $scope.StateName, StateName: $scope.ViewStateName, IsActive: 0 }).length) == 1) {
                            $scope.StateInactiveFlag = 1;
                        }

                        if (($ff($scope.LocationFilterList, { Id: $scope.LocationName, LocationName: $scope.ViewLocationName, Active: 0 }).length) == 1) {
                            $scope.LocationInactiveFlag = 1;
                        }

                        if (($ff($scope.StartDayList, { Id: $scope.Day, Day: $scope.ViewDay, Active: 0 }).length) == 1) {
                            $scope.StartInactiveFlag = 1;
                        }

                        if (($ff($scope.DepartmentFilterList, { Id: $scope.DepartmentName, Department_Name: $scope.ViewDepartmentName, Active: 0 }).length) == 1) {
                            $scope.DepartmentInactiveFlag = 1;
                        }


                        // display employee name in autocomplete text box
                        var sel = {
                            Id: data.Employee_Id,
                            FullName: data.FullName,
                            // Employee_No: data.Employee_No,
                            FullNamelist: data.FullNamelist
                        };
                        $scope.DisplayFullName = sel;

                        $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);


                    }).error(function (data) {

                        $scope.error = "an error has occurred while viewing Work Schedule details!" + data;
                    });

                }
            };


            /*calling employee list auto complete function */
            $scope.EmployeeNameLists = function () {
                var EmployeeNo = '';
                if ($scope.Branch_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Branch_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                        $scope.Employee_No = data.Employee_No;
                        $scope.FullName = data.FullName;

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };


            $scope.Id = "0";
            $scope.CompanyName = "0";

            $scope.NameList = [];
            $scope.NamefilterList = [];

            /*
            calling employee list auto complete function for the  filters  company name,department name and
            showing the result in table.
           */
            $scope.Employeelist = function () {

                if ($scope.NamefilterList != undefined) { 

                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                    // $scope.NameList = [];
                    // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName + '&Department_Id=' + $scope.DepartmentName + '&LocationId=' + $scope.LocationName).success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            };

            /*calling employee list auto complete function */
            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                $scope.Autofilterlist = data;
                $scope.Autolist = data;
            });

            /*THIS IS EMPLOYEENAME DROPDOWN LIST AND BASED ON ACTIVE EMPLOYEES AND INACTIVED EMPLOYEES*/
            $scope.Autocompletefilter = function () {
                if ($scope.IsActive == 1) {

                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                }
                else if ($scope.IsActive == 0) {
                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                }
                else if ($scope.IsActive == -1) {
                    $scope.Autolist = [];
                    $scope.Autolist = $scope.Autofilterlist;
                }
            };



            //To calculate the Working hours
            $scope.WorkingHRS = function () {
                if ($scope.EndTime == null && $scope.StartTime == null) {
                    $scope.EndTime = '';
                    $scope.StartTime = '';
                }
                if ($scope.EndTime != '' && $scope.StartTime != '') {
                    var currentTime = new Date("01/01/2007 " + $scope.StartTime);
                    var endTime = new Date("01/01/2007 " + $scope.EndTime);
                    if (endTime < currentTime) {
                        endTime = new Date("01/02/2007 " + $scope.EndTime);
                    }

                    var hourDiff = 0;
                    {
                        hourDiff = endTime - currentTime;
                        var difference = "";// hourDiff / 60 / 60 / 1000;

                        totalSeconds = hourDiff / 1000;
                        totalMinutes = totalSeconds / 60;
                        totalHours = totalMinutes / 60;

                        seconds = Math.floor(totalSeconds) % 60;
                        minutes = Math.floor(totalMinutes) % 60;
                        hours = Math.floor(totalHours) % 60;
                        if ((isNaN(minutes)) == false) {
                            if (hours !== 0) {
                                difference += hours + '.';
                                if (minutes.toString().length == 1) {
                                    minutes = '0' + minutes;
                                }
                            }

                            difference += minutes;
                        }

                        $scope.WorkingHours = difference;                
                    }

                }
                else if (($scope.EndTime == '' || $scope.StartTime == '') && ($scope.EndTime + $scope.StartTime).length >= 1) {
                    $scope.WorkingHours = '';

                }

            };


            $scope.DuplicateId = 0;
            $scope.WorkSchedule_AddEdit = function () {
                // $http.get(baseUrl + '/api/PublicHolidays/OrganizationHoliday_DuplCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName + '&Region=' + $scope.Region + '&Location=' + $scope.LocationName + '&Holidaydate=' + $scope.HolidayDate).success(function (data) {
                //   $http.get(baseUrl + '/api/PublicHolidays/OrganizationHoliday_DuplCheck/?Id=0' + '&CompanyName=1' + '&Region=2' + '&Location=11' + '&Holidaydate=5-apr-2018').success(function (data) {
                $http.get(baseUrl + 'api/WorkSchedule/WorkSchedule_DuplCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName + '&Location=' + $scope.LocationName).success(function (data) {
              
                    var returnvalue = data.returnval;
                    if (returnvalue == 1) {

                        alert("This Work Schedule already exists, cannot duplicate");
                        return false;
                    }
                    else {
                        $scope.WorkScheduleInsert_AddEdit();
                    }
                    return true;
                });
            }

            $scope.DepartmentName = "0";
            // $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');

           /*
           Call the api method for insert and Update the record for a workschedule
           and display the record of selected workschedule when Id is greater than 0
           in edit.html and provide an option for create and modify the workschedule and save the workschedule record
           */
            $scope.WorkScheduleInsert_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    if ($scope.Branch_Selected != undefined) {
                        $scope.EmployeeId = $scope.Branch_Selected.originalObject.Id;
                    }
                    else {
                        $scope.EmployeeId = null;
                    }
                    //  $scope.EmployeeId = $scope.Branch_Selected.originalObject.Id;
                    $scope.WorkDays = ($scope.Weekday.Mon + ',' + $scope.Weekday.Tue + ',' + $scope.Weekday.Wed + ',' + $scope.Weekday.Thu + ',' + $scope.Weekday.Fri + ',' + $scope.Weekday.Sat + ',' + $scope.Weekday.Sun);


                    var obj = {
                        Id: $scope.MasterId,
                        CompanyId: $scope.CompanyName,
                        LocationId: $scope.LocationName == 0 ? null : $scope.LocationName,
                        Employee_Id: $scope.EmployeeId == 0 ? null : $scope.EmployeeId,
                        StartDayId: $scope.Day == 0 ? null : $scope.Day,
                        Department_Id: $scope.DepartmentName == 0 ? null : $scope.DepartmentName,
                        StartTime: $scope.StartTime == '' ? null : $scope.Convert12To24Timeformat($scope.StartTime),
                        EndTime: $scope.EndTime == '' ? null : $scope.Convert12To24Timeformat($scope.EndTime),
                        WorkingHours: $scope.WorkingHours == "" ? null : $scope.WorkingHours,
                        WorkDays: $scope.WorkDays == "" ? null : $scope.WorkDays,
                        RegionId: $scope.Region == 0 ? null : $scope.Region,
                        StateId: $scope.StateName == 0 ? null : $scope.StateName,

                    };

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    },3000); // 3 second

                    $http.post(baseUrl + '/api/WorkSchedule/WorkSchedule_AddEdit/', obj).success(function (data) {

                        $scope.MasterId = data;
                        $location.path("/WorkingHoursList/" + $scope.MasterId + "/1");

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Work Schedule Details!" + data.ExceptionMessage;
                    });
                };
            };

          /* 
         Calling the api method to detele the details of the workschedule 
         for the  workschedule Id,
         and redirected to the list page.
         */
            $scope.DeleteWorkSchedule_Details = function () {
                var del = confirm("Do you like to inactivate the selected workdays configuration details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/WorkSchedule/WorkSchedule_Delete/?Id=' + $scope.Id).success(function (data) {
                        $scope.WorkScheduleListSearch();
                        alert("workdays configuration details has been inactivated successfully");
                        $location.path("/WorkingHoursList/0/1");
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Employee Work Schedule Details" + data;
                    });
                };
            };

         /* 
        Calling the api method to inactived the details of the workschedule 
        for the  workschedule Id,
        and redirected to the list page.
        */
            $scope.ActiveWorkSchedule_Details = function () {
                var del = confirm("Do you like to activate the selected workdays configuration details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/WorkSchedule/WorkSchedule_Active/?Id=' + $scope.Id).success(function (data) {
                        $scope.WorkScheduleListSearch();
                        alert("workdays configuration details has been activated successfully");
                        $location.path("/WorkingHoursList/0/1");
                    }).error(function (data) {
                        $scope.error = "An error has occurred while Active Employee Work Schedule Details" + data;
                    });
                };
            };

            /*Redirect view function*/
            $scope.ViewRedirect = function () {
                $location.path("/WorkingHoursEdit/" + $scope.MasterId + "/1");
            };

            /*Redirect list function*/
            $scope.ListRedirect = function () {
                if ($scope.MasterId == 0) {
                    $location.path("/WorkingHoursList/0/0");
                }
                else if ($scope.MasterId > 0) {
                    $location.path("/WorkingHoursList/0/1");
                    //$scope.WorkScheduleListGo();
                }
            };

            /*Select the index function*/
            $scope.onTaskSelect = function (row) {

                $scope.selectedindex = row;
            }
        }]);


    //this is for Company branch master controller//
    EmpControllers.controller("CompanyBranchMasterController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {
            $scope.Id = 0;
            // $scope.Id = "0";
            $scope.CompanyName = "0";
           // $scope.Branch_Code = "";
           // $scope.Branch_Code = "0";       
            $scope.BranchCode = "0";
            $scope.BranchCodeId = "0";
          //  $scope.BranchCode = "";
            //This is function for Pagination
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.Active_ErrorFunction = function () {
                alert("Inactive companies branch cannot be edited");
            };

            /* 
            Calling api method for the dropdown list in the html page for the fields 
            Company
            */
            $scope.CompanyFilterList = [];
            $scope.CompanyNameList = [];
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {

                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            });


            /* Validating the create page mandatory fields
             checking mandatory for the follwing fields
             CompanyName,BranchName,BranchCode
             and showing alert message when it is null.
           */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                    alert("Please select Company");
                    return false;
                }
                else if (typeof ($scope.Branch_Name) == "undefined" || $scope.Branch_Name == "") {
                    alert("Please enter Branch Name");
                    return false;
                }
                else if (typeof ($scope.Branch_Code) == "undefined" || $scope.Branch_Code == "") {
                    alert("Please enter Branch Code");
                    return false;
                }
                return true;
            };


            $scope.Company_Name = "0";
            $scope.IsActive = "1";
            //BranchName = '';
            $scope.loading = false;

            /*
            Calling the api method to list the company branch details for the  filters  company name,branch name,status and
            showing the result in table.
            */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;

            $scope.CompanyBranchMaster_ListSearch = function () {
                //$scope.flag = 0;           
                var BranchName = '';
                if ($scope.BranchSelected != undefined) {
                    BranchName = $scope.BranchSelected.originalObject.Branch_Name;
                };
                //if ($routeParams.Id != undefined) {
                //    $scope.Id = $routeParams.Id;               
                //}

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 second

                $http.get(baseUrl + '/api/CompanyBranchMaster/CompanyBranchMaster_List/?Id=' + $scope.Id + '&CompanyID=' + $scope.Company_Name + '&Branch_Name=' + BranchName + '&Branch_Code=' + $scope.BranchCodeId + '&IsActive=' + $scope.IsActive).success(function (data) {

                    //console.log(data);
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                   // console.log($scope.rowCollection);
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
             
                    $scope.loading = false;
                    $rootScope.$broadcast('hide');

                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing Company Branch Details!" + data;
                });
            };



            /* 
            Calling api method for the dropdown list in the html page for the fields 
            company name
            */
            $scope.NameList = [];
            $scope.NamefilterList = [];

            $scope.Employeelist = function () {

                if ($scope.NameList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $http.get(baseUrl + 'api/CompanyBranchMaster/GetBranchList/?CompanyID=' + $scope.Company_Name).success(function (data) {
                        $scope.NameList = data;

                    });
                }
            };


            /*calling Alert function for cannot edit inactive record */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }


            /* on click Go calling the list function*/
            $scope.CompanyBranchMaster_ListSearch_Go = function () {
                //$scope.Id = 0;
                //var ListId = $scope.Id;
                //$scope.CompanyBranchMaster_ListSearchPopUp(ListId);
                $scope.Id = 0;
                $scope.Mode = 1;
                $scope.CompanyBranchMaster_ListSearchPopUp($scope.Id, $scope.Mode);
            };

            /*calling list function */
            $scope.CompanyBranchMaster_ListSearchPopUp = function (BranchId) {

                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.CompanyBranchMaster_ListSearch();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.CompanyBranchMaster_ListSearch();
                }
                if (BranchId > 0) {
                    $scope.Id = BranchId
                    $scope.CompanyBranchMaster_ListSearch($scope.Id);
                }
            };

            /* Open the create pop up window */
            $scope.AddCompanyBranchPopUp = function (comId) {
                $scope.Id = comId;
                // $scope.ViewCompanyBranchMaster_Details();
                angular.element('#CompanyBranchModal').modal('show');
            };

            /* Open the view pop up window and show the details for the company for the  company Id */
            $scope.ViewCompanyBranchPopUp = function (comId) {
                $scope.Id = comId;
                $scope.ViewCompanyBranchMaster_Details();
                angular.element('#ViewModal').modal('show');
            };

            /* Open the edit pop up window and show the details for the company for the  company Id */
            $scope.EditCompanyBranchPopUp = function (comId) {
                $scope.Id = comId;
                $scope.ViewCompanyBranchMaster_Details();
                angular.element('#CompanyBranchModal').modal('show');
            };

            /*
            Calling the api method to view the details of the company branch
            for the branch Id 
            and display the details in the view pop up window.
            */
            $scope.ViewCompanyBranchMaster_Details = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                    $scope.DuplicatesId = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/CompanyBranchMaster/GetBranchDetailsById/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.DuplicatesId = data.Id;
                    $scope.CompanyName = data.CompanyID.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Branch_Name = data.Branch_Name;
                    $scope.Branch_Code = data.Branch_Code;
                    $scope.Description = data.Description;

                    $scope.CompanyInactiveFlag = 0;

                    // if the current viewing company is inactive
                    // set the flag value to 1
                    if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                        $scope.CompanyInactiveFlag = 1;
                    }


                }).error(function (data) {
                    $scope.error = "an error has occurred while viewing company branch details!" + data;
                });
            };


            $scope.autoclear = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Branch_Name = "0";
            }

            /*calling clear function */
            $scope.ClearCompanyBranchPopUp = function () {
                $scope.CompanyName = "0";
                $scope.Branch_Name = "";
                $scope.Branch_Code = "";
                $scope.Description = "";
                // $scope.ClearList();
                $scope.CompanyInactiveFlag = 0;
            };

            $scope.ResetBranchPopUp = function () {
                $scope.CompanyName = "0";
                $scope.Branch_Name = "";
                $scope.Branch_Code = "";
                $scope.Description = "";
                // $scope.ClearList();
                $scope.CompanyInactiveFlag = 0;
            };

            /* 
            Calling the api method to detele the details of the company branch
            for the  branch Id,
            and redirected to the list page.
            */
            $scope.DeleteCompanyBranchMaster_Details = function () {
                var del = confirm("Do you like to inactivate the selected company branch details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/CompanyBranchMaster/CompanyBranchMaster_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected company branch details has been inactivated successfully");
                        $scope.CompanyBranchMaster_ListSearchPopUp($scope.Id = 0);
                        // $scope.CompanyBranchMaster_ListSearch();
                        //window.location.href = baseUrl + "/Home/Index#/companybranchlist";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting company branch details" + data;
                    });
                };
            };

            //Delete popup function//
            $scope.DeleteBranch = function (comId) {
                $scope.Id = comId;
                $scope.DeleteCompanyBranchMaster_Details();
            };


            /* 
            Calling the api method to inactived the details of the company branch
            for the  branch Id,
            and redirected to the list page.
            */
            $scope.ReInsertCompanyBranchMasterDetails = function () {
                var Ins = confirm("Do you like to activate the selected company branch details?");
                if (Ins == true) {
                    $http.get(baseUrl + 'api/CompanyBranchMaster/CompanyBranchMaster_ReInsert/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected company branch details has been activated successfully");
                        $scope.CompanyBranchMaster_ListSearchPopUp($scope.Id = 0);
                        // $scope.CompanyBranchMaster_ListSearch();
                        //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while ReInserting Company branch Detail" + data;
                    });
                };
            };

            //ReInsert popup function//
            $scope.ReInsertBranch = function (comId) {
                $scope.Id = comId;
                $scope.ReInsertCompanyBranchMasterDetails();
            };

            $scope.Id = 0;
            $scope.DuplicateId = 0;
            $scope.DuplicatesId = 0;

            /*
            Call the api method for insert and Update the record for a company branch
            and display the record of selected company branch when Id is greater than 0
            in edit.html and provide an option for create and modify the company branch and save the company branch record
            */
            $scope.CompanyBranchMaster_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    $http.get(baseUrl + '/api/CompanyBranchMaster/CompanyBranch_DuplicateCheck/?Id=' + $scope.DuplicateId + '&CompanyID=' + $scope.CompanyName + '&Branch_Name=' + $scope.Branch_Name).success(function (data) {
                        $http.get(baseUrl + '/api/CompanyBranchMaster/CompanyBranchCode_DuplicateCheck/?Id=' + $scope.DuplicatesId + '&CompanyID=' + $scope.CompanyName + '&Branch_Code=' + $scope.Branch_Code).success(function (datas) {
                            if (data == 1) {
                                alert("Branch Name already exists, cannot duplicate");
                                return false;
                            }
                            else if (datas == 1) {
                                alert("Branch Code already exists, cannot duplicate");
                                return false;
                            }
                            else ((data != 1) && (datas != 1))
                            {
                                var obj = {
                                    Id: $scope.Id,
                                    CompanyName: $scope.CompanyName,
                                    Branch_Name: $scope.Branch_Name,
                                    Branch_Code: $scope.Branch_Code,
                                    Description: $scope.Description
                                };

                                $scope.loading = true;
                                $timeout(function () {
                                    if ($scope.loading == true) {
                                        $rootScope.$broadcast('show');
                                    }
                                }, 3000); // 3 second

                                $http.post(baseUrl + '/api/CompanyBranchMaster/CompanyBranchMaster_AddEdit/', obj).success(function (data) {
                                    $scope.AddId = data;
                                    var AddId = data;
                                    $scope.CompanyBranchMaster_ListSearchPopUp(AddId);
                                    //  $scope.CancelPopUp();
                                    angular.element('#CompanyBranchModal').modal('hide');
                                    $scope.ClearCompanyBranchPopUp();

                                    $scope.loading = false;
                                    $rootScope.$broadcast('hide');

                                    // window.location.href = "/Home/Index#/viewcompanybranch/" + data;
                                }).error(function (data) {
                                    $scope.error = "An error has occurred while adding theatre booking details!" + data.ExceptionMessage;
                                });

                            }
                        })
                    }).error(function (data) {

                        $scope.error = "Problem in checking companybranch master duplicate!" + data.ExceptionMessage;
                    });
                }
            };

            /*
           Close the pop up window for the view redirect and list redirect 
           */
            $scope.ViewRedirect = function () {
                $location.path("/editcompanybranch/" + $scope.Id);
            };
            $scope.ListRedirect = function () {
                $location.path("/companybranchlist/");
            };

            /*
           Close the pop up window for the create pop up on click cancel button 
           */
            $scope.CancelPopUp = function () {
                $scope.ClearCompanyBranchPopUp();
                angular.element('#CompanyBranchModal').modal('hide');
            };

            /*
           Close the pop up window for the view pop up on click cancel button 
           */
            $scope.CancelPopUpview = function () {
                $scope.ClearCompanyBranchPopUp();
                angular.element('#ViewModal').modal('hide');
            };
        }
    ]);

    //this is for Work Flow controller//
    EmpControllers.controller("WorkFlowController", ['$scope', '$http', '$filter', '$routeParams', '$window', 'filterFilter', '$location', '$rootScope', '$timeout',
        function ($scope, $http, $filter, $routeParams, $window, $ff, $location, $rootScope, $timeout) {

            /* Validating the create page mandatory fields
            checking mandatory for the follwing fields
            Application Role,From Status,To status,From and To status
            and showing alert message when it is null.
            */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.ApplicationRole) == "undefined" || $scope.ApplicationRole == 0) {
                    alert("Please select Application Role");
                    return false;
                }
                else if (typeof ($scope.FromStatus) == "undefined" || $scope.FromStatus == 0) {
                    alert("Please select From Status");
                    return false;
                }
                else if (typeof ($scope.ToStatus) == "undefined" || $scope.ToStatus == 0) {
                    alert("Please select To Status");
                    return false;
                }
                else if ($scope.FromStatus == $scope.ToStatus) {
                    alert("Please select different from status and to status");
                    return false;
                }
                return true;
            };

            /*THIS IS FOR PAGINATION FUNCTION */
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.ApplicationRole = "0";
            $scope.FromStatus = "0";
            $scope.ToStatus = "0";

            /*
           Calling the api method to list the work flow details and
           showing the result in table.
           */
            $scope.WorkFlowListSearch = function () {
                $scope.emptydata = [];
                $scope.rowCollection = [];

                $http.get(baseUrl + '/api/WorkFlow/WorkFlow_List/').success(function (data) {
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    $scope.CommonTransaction_Id = data;

                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing Work Schedule Details!" + data;
                });
            };


            $scope.loading = false;
            /*
         Calling the api method to list the work flow details and
         showing the result in table.
         */
            $scope.WorkFlowRoleListSearch = function () {
                $scope.VieTransactionName();
                $scope.emptydata = [];
                $scope.rowCollection = [];
                if ($routeParams.Id != undefined) {
                    $scope.CommonTransaction_Id = $routeParams.Id;
                }

                if ($scope.CommonTransaction_Id > 0) {

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    },3000); // 3 second

                    $http.get(baseUrl + '/api/WorkFlow/CommonWorkFlow_List/?CommonTransaction_Id=' + $scope.CommonTransaction_Id).success(function (data) {
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                    }).error(function (data) {
                        $scope.error = "An error has occurred while Listing Work Schedule Details!" + data;
                    });
                }
            }


            $scope.CommonstatusList = [];
            /* 
            Calling api method for the dropdown list in the html page for the fields 
            Common Status,User Role
            */
            $http.get(baseUrl + 'api/Common/GetCommonStatusList/').success(function (data) {
                $scope.getCommonStatus = data;
                $scope.CommonstatusList = $ff(data, { IsActive: 1 });
            });
           


            $http.get(baseUrl + 'api/WorkFlow/UserRole_List/').success(function (data) {
                $scope.getUserRole = data;
            });

            $scope.DuplicateId = 0;
            $scope.ApplicationRole = "0";
            $scope.FromStatus = "0";
            $scope.ToStatus = "0";

            /*
          Call the api method for insert and Update the record for a work flow
          and display the record of selected work flow when Id is greater than 0
          in edit.html and provide an option for create and modify the work flow and save the work flow record
          */
            $scope.WorkFlow_AddEdit = function () {

          
                ////
                if ($scope.Validationcontrols() == true) {
                    $http.get(baseUrl + '/api/WorkFlow/Workflow_DuplicateCheck/?Id=' + $scope.DuplicateId + '&ApplicationRole_Id=' + $scope.ApplicationRole + '&FromStatus_Id=' + $scope.FromStatus + '&ToStatus_Id=' + $scope.ToStatus + '&CommonTransaction_Id=' + $scope.CommonTransaction_Id).success(function (data) {
                        if (data == 1) {
                            alert("Workflow details already exists, cannot duplicate");
                            return false;
                        }
                        else {
                            // $scope.CommonTransaction_Id = $routeParams.Id;
                            var obj = {

                                Id: $scope.Id,
                                CommonTransaction_Id: $scope.CommonTransaction_Id,
                                FromStatus_Id: $scope.FromStatus,
                                ToStatus_Id: $scope.ToStatus,
                                ApplicationRole_Id: $scope.ApplicationRole

                            };

                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            },3000); // 3 second

                            $http.post(baseUrl + '/api/WorkFlow/WorkFlow_AddEdit/', obj).success(function (data) {
                                alert("Saved Successfully");
                                $scope.WorkFlowRoleListSearch();
                                $scope.ClearPopup();

                                $scope.changeBackColor = [];

                                $scope.loading = false;
                                $rootScope.$broadcast('hide');

                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding Advance Preclosure details!" + data.ExceptionMessage;
                            });
                        }
                    }).error(function (data) {

                        $scope.error = "Problem in checking Fyconfiguration duplicate!" + data.ExceptionMessage;
                    });
                };
            };

            /*THIS IS FOR CLEAR FUNCITON */
            $scope.ClearPopup = function () {
                $scope.Id = 0;
                $scope.ApplicationRole = "0";
                $scope.FromStatus = "0";
                $scope.ToStatus = "0";

                $scope.CommonfromstatusInactiveFlag = 0;
                $scope.CommontotatusInactiveFlag = 0;

            };

            /*
         Calling the api method to view the details of the work flow
         for the work flow Id 
         and display the details in the view pop up window.
         */

            $scope.changeBackColor = [];

            $scope.ViewWorkFlow = function (catId, rowId) {

                $scope.changeBackColor = [];

                $scope.Id = catId;
                $scope.DuplicateId = $routeParams.Id;
                $http.get(baseUrl + 'api/WorkFlow/CommonWorkFlow_View/?Id=' + $scope.Id).success(function (data) {            

                    $scope.DuplicateId = data.Id;
                    $scope.CommonTransaction_Id = data.CommonTransaction_Id;
                    $scope.TransactionName = data.TransactionName;
                    $scope.Employee_Name = data.Employee_Name;
                    $scope.FromStatus = data.FromStatus_Id.toString();
                    $scope.listFromStatus = data.FromStatus;
                    $scope.ToStatus = data.ToStatus_Id.toString();
                    $scope.listToStatus = data.ToStatus;
                    $scope.ApplicationRole = data.ApplicationRole_Id.toString();
                    $scope.listApplicationRole = data.ApplicationRole;

                    $scope.CommonfromstatusInactiveFlag = 0;
                    $scope.CommontotatusInactiveFlag = 0;

                    // if the current viewing company is inactive
                    // set the flag value to 1
                    if (($ff($scope.getCommonStatus, { Id: $scope.FromStatus, Name: $scope.listFromStatus, IsActive: 0 }).length) == 1) {
                        $scope.CommonfromstatusInactiveFlag = 1;
                    }

                    if (($ff($scope.getCommonStatus, { Id: $scope.ToStatus, Name: $scope.listToStatus, IsActive: 0 }).length) == 1) {
                        $scope.CommontotatusInactiveFlag = 1;
                    }

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Advance Work flow details!" + data;
                });
                $scope.changeBackColor[rowId] = "tdBackColor";
            };

            /*
       Calling the api method to view the details of the transaction
       for the transaction Id 
       and display the details in the view pop up window.
       */
            $scope.VieTransactionName = function () {
                if ($routeParams.Id != undefined) {
                    $scope.CommonTransactionId = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/WorkFlow/Transaction_View/?Id=' + $scope.CommonTransactionId).success(function (data) {
                    $scope.Transaction = data.TransactionName;

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Advance Preclosure details!" + data;
                });
            };

            /* THIS IS REDIRECT FUNCTION */
            $scope.Redirect = function (catId) {
                $location.path("/WorkFlowList/");
            }
        }
    ]);

    //This is for Leave Policy controller functions//
    EmpControllers.controller("LeavePolicyController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

                // Declaration and initialization of Scope Variables.
                $scope.AddApplicableTo = "0";
                $scope.AddBasedOn = "0";
                $scope.AddEffectiveFrom = "0";
                $scope.AddEffectiveType = 0;
                $scope.AddCarryforward = "0";
                $scope.AddEncashed = "0";
                $scope.IsEarnedLeave = "0";
                $scope.AddEarnedLeaveType = "0";
                $scope.AddLeaveRoundOff = "0";
                $scope.Name = "0";
                $scope.AddEffectiveType = "0";
                $scope.FromYear ="0";
                $scope.ToYear ="0";

                // List Page Pagination.
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }
                $scope.listdata = [];

                /* THIS IS FOR VALIDATION FUNCTION */
                /* Validating the create page mandatory fields
                checking mandatory for the follwing fields
                Leave Type,LocationName,Department_Name,Grade,ToYear,FromYear,AddApplicableTo,AddBasedOn,
                EntitledLimit,MaxCarryforward,MaxEncashableDays,MaxDaysRequest,MinDaysRequest
                and showing alert message when it is null.
                */


                $scope.Validationcontrols = function () {
                    if (parseInt($scope.EntitledLimit) < parseInt($scope.MaxCarryforward)) {
                        alert("Please enter Maximum Carryforward per year within the Entitled Limit");
                        return false;
                    }
                    else if (parseInt($scope.EntitledLimit) < parseInt($scope.MaxEncashableDays)) {
                        alert("Please enter Maximum Encashable per year within the Entitled Limit");
                        return false;
                    }
                    else if (parseInt($scope.EntitledLimit) < parseInt($scope.MinDaysRequest)) {
                        alert("Please enter Minimum days per request less than the Entitled Limit");
                        return false;
                    }
                    else if (parseInt($scope.EntitledLimit) < parseInt($scope.MaxDaysRequest)) {
                        alert("Please enter Maximum days per request less than the Entitled Limit");
                        return false;
                    }
                    else if (parseInt($scope.MaxDaysRequest) < parseInt($scope.MinDaysRequest)) {
                        alert("Please enter Maximum days per request greater than Minimum days per request");
                        return false;
                    }
                    else if (typeof ($scope.Name) == "undefined" || $scope.Name == "0") {
                        alert("Please select Leave Type");
                        return false;
                    }
                    else if (typeof ($scope.LocationName.length) == "undefined" || $scope.LocationName.length == "0") {
                        alert("Please select Location Name");
                        return false;
                    }
                    else if (typeof ($scope.Department_Name.length) == "undefined" || $scope.Department_Name.length == "0") {
                        alert("Please select Department Name");
                        return false;
                    }
                    else if (typeof ($scope.Grade.length) == "undefined" || $scope.Grade.length == "0") {
                        alert("Please select Grade");
                        return false;
                    }
                    else if (typeof ($scope.FromYear) == "undefined" || $scope.FromYear == "0") {
                        alert("Please select Effective From Year");
                        return false;
                    }
                    else if (typeof ($scope.ToYear) == "undefined" || $scope.ToYear == "0") {
                        alert("Please select Effective To Year");
                        return false;
                    }

                    else if (parseInt($scope.FromYear) > parseInt($scope.ToYear)) {
                        alert("Please select From year less than To year");
                        return false;
                    }

                    else if (typeof ($scope.AddApplicableTo) == "undefined" || $scope.AddApplicableTo == "0") {
                        alert("Please select Applicable To");
                        return false;
                    }
                    else if (typeof ($scope.AddBasedOn) == "undefined" || $scope.AddBasedOn == "0") {
                        alert("Please select Based On");
                        return false;
                    }
                    else if ((parseInt($scope.FromYear) == parseInt($scope.ToYear)) && $scope.AddBasedOn == "2") {
                        alert("Please select Based On to be a Calendar year");
                        return false;
                    }
                    else if (typeof ($scope.AddEffectiveFrom) == "undefined" || $scope.AddEffectiveFrom == "0") {
                        alert("Please select Effective From");
                        return false;
                    }

                    else if (typeof ($scope.EntitledLimit) == "undefined" || $scope.EntitledLimit == "") {
                        alert("Please enter Entitled Limit of the year");
                        return false;
                    }
                    else if (typeof ($scope.AddCarryforward) == "undefined" || $scope.AddCarryforward == "0") {
                        alert("Please select Carry forward");
                        return false;
                    }
                    else if ($scope.MaxCarryforward == "" && ($scope.AddCarryforward == 1)) {
                        alert("Please enter Maximum Carry Forward");
                        return false;
                    }

                    else if (typeof ($scope.AddEncashed) == "undefined" || $scope.AddEncashed == "0") {
                        alert("Please select Encashed");
                        return false;
                    }
                    else if ($scope.MaxEncashableDays == "" && ($scope.AddEncashed == 1)) {
                        alert("Please enter Maximum Encashable Days");
                        return false;
                    }
                    else if (typeof ($scope.MinDaysRequest) == "undefined" || $scope.MinDaysRequest == "") {
                        alert("Please enter Minimum Days per Request");
                        return false;
                    }


                        /* Check the MinimumDaysRequest decimal value is .5 and 0.25 only*/
                    else if (($scope.MinDaysRequest + "").split(".").length > 1) {
                        if (($scope.MinDaysRequest + "").split(".")[1] != 25 && ($scope.MinDaysRequest + "").split(".")[1] != 5) {
                            alert("Please enter valid Minimum Days per Request");
                            return false;
                        }
                    }

                    if (typeof ($scope.MaxDaysRequest) == "undefined" || $scope.MaxDaysRequest == "") {
                        alert("Please enter Maximum Days per Request");
                        return false;
                    }

                        /* Check the Maximum DaysRequest decimal value is .5 and 0.25 only*/
                    else if (($scope.MaxDaysRequest + "").split(".").length > 1) {
                        if (($scope.MaxDaysRequest + "").split(".")[1] != 25 && ($scope.MaxDaysRequest + "").split(".")[1] != 5) {
                            alert("Please enter valid Maximum Days per Request");
                            return false;
                        }
                    }

                    if (($scope.MinDaysRequest + "").split(".")) {
                        if (($scope.MinDaysRequest + "").split(".")[1] == "") {
                            alert("Please enter valid Minimum Days per Request");
                            return false;
                        }
                    }
                    if (($scope.MaxDaysRequest + "").split(".")) {
                        if (($scope.MaxDaysRequest + "").split(".")[1] == "") {
                            alert("Please enter valid Maximum Days per Request");
                            return false;
                        }
                    }
                    if($scope.IsEarnedLeave == true && $scope.AddEarnedLeaveType == 0)
                    {
                        alert ("Please select Begining Month or End Month");
                        return false;
                    }
                    if($scope.AttachmentFlag == true && $scope.LeaveRequesteddays ==0 || $scope.LeaveRequesteddays == null)
                    {
                        alert ("Please enter Leave Request days");
                        return false;
                    }

                    return true;
                };

           
            

                /*  Calling api method for the dropdown list in the html page for the fields 
               LeaveType,LocationName,Grade,genderlist,Department
               */

                // all LeaveType records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.LeaveType = [];
                $http.get(baseUrl + '/api/Common/GetLeaveTypeList/').success(function (data) {
                    $scope.LeaveType = data;
                    // only active LeaveType
                    $scope.LeaveTypeList = $ff(data, { Active: 1 });
                });

                // all LocationName records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.LocationName = [];
                $http.get('/api/Common/GetLocationList/').success(function (data) {
                    //  console.log(data);
                    $scope.LocationNameList = data;
                });

                // all Grade records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.Grade = [];
                $http.get('/api/Common/GetGradeMaster/').success(function (data) {
                    $scope.GradeList = data;
                });

                // all gender records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.genderlist = [];
                $http.get('/api/Common/GetGenderList/').success(function (data) {
                    $scope.genderlist = data;
                    // only active Gender
                    $scope.GenderNameList = $ff(data, { Active: 1 });
                });

                // all Department records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.Department_Name = [];
                $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
                    $scope.DepartmentNameList = data;
                });

                $scope.populateYearPopulateList = function () {
                    $http.get(baseUrl + 'api/Common/GetYearList/').success(function (data) {
                        $scope.getYearList = data;
                        $scope.getToYearList = data;
                        $scope.getYear = $ff(data, { Active: 1 });
                        $scope.getToYear = $ff(data, { Active: 1 });

                        $scope.FromYear = new Date().getFullYear().toString();

                        var myDate = new Date();
                        var nextYear = new Date(myDate);
                        (myDate.getFullYear() + 1);

                        $scope.ToYear = (myDate.getFullYear() + 1);

                        $scope.From_Year = $.grep($scope.getYear, function (yearitem) {
                            return yearitem.Year == $scope.FromYear;
                        })[0].Id.toString();

                        $scope.To_Year = $.grep($scope.getYear, function (yearitem) {
                            return yearitem.Year == $scope.ToYear;
                        })[0].Id.toString();
                       // $scope.ListLeavePolicyPopup();
                        $scope.LeavePolicy_ListsearchGo();
                    });
                }

                $scope.Clearflag = function () {
                    $scope.LeaveRequesteddays = "";
                };


                // Declaration and initialization of Scope Variables.
                $scope.Id = 0;
                $scope.Id = "0";
                $scope.Name = "0";
                $scope.LocationName = [];
                $scope.Department_Name = [];
                $scope.Grade = [];
                // $scope.FromYear = "0";
                // $scope.ToYear = "0";
                //   $scope.From_Year = "0";
                //  $scope.To_Year = "0";
                $scope.EffectiveMonth = "";
                $scope.EffectiveDays = "";

                //To check from year is greater than to year in list page filter.
                $scope.ListValidation = function () {
                    if (($scope.From_Year != "0") && ($scope.To_Year != "0")) {
                        if ((parseInt($scope.To_Year) < parseInt($scope.From_Year))) {
                            alert("From year should not be greater than To year");
                            return false;
                        }
                    }
                    return true;
                };

                /* Open the create pop up window */
                $scope.AddLeavePolicyPopup = function (LPID) {
                    $scope.CancelPopup();
                    $scope.Id = LPID;
                    angular.element('#LeaveModel').modal('show');
                }

                /* Open the view pop up window and show the details for the 
                 leavepolicy for the  leave policy Id */
                $scope.changeBackColor = [];
                $scope.ViewLeavePolicyPopup = function (LPID, $index) {
                    $scope.changeBackColor = [];
                    $scope.Id = LPID;
                    $scope.ViewLeavePolicy();
                    $scope.changeBackColor[LPID, $index] = "tdBackColor";
                    angular.element('#LeaveModelView').modal('show');
                }
                /* Open the edit pop up window and show the details for the 
                leavepolicy for the  leave policy Id */
                $scope.changeBackColor = [];
                $scope.EditLeavePolicyPopup = function (LPID, $index) {
                    $scope.changeBackColor = [];
                    $scope.Id = LPID;
                    $scope.ViewLeavePolicy();
                    $scope.changeBackColor[LPID, $index] = "tdBackColor";
                    angular.element('#LeaveModel').modal('show');

                }

                /* List page pop up function */
                $scope.ListLeavePolicyPopup = function (LPID) {

                    //if ($routeParams.Id == 0) {
                    //    $scope.rowCollection = [];
                    //}
                    //if ($scope.Id == 0 && $scope.Mode == 1) {

                    //    $scope.LeavePolicy_Listsearch();
                    //}
                    //else if ($scope.Id > 0 && $scope.Mode == 1) {

                    //    $scope.LeavePolicy_Listsearch();
                    //}
                    //if (LPID > 0) {
                    $scope.Id = LPID
                    $scope.LeavePolicy_Listsearch($scope.Id);
                    //}
                }

                //To check if inctive record is tried to edit.
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }

                /* Hard coded value for the selection of Carryforward dropdown values */
                $scope.ForCarryforward = function (Carryforward) {
                    $scope.Carryforward = Carryforward;
                    if (Carryforward == 1) {
                        $scope.CarryforwardView = "Yes";
                    }
                    else {
                        $scope.CarryforwardView = "No";
                    }
                }

                /* Hard coded value for the selection of Encashed dropdown values */
                $scope.ForEncashed = function (Encashed) {
                    $scope.Encashed = Encashed;
                    if (Encashed == 1) {
                        $scope.EncashedView = "Yes";
                    }
                    else {
                        $scope.EncashedView = "No";
                    }
                }

                /* Hard coded value for the selection of ApplicableTo dropdown values */
                $scope.ForApplicableTo = function (ApplicableTo) {
                    $scope.ApplicableTo = ApplicableTo;
                    if (ApplicableTo == null) {
                        $scope.ViewApplicableTo = "All";
                    }

                }

                /* Hard coded value for the selection of BasedOn dropdown values */
                $scope.ForBasedOn = function (BasedOn) {
                    $scope.BasedOn = BasedOn;
                    if (BasedOn == 1) {
                        $scope.BasedOnView = "Calendar Year";
                    }
                    else if (BasedOn == 2) {
                        $scope.BasedOnView = "Financial Year";
                    }
                }

                /* Hard coded value for the selection of EffectiveFrom dropdown values */
                $scope.ForEffectiveFrom = function (EffectiveFrom) {
                    $scope.EffectiveFrom = EffectiveFrom;
                    if (EffectiveFrom == 1) {
                        $scope.EffectiveFromView = "Calendar Year";
                    }
                    else if (EffectiveFrom == 2) {
                        $scope.EffectiveFromView = "Joining Year";
                    }
                }

                /* Hard coded value for the selection of EffectiveType dropdown values */
                $scope.ForEffectiveType = function (EffectiveType) {
                    $scope.EffectiveType = EffectiveType;
                    if (EffectiveType == 1) {
                        $scope.EffectiveTypeView = "Month";
                    }
                    else if (EffectiveType == 2) {
                        $scope.EffectiveTypeView = "Days";
                    }
                    else {
                        $scope.AddEffectiveType = "0";
                    }
                }

                /* Hard coded value for the selection of LeaveRoundOff dropdown values */
                $scope.ForLeaveRoundOff = function (LeaveRoundOff) {
                    $scope.LeaveRoundOff = LeaveRoundOff;
                    if (LeaveRoundOff == 1) {
                        $scope.LeaveRoundOffView = "Yes";
                    }
                    else if (LeaveRoundOff == 2) {
                        $scope.LeaveRoundOffView = "No";
                    }
                }

                /* Hard coded value for the selection of EarnedLeaveType dropdown values */
                $scope.ForEarnedLeaveType = function (EarnedLeaveType) {
                    $scope.EarnedLeaveType = EarnedLeaveType;
                    if ($scope.IsEarnedLeave == 1) {
                        if (EarnedLeaveType == 1) {
                            $scope.EarnedLeaveTypeView = "Begining Month";
                        }
                        else if (EarnedLeaveType == 2) {
                            $scope.EarnedLeaveTypeView = "End Month";
                        }
                    }
                    else {
                        $scope.AddEarnedLeaveType = "0";
                    }
                };

                // Hiding of month or days input field depending upon the selection of Effective type.
                $scope.Effective = function () {
                    if ($scope.AddEffectiveType == 1) {
                        $scope.EffectiveMonth = "";
                    }
                    else if ($scope.AddEffectiveType == 2) {
                        $scope.EffectiveDays = "";
                    }
                };

                /* View the inserted values */
                $scope.ViewLeavePolicy = function () {
                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                        $scope.MasterId = $routeParams.Id;
                        $scope.DuplicateId = $routeParams.Id;

                    }
                    $http.get(baseUrl + 'api/LeavePolicy/LeavePolicy_View/?Id=' + $scope.Id).success(function (data) {
                        // $scope.Id = data.Id;
                        $scope.DuplicateId = data.Id;
                        $scope.Name = data.LeaveTypeId.toString();
                        $scope.listName = data.Name;
                        $scope.FromYear = data.FromYearId.toString();
                        $scope.ViewFromYear = data.FromYear;
                        $scope.ToYear = data.ToYearId.toString();
                        $scope.ViewToYear = data.ToYear;
                        $scope.AddApplicableTo = data.ApplicableTo.toString();
                        $scope.ViewApplicableTo = data.ViewApplicableTo;
                        if ($scope.ViewApplicableTo == null)
                        { $scope.ForApplicableTo($scope.ViewApplicableTo); }
                        $scope.AddBasedOn = data.BasedOn.toString();
                        $scope.ForBasedOn(data.BasedOn);
                        $scope.AddEffectiveFrom = data.EffectiveFrom.toString();
                        $scope.ForEffectiveFrom(data.EffectiveFrom);
                        $scope.AddEffectiveType = data.EffectiveType.toString();
                        $scope.ForEffectiveType(data.EffectiveType);
                        $scope.EffectiveMonth = data.EffectiveMonth;
                        $scope.EffectiveDays = data.EffectiveDays;
                        $scope.EntitledLimit = data.EntitledLimit;
                        $scope.AddCarryforward = data.Carryforward.toString();
                        $scope.ForCarryforward(data.Carryforward);
                        $scope.MaxCarryforward = data.MaxCarryforward;
                        $scope.AddEncashed = data.Encashed.toString();
                        $scope.ForEncashed(data.Encashed);
                        $scope.MaxEncashableDays = data.MaxEncashableDays;
                        $scope.MinDaysRequest = data.MinDaysRequest;
                        $scope.MaxDaysRequest = data.MaxDaysRequest;
                        $scope.AddLeaveRoundOff = data.LeaveRoundOff.toString();
                        $scope.ForLeaveRoundOff(data.LeaveRoundOff);
                        $scope.HRApproval = data.HRApproval;
                        $scope.IncHoliday = data.IncHoliday;
                        $scope.IsEarnedLeave = data.IsEarnedLeave;
                        $scope.AddEarnedLeaveType = data.EarnedLeaveType.toString();
                        $scope.ForEarnedLeaveType(data.EarnedLeaveType);
                        $scope.AllowLeave = data.AllowLeave;
                        $scope.AttachmentFlag = data.AttachmentFlag;
                        $scope.LeaveRequesteddays = data.LeaveRequesteddays;

                        $scope.LeaveInactiveFlag = 0;
                        // if the current viewing LeaveType is inactive
                        // set the flag value to 1
                        if (($ff($scope.LeaveType, { Id: $scope.Name, Name: $scope.listName, Active: 0 }).length) == 1) {
                            $scope.LeaveInactiveFlag = 1;
                        }

                        // if the current viewing genderlist is inactive
                        // set the flag value to 1
                        $scope.GenderInactiveFlag = 0;
                        if (($ff($scope.genderlist, { Id: $scope.Name, Name: $scope.ViewApplicableTo, Active: 0 }).length) == 1) {
                            $scope.GenderInactiveFlag = 1;
                        }
                        /* To populate the selected locations in the view */
                        $http.get('/api/LeavePolicy/LocationMaster_View/?Id=' + $scope.Id).success(function (Locationdata) {

                            $scope.LocationName = [];
                            angular.forEach(Locationdata, function (locationItem, locationIndex) {
                                var locObj = { LocationId: locationItem.Id, LeavePolicyId: locationItem.LeavePolicyId, Id: locationItem.LocationId, Location: locationItem.LocationName }
                                $scope.LocationName.push(locObj);
                            });
                            /* To populate the selected Departments in the view */
                            $http.get('/api/LeavePolicy/DepartmentMaster_View/?Id=' + $scope.Id).success(function (Departmentdata) {
                                $scope.Department_Name = [];
                                angular.forEach(Departmentdata, function (DepartmentItem, DepartmentIndex) {
                                    var DeptObj = { DepartmentId: DepartmentItem.Id, LeavePolicyId: DepartmentItem.LeavePolicyId, Id: DepartmentItem.DepartmentId, GroupName: DepartmentItem.Department_Name }
                                    $scope.Department_Name.push(DeptObj);
                                });
                                /* To populate the selected Grades in the view */
                                $http.get('/api/LeavePolicy/GradeMaster_View/?Id=' + $scope.Id).success(function (Gradedata) {
                                    $scope.Grade = [];
                                    angular.forEach(Gradedata, function (GradeItem, GradeIndex) {
                                        var GradeObj = { GradeId: GradeItem.Id, LeavePolicyId: GradeItem.LeavePolicyId, Id: GradeItem.GradeId, GradeName: GradeItem.Grade }
                                        $scope.Grade.push(GradeObj);

                                    });
                                });
                            });
                        });
                    }).error(function (data) {
                        $scope.error = "AN error has occured while list Leave Policy Details!" + data;
                    });
                };

                //Delete popup function// 
                $scope.changeBackColor = [];
                $scope.DeleteLeavePolicy = function (LPYId, $index) {
                    $scope.changeBackColor = [];
                    $scope.Id = LPYId;
                    $scope.changeBackColor[LPYId, $index] = "tdBackColor";
                    $scope.LeavePolicyDelete();
                };


                $scope.LeavePolicyDelete = function ($index) {
                    $scope.changeBackColor[$index] = "tdBackColor";
                    var del = confirm("Do you like to inactivate the selected leave policy?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/LeavePolicy/LeavePolicy_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected leave policy has been inactivated successfully");
                            $scope.ListLeavePolicyPopup($scope.Id = 0);
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Leave Policy details" + data;
                        });
                    };
                };

                //Activate record pop up function// 
                $scope.changeBackColor = [];
                $scope.ReInsertLeavePolicy = function (LPYId, $index) {
                    $scope.changeBackColor = [];
                    $scope.Id = LPYId;
                    $scope.changeBackColor[LPYId, $index] = "tdBackColor";
                    $scope.ReInsertLeavePolicyDetails();
                };

                /*Activate the inactivated records in the list page */
                $scope.ReInsertLeavePolicyDetails = function () {
                    var Ins = confirm("Do you like to activate the selected leave policy?");
                    if (Ins == true) {
                        $http.get(baseUrl + 'api/LeavePolicy/LeavePolicy_ReInsert/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected leave policy has been activated successfully");

                            $scope.ListLeavePolicyPopup($scope.Id = 0);
                            $scope.changeBackColor = [];
                        }).error(function (data) {
                            $scope.error = "An error has occurred while inserted Leave Policy Detail" + data;
                        });
                    };
                }

                $scope.Leave_Days = "0";
                $scope.AttachmentFlag = 0;
                $scope.LeaveRequesteddays = 0;


                /* Clear the create page scope variable values. */
                $scope.ClearLeavePolicyPopup = function () {
                    $scope.Name = "0";
                    $scope.LocationName = [];
                    $scope.FromYear = "0";
                    $scope.Department_Name = [];
                    $scope.ToYear = "0";
                    $scope.Grade = [];
                    $scope.AddApplicableTo = "0";
                    $scope.AddBasedOn = "0";
                    $scope.AddEffectiveFrom = "0";
                    $scope.AddEffectiveType = "0";
                    $scope.EffectiveMonth = "";
                    $scope.EffectiveDays = "";
                    $scope.EntitledLimit = "";
                    $scope.AddCarryforward = "0";
                    $scope.MaxCarryforward = "";
                    $scope.AddEncashed = "0";
                    $scope.MaxEncashableDays = "";
                    $scope.MinDaysRequest = "";
                    $scope.MaxDaysRequest = "";
                    $scope.IsEarnedLeave = "0";
                    $scope.AddEarnedLeaveType = "0";
                    $scope.HRApproval = "";
                    $scope.AddLeaveRoundOff = "0";
                    $scope.IncHoliday = "";
                    $scope.AllowLeave = "";
                    $scope.LocaIdList = "";
                    $scope.DeptIdList = "";
                    $scope.GradeIdList = "";
                    $scope.EarnedLeaveTypeView = "";
                    $scope.EffectiveTypeView = "";
                    $scope.LeaveInactiveFlag = 0;
                    $scope.GenderInactiveFlag = 0;
                    $scope.AttachmentFlag = 0;
                    $scope.LeaveRequesteddays = 0;
                }

                $scope.LocaIdList = "";
                $scope.DeptIdList = "";
                $scope.GradeIdList = "";
                $scope.GetDeleteItemslist = function () {
                    for (i = 0; i < $scope.LocationName.length; i++) {
                        if ($scope.LocaIdList != "") {
                            $scope.LocaIdList = $scope.LocaIdList + ",";
                        }
                        $scope.LocaIdList = $scope.LocaIdList + $scope.LocationName[i].Id.toString();

                    };


                    for (i = 0; i < $scope.Department_Name.length; i++) {
                        if ($scope.DeptIdList != "") {
                            $scope.DeptIdList = $scope.DeptIdList + ",";
                        }
                        $scope.DeptIdList = $scope.DeptIdList + $scope.Department_Name[i].Id.toString();

                    };

                    for (i = 0; i < $scope.Grade.length; i++) {
                        if ($scope.GradeIdList != "") {
                            $scope.GradeIdList = $scope.GradeIdList + ",";
                        }
                        $scope.GradeIdList = $scope.GradeIdList + $scope.Grade[i].Id.toString();

                    };

                };

                $scope.EffectiveDays = "";
                $scope.EffectiveMonth = "";

                $scope.DuplicateId = 0;
                $scope.LeavePolicy_AddEdit = function () {
                    if ($scope.Validationcontrols() == true) {
                        for (i = 0; i < $scope.LocationName.length; i++) {
                            if ($scope.LocaIdList != "") {
                                $scope.LocaIdList = $scope.LocaIdList + ",";
                            }
                            $scope.LocaIdList = $scope.LocaIdList + $scope.LocationName[i].Id.toString();

                        };


                        for (i = 0; i < $scope.Department_Name.length; i++) {
                            if ($scope.DeptIdList != "") {
                                $scope.DeptIdList = $scope.DeptIdList + ",";
                            }
                            $scope.DeptIdList = $scope.DeptIdList + $scope.Department_Name[i].Id.toString();

                        };

                        for (i = 0; i < $scope.Grade.length; i++) {
                            if ($scope.GradeIdList != "") {
                                $scope.GradeIdList = $scope.GradeIdList + ",";
                            }
                            $scope.GradeIdList = $scope.GradeIdList + $scope.Grade[i].Id.toString();

                        };
                        if ($scope.Name != "") {
                            $http.get(baseUrl + '/api/LeavePolicy/LeavePolicy_DuplicateCheck/?Id=' + $scope.DuplicateId + '&LeaveType=' + $scope.Name + '&Department=' + $scope.DeptIdList + '&Grade=' + $scope.GradeIdList + '&Location=' + $scope.LocaIdList + '&Gender=' + $scope.AddApplicableTo + '&FromYear=' + $scope.FromYear + '&ToYear=' + $scope.ToYear).success(function (data) {

                                if (data.returnval == 1) {
                                    alert("This Leave Policy already exists, cannot duplicate");
                                    return false;
                                }
                                else {
                                    $scope.InsertLeavePolicy_AddEdit();
                                }
                                //return true;
                                //$scope.InsertLeavePolicy_AddEdit();
                            });
                            return true;
                        };
                    }

                };
                $scope.loading = false;
                /* THIS IS FOR ADD EDIT FUNCTION */
                $scope.InsertLeavePolicy_AddEdit = function () {
                    if ($scope.Validationcontrols() == true) {
                        $scope.GetDeleteItemslist();
                        // Hiding of month or days input field depending upon the selection of Effective type.
                        if ($scope.AddEffectiveType == 1) {
                            $scope.EffectiveMonth = $scope.EffectiveMonth;
                        }
                        else if ($scope.AddEffectiveType == 2) {
                            $scope.EffectiveDays = $scope.EffectiveDays;
                        }
                        else {
                            $scope.AddEffectiveType = "0";
                            $scope.EffectiveMonth = "";
                            $scope.EffectiveDays = "";
                        }
                        var obj = {
                            Id: $scope.Id,
                            LeaveTypeId: $scope.Name,
                            FromYearId: $scope.FromYear,
                            ToYearId: $scope.ToYear,
                            ApplicableTo: $scope.AddApplicableTo == 0 ? null : $scope.AddApplicableTo,
                            BasedOn: $scope.AddBasedOn == 0 ? null : $scope.AddBasedOn,
                            EffectiveFrom: $scope.AddEffectiveFrom == 0 ? null : $scope.AddEffectiveFrom,
                            EffectiveType: $scope.AddEffectiveType,
                            EffectiveMonth: $scope.EffectiveMonth == '' ? null : $scope.EffectiveMonth,
                            EffectiveDays: $scope.EffectiveDays == '' ? null : $scope.EffectiveDays,
                            EntitledLimit: $scope.EntitledLimit,
                            Carryforward: $scope.AddCarryforward == 0 ? null : $scope.AddCarryforward,
                            MaxCarryforward: $scope.MaxCarryforward == '' ? null : $scope.MaxCarryforward,
                            Encashed: $scope.AddEncashed == 0 ? null : $scope.AddEncashed,
                            MaxEncashableDays: $scope.MaxEncashableDays == '' ? null : $scope.MaxEncashableDays,
                            MinDaysRequest: $scope.MinDaysRequest,
                            MaxDaysRequest: $scope.MaxDaysRequest,
                            LeaveRoundOff: $scope.AddLeaveRoundOff == 0 ? null : $scope.AddLeaveRoundOff,
                            HRApproval: $scope.HRApproval == 0 ? null : $scope.HRApproval,
                            IncHoliday: $scope.IncHoliday == 0 ? null : $scope.IncHoliday,
                            IsEarnedLeave: $scope.IsEarnedLeave == 0 ? null : $scope.IsEarnedLeave,
                            EarnedLeaveType: $scope.AddEarnedLeaveType,
                            AllowLeave: $scope.AllowLeave == 0 ? null : $scope.AllowLeave,
                            AttachmentFlag: $scope.AttachmentFlag,
                            LeaveRequesteddays: $scope.LeaveRequesteddays,
                        };
                  
                        $scope.loading = true;
                        $timeout(function () {
                            if ($scope.loading == true) {
                                $rootScope.$broadcast('show');
                            }
                        }, 3000); // 5 seconds
                        $http.post(baseUrl + '/api/LeavePolicy/LeavePolicy_AddEdit/', obj).success(function (data) {                       
                            $scope.LeavePolicyId = data;
                            $scope.MasterId = data;
                            var LeavePolicyId = data;
                            angular.forEach($scope.LocationName, function (value, index) {
                                value.LeavePolicyId = $scope.LeavePolicyId;
                            });


                            $http.post(baseUrl + '/api/LeavePolicy/LocationMaster_AddEdit/', $scope.LocationName).success(function (data) {
                                angular.forEach($scope.Department_Name, function (value, index) {
                                    value.LeavePolicyId = $scope.LeavePolicyId
                                });
                                $http.post(baseUrl + '/api/LeavePolicy/DepartmentMaster_AddEdit/', $scope.Department_Name).success(function (data) {
                                    angular.forEach($scope.Grade, function (value, index) {
                                        value.LeavePolicyId = $scope.LeavePolicyId
                                    });
                                    $http.post(baseUrl + '/api/LeavePolicy/GradeMaster_AddEdit/', $scope.Grade).success(function (data) {

                                        $scope.LeavePolicyDetailsDelete($scope.LeavePolicyId);
                                        $scope.ListLeavePolicyPopup(LeavePolicyId);
                                        angular.element('#LeaveModel').modal('hide');
                                        $scope.ClearLeavePolicyPopup();
                                    }).error(function (data) {
                                        $scope.error = "An error has occurred while adding Grade!" + data.ExceptionMessage;
                                    });
                                }).error(function (data) {
                                    $scope.error = "An error has occurred while adding Department!" + data.ExceptionMessage;
                                });
                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding Location!" + data.ExceptionMessage;
                            });
                            $scope.loading = false;
                            $rootScope.$broadcast('hide');
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding LeavePolicy!" + data.ExceptionMessage;
                        });
                    }
                };
                $scope.Id = "0";
                $scope.Leave_Name = "0";
                $scope.From_Year = "0";
                $scope.To_Year = "0";
                $scope.Location = "0";
                $scope.IsActive = "1";

                /*
               Calling the api method to list the leavepolicy details matching the specified filters  leave name,from year,to year,location,status and
               showing the result in table.
               */
                //$scope.emptydata = [];
                //$scope.rowCollection = [];
                //$scope.flag = 0;


                $scope.loading = false;
                $scope.LeavePolicy_Listsearch = function () {
                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 seconds


                    $http.get(baseUrl + 'api/LeavePolicy/LeavePolicy_DetailList/?Id=' + $scope.Id + '&LeaveTypeId=' + $scope.Leave_Name + '&FromYearId=' + $scope.From_Year + '&ToYearId=' + $scope.To_Year + '&LocationId=' + $scope.Location + '&Active=' + $scope.IsActive).success(function (data) {
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                        //if ($scope.rowCollection.length > 0) {
                        //    $scope.flag = 1;
                        //}
                        //else {
                        //    $scope.flag = 0;
                        //}
                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };

                /* on click Go calling the list function.*/
                $scope.LeavePolicy_ListsearchGo = function () {
                    $scope.changeBackColor = [];
                    $scope.Id = 0;
                    // $scope.Mode = 1;
                    $scope.ListLeavePolicyPopup($scope.Id);
                };

                $scope.ViewRedirect = function () {

                    $location.path("/LeavePolicyEdit/" + $scope.Id);
                };

                $scope.ListRedirect = function () {
                    // window.location.href = "/Home/Index#/LeavePolicyList/" + $scope.Id;
                    $location.path("/LeavePolicyList/" + $scope.Id);
                };


                /* Close the pop up window for the view pop up on click cancel button */
                $scope.Clearview = function () {
                    angular.element('#LeaveModelView').modal('hide');
                };
                /* Close the pop up window for the view pop up and edit pop up on click cancel button */
                $scope.CancelPopup = function () {
                    $scope.changeBackColor = [];
                    angular.element('#LeaveModel').modal('hide');
                    angular.element('#LeaveModelView').modal('hide');
                    $scope.ClearLeavePolicyPopup();
                };

                /* To delete the location, department and grade for the particular leave policy record */
                $scope.LeavePolicyDetailsDelete = function () {
                    $http.get(baseUrl + 'api/LeavePolicy/LeavePolicyDetails_Delete/?LeavePolicyId=' + $scope.Id + '&Locationstring=' + $scope.LocaIdList + '&Departmentstring=' + $scope.DeptIdList + '&Gradestring=' + $scope.GradeIdList).success(function (data) {
                        // alert("Leave Policy Details deleted Successfully");
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Leave Policy details" + data;
                    });
                };
            }
    ]);

    //this is for Menu Personalize controller//
    EmpControllers.controller("MenuPersonalizeController", ['$scope', '$http', '$filter', '$routeParams', '$location', '$window',
        function ($scope, $http, $filter, $routeParams, $location, $window) {
            $scope.Parent_Id = "0";

            $scope.User_Id = $window.localStorage['UserId'];

            /*THIS IS FOR VALIDATION FUNCTION */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.ApplicationRole) == "undefined" || $scope.ApplicationRole == 0) {
                    alert("Please select Application Role");
                    return ApplicationRole;
                }
                else if (typeof ($scope.FromStatus) == "undefined" || $scope.FromStatus == 0) {
                    alert("Please select From Status");
                    return FromStatus;
                }
                else if (typeof ($scope.ToStatus) == "undefined" || $scope.ToStatus == 0) {
                    alert("Please select To Status");
                    return ToStatus;
                }

            };

            /*THIS IS FOR PAGINATION FUNCTION */
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            //This is function for DROPDOWN LIST  
            $http.get(baseUrl + 'api/MenuPersonalize/Menu_FirstLevel_List/').success(function (data) {
                $scope.Menufirst = data;
                if (data != undefined) {
                    $scope.Menu_FirstLevel = data[0].Menu_Id.toString();
                    $scope.MenuLevelPopup($scope.Menu_FirstLevel);
                }

            });

            $scope.Parent_Id = 0;
            $scope.MenuLevelList = [];

            /* THIS IS FOR Menu POPUP FUNCTION */
            $scope.MenuLevelPopup = function (Menu) {
                $scope.Parent_Id = Menu;
                if ($scope.secondMenuLevelList[$scope.Parent_Id] != undefined) {
                    $scope.MenuLevelList = [];
                    $scope.MenuLevelList = $scope.secondMenuLevelList[$scope.Parent_Id];
                }
                else {
                    $http.get(baseUrl + 'api/MenuPersonalize/Menu_SecondLevel_List/?Parent_Id=' + $scope.Parent_Id).success(function (data) {
                        $scope.MenuLevelList = [];
                        $scope.MenuLevelList = data;

                    })
                }
            };

            /*Menu Level list display order*/
            $scope.FirstMenuLevelList = [];
            $scope.FirstMenuLevelitem = [];

            $scope.FirstDisplayOrder = function () {
                var listbox = document.getElementById("listFirstLevel");
                var selIndex = listbox.length;

                $scope.FirstMenuLevelList = [];

                $scope.FirstMenuLevelitem = [];

                for (i = 0; i < selIndex; i++) {
                    $scope.FirstMenuLevelitem.push({
                        'Menu_Level': $scope.Menu_FirstLevel,
                        'Id': $scope.Id,
                        'User_Id': $scope.User_Id,
                        'Menu_Id': listbox[i].value,
                        'Menu_Name': listbox[i].text,
                        'Display_Order': i + 1,
                    })
                };

                $scope.FirstMenuLevelList = $scope.FirstMenuLevelitem;

            }


            $scope.Id = 0;
            /* Sub Menu Level list display order*/
            $scope.secondMenuLevelList = [];
            $scope.secondMenuLevelitem = [];

            $scope.SecondDisplayOrder = function () {
                var listbox = document.getElementById("listSecondLevel");
                var selIndex = listbox.length;
                $scope.secondMenuLevelList[$scope.Menu_FirstLevel] = [];

                $scope.secondMenuLevelitem = [];

                for (i = 0; i < selIndex; i++) {

                    $scope.secondMenuLevelitem.push({
                        'Menu_Level': $scope.Menu_FirstLevel,
                        'Id': $scope.Id,
                        'User_Id': $scope.User_Id,
                        'Menu_Id': listbox[i].value,
                        'Menu_Name': listbox[i].text,
                        'Display_Order': i + 1,

                    })
                };

                $scope.secondMenuLevelList[$scope.Menu_FirstLevel] = $scope.secondMenuLevelitem;

            };

            /*Add/Edit function*/
            $scope.MenuPersonalize_AddEdit = function () {
                $scope.FirstDisplayOrder();
                $scope.menuList = [];
                $scope.menuList = $scope.FirstMenuLevelList;
                //$scope.menuList.push({ MenuPersonalizeModel: $scope.FirstMenuLevelList });
                angular.forEach($scope.FirstMenuLevelList, function (value, index) {
                    angular.forEach($scope.secondMenuLevelList[value.Menu_Id], function (menu, item) {
                        $scope.menuList.push(menu);
                    });
                });
                //obj.push({ MenuPersonalizeModel: $scope.FirstMenuLevelList});
                $http.post(baseUrl + '/api/MenuPersonalize/MenuPersonalize_AddEdit/', $scope.menuList).success(function (data) {
                    alert("Saved Successfully");
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Menu Personalize details!" + data.ExceptionMessage;
                });
            };

        }
    ]);

    //This is for leave balance controller//
    EmpControllers.controller("LeaveBalanceController", ['$scope', '$http', '$filter', '$routeParams', '$location', '$window', '$rootScope', '$timeout', 'filterFilter',
    function ($scope, $http, $filter, $routeParams, $location, $window, $rootScope, $timeout,$ff) {

        $scope.EmployeeId = $window.localStorage['UserId'];

        /*THIS IS FOR PAGINATION FUNCTION */
        $scope.listdata = [];
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }


        $scope.Adminroles = false;
        $http.get(baseUrl + '/api/Common/Employee_Get_IsAdminRoles/?Id=' + $scope.EmployeeId).success(function (data) {       
            if (data == true) {
                $scope.Adminroles = true;          

                $http.get(baseUrl + '/api/Common/GetLeaveTypeList_FromLeavePolicyList/?Id=' + $scope.Id).success(function (data) {
                    // all Leave Type records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.LeaveType = data;
                    // only active Leave Type
                    //  $scope.LeaveTypeList = $ff(data, { Active: 1 });
                });

                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                    $scope.Autofilterlist = data;
                    $scope.Autolist = data;
                });
            }

        });


        //$http.get(baseUrl + '/api/Common/Employee_Roles/?Id=' + $scope.EmployeeId).success(function (data) {
        //    $scope.EmployeeRoles = data;
       
        //    angular.forEach($scope.EmployeeRoles, function (value) {
        //        $scope.Adminroles = value.AdminRoles;
            

        //        $http.get(baseUrl + '/api/Common/GetLeaveTypeList_FromLeavePolicyList/?Id=' + $scope.Id).success(function (data) {
        //            // all Leave Type records list including active and inactive 
        //            // used for list page DD and inactive records filtering
        //            $scope.LeaveType = data;
        //            // only active Leave Type
        //            //  $scope.LeaveTypeList = $ff(data, { Active: 1 });
        //        });



                //$scope.Autolist = [];
                //$scope.Autofilterlist = [];
                //$http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                //    $scope.Autofilterlist = data;
                //    $scope.Autolist = data;
                //});

                ///*THIS IS EMPLOYEENAME DROPDOWN LIST*/
                //$scope.Autocompletefilter = function () {
                //    if ($scope.IsActive == 1) {

                //        $scope.Autolist = [];
                //        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                //    }
                //    else if ($scope.IsActive == 0) {
                //        $scope.Autolist = [];
                //        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                //    }
                //    else if ($scope.IsActive == -1) {
                //        $scope.Autolist = [];
                //        $scope.Autolist = $scope.Autofilterlist;
                //    }
                //};

        

            $scope.FullName = "";
            $scope.LeaveTypeId = "0";
            $scope.Leave_Type = "";


            $scope.Id = 0;
        /* on click Go calling the list function.*/
            $scope.LeavebalanceListGo = function () {
           
                $scope.Id = 0;
                $scope.Mode = 1;
                $scope.ListbalancePopUP($scope.Id, $scope.Mode);
            };
        /* List page pop up function */
            $scope.ListbalancePopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.getLeaveBalance();
            }

          //  $scope.LeaveBalance = "0";
            $scope.Leave_Balance = "=";
       
       
   
        $scope.loading = false;

        $scope.LeaveCollection = [];

        $scope.LB = "0";


        //This is the values to create page 
        //This is function for List page
        //To show the leave balance for the employee

        $scope.rowCollection = [];
   
        $scope.getLeaveBalance = function () {

            $scope.emptydata = [];
            $scope.rowCollection = [];

            var today = new Date();
            var dd = today.getDate();

            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = '0' + dd;
            }

            if (mm < 10) {
                mm = '0' + mm;
            }
            today = yyyy + '-' + mm + '-' + dd;





            //today = dd + '-' + mm + '-' + yyyy;
            //   console.log(today);
            $scope.CommonLogin_Permission = true;


            var EmpName = '';
            if ($scope.Employee_Selected != undefined) {
                EmpName = $scope.Employee_Selected.originalObject.FullName;
            };

            $scope.loading = true;
            $timeout(function () {
                if ($scope.loading == true) {
                    $rootScope.$broadcast('show');
                }
            }, 3000); // 3 seconds


        
            //$http.get(baseUrl + '/api/Common/LeaveBalance_Conditional_View/?LoginUser_Id=' + $scope.EmployeeId + '&LeaveDate=' + today + '&LeaveTypeId=0').success(function (data) {
            $http.get(baseUrl + '/api/Common/LeaveBalance_Conditional_View/?LoginUser_Id=' + $scope.EmployeeId + '&LeaveDate=' + today + '&LeaveTypeId=' + $scope.LeaveTypeId + '&FullName=' + EmpName).success(function (data) {
               // console.log(data);

                $scope.ListCollection = [];
                $scope.rowCollection = [];
                $scope.Leave = [];
               // $scope.rowCollection = data;
                $scope.ListCollection = data;
               // $scope.ListCollection = data;
                $scope.CommonTransaction_Id = data;

                //console.log($scope.ListCollection);
                if ($scope.LeaveBalancedays != null && $scope.LeaveBalancedays != 0) {
                    angular.forEach($scope.ListCollection, function (value) {              
                   
                        if ((value.LeaveBalance) <= ($scope.LeaveBalancedays)&& ($scope.Leave_Balance=='<=')) {
                      
                            $scope.rowCollection.push(value);
                      
                        }
                        else if ((value.LeaveBalance) >= ($scope.LeaveBalancedays) && ($scope.Leave_Balance=='>=')) {
                        
                            $scope.rowCollection.push(value);
                        }
                        else if ((value.LeaveBalance) == ($scope.LeaveBalancedays) && ($scope.Leave_Balance == '=')) {
                       
                            $scope.rowCollection.push(value);
                        }

                    });
                }
                else {
                    $scope.rowCollection = $scope.ListCollection;               
                      }
            
                //    no filter``rowCollection=listcollection

              //  })
               //$scope.myFunction =function() {
               //     var leave, leavebal;
               //     value = Number(document.getElementById("leavebalance").value);
                //     if (isNaN(value)) {
               //         leave = "Input is not a number";
               //     } else {
                //         leave = (age < 18) ? "less" : "greater";
               //     }
                //     alert(leave);
               //}
       



                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }

                //if (data.LoginUser == 2)
                //    $scope.CommonLogin_Permission = false;
                //else
                //    $scope.CommonLogin_Permission = true;
                $scope.loading = false;
                $rootScope.$broadcast('hide');



            }).error(function (data) {
                $scope.error = "An error has occurred while Listing Leave Balance Details!" + data;
            });
        };
 
 
    }
    ]);

    //This is for Role Mapping Controller functions//
    EmpControllers.controller("RoleMappingController", ['$scope', '$http', '$routeParams', '$location', '$filter',
        function ($scope, $http, $routeParams, $location, $filter) {

            $scope.Id = "0";
            $scope.current_page = 1;
            $scope.getUserRole = [];
            $scope.page_size = 30;

            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.listdata = [];
            $scope.UserRole_Name = [];
            $scope.ApplicationRole = [];

            //This is function for DROPDOWN LIST  
            $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
                $scope.DepartmentNameList = data;
            });
            $scope.getUserRole = [];
            $http.get(baseUrl + 'api/RoleMapping/ApplicationRole_List/').success(function (data) {
                $scope.getUserRole = data;

            });


            /*THIS IS FOR CLEAR FUNCITON */
            $scope.ClearPopup = function () {
                $scope.AppIdList = "";
                $scope.UserId = "0";
                $scope.UserRole_Name = [];
            }
            $scope.CancelPopup = function () {
                angular.element('#RoleMapView').modal('hide');
                $scope.ClearPopup();
            }
            $scope.EditRolePopUP = function (RMId) {
                $scope.Id = RMId;
                $scope.ViewEmployeeDetails();
                angular.element('#RoleMap').modal('show');
            }
            $scope.ListRolePopUP = function (RMId) {
                $scope.Id = RMId;
                $scope.RoleMappingList();
            }

            $scope.ViewRMPopUP = function (RMId) {
                $scope.Id = RMId;
                $scope.ViewEmployeeDetails();
               // angular.element('#RoleMapView').modal('show');
                $location.path("/MenuOverideMap/" + $scope.Id);
            };

            /*THIS IS FOR DELETE FUNCITON */
            $scope.DeleteRoleMappingDetails = function () {
                $http.get(baseUrl + 'api/RoleMapping/RoleMapping_Delete/?Id=' + $scope.Id).success(function (data) {
              //      alert("Role Mapping Details deleted Successfully");
                    window.location.href = "/Home/Index#/rolemapping";
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Role Mapping details" + data;
                });
            };
     

            $scope.AppIdList = "";
            $scope.GetDeleteItemslist = function () {
       
                for (i = 0; i < $scope.ApplicationRole.length; i++) {
                    if ($scope.AppIdList != "") {
                        $scope.AppIdList = $scope.AppIdList + ",";
                
                    }
                        $scope.AppIdList = $scope.AppIdList + $scope.ApplicationRole[i].Id.toString();              
                };       
           
            };


            $scope.UserRole_Name = [];

            /*THIS IS FOR ADD EDIT FUNCITON */
            $scope.RoleMapAddEdit = function () {
                $scope.GetDeleteItemslist($scope.ApplicationRole);
                angular.forEach($scope.ApplicationRole, function (value, index) {
                    var obj = {
                        Id: $scope.Id,
                        UserId: $scope.EmployeeId,
                        ApplicationRoleId: value.Id
                    };
                    $http.post(baseUrl + '/api/RoleMapping/RoleMapping_AddEdit/', obj).success(function (data) {
                        if ($scope.Id > 0) {
                            $scope.ApplicationRoleDetailsDelete($scope.EmployeeId);
                        }
                        $scope.RoleMappingList($scope.UserId);
                        $scope.CancelPopup();
                    });
                 //   $scope.ApplicationRole = [];
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                });
            };

            $scope.ViewRoleMappingDetails = function (Id) {
                $scope.Id = Id;
                $http.get(baseUrl + 'api/RoleMapping/ViewRoleMapping/?Id=' + $scope.EmployeeId).success(function (data) {
                    $scope.ApplicationRole = [];
                    angular.forEach(data, function (Item, Index) {
                        var locObj = { Id: Item.ApplicationRoleId }
                        $scope.ApplicationRole.push(locObj);
                    });
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
                });
            };

            /* THIS IS VIEW FUNCTION */
            //$scope.Id = 0;

            $scope.ViewEmployeeDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/RoleMapping/EmployeeDetails_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.EmployeeId = data.Id;
                    $scope.Employee_No = data.Employee_No;
                    $scope.FullName = data.FullName;
                    $scope.Designation_Name = data.Designation_Id.toString();
                    $scope.ViewDesignation_Name = data.Designation_Name;
                    $scope.Department_Name = data.Department_Id.toString();
                    $scope.ViewDepartment_Name = data.Department_Name;
                    $scope.ViewRoleMappingDetails($scope.EmployeeId);
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Employee details!" + data;
                });
            };

            $scope.ApplicationRoleDetailsDelete = function () {
                $scope.UserId = $scope.EmployeeId;
                $http.get(baseUrl + 'api/RoleMapping/ApplicationRoleDetails_Delete/?UserId=' + $scope.UserId + '&Applicationstring=' + $scope.AppIdList).success(function (data) {
               //     alert("Application Details deleted Successfully");
                    //window.location.href = "/Home/Index#/rolemapping/" + $scope.Id;
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Application details" + data;
                });
            };

            $scope.Full_Name = '';
            $scope.EmployeeNo = '';
            $scope.Department_Name = "0";


            /* THIS IS FOR LIST FUNCTION */

            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.RoleMappingList = function () {
                if ($routeParams.Id != undefined) {
                    $scope.Id = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/RoleMapping/EmployeeList/?Id=' + $scope.Id + '&Employee_No=' + $scope.EmployeeNo + '&FullName=' + $scope.Full_Name + '&Department_Id=' + $scope.Department_Name).success(function (data) {
                   // $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection = data) {
                        $scope.flag = 1;
                    }
                    else if ($scope.rowCollection = []) {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };


            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            $scope.NameList = [];
            $scope.NamefilterList = [];
            $scope.EmployeeAttendancelist = function () {
                // $scope.autocompleteclear();
                if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                    // $scope.NameList = [];
                    // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            }

            /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
            $scope.RoleMappingListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.ListRolePopUP(ListId);
            };
            $scope.ListRedirect = function (RMId) {
                window.location.href = "/Home/Index#/rolemapping/";
            };
        }
    ]);

    //This is for Role Mapping Controller functions//
    EmpControllers.controller("LeaveCalendarController", ['$scope', '$http', '$routeParams', '$location', '$filter',
    function ($scope, $http, $routeParams, $location, $filter) {

            $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
                $scope.DepartmentList = data;
            });

            $scope.Department_Name = "0";
            $scope.FullName = '';
            $scope.list = 0;
      

            $('#datepicker').datepicker({
                inline: true,
                changeMonth: true,
                changeYear: true,
                onSelect: function (dateText, inst) {
                    var d = new Date(dateText);
                    $('#calendar').fullCalendar('gotoDate', d);
                }
            });

            var date = new Date();       
            var d = date.getDate();
            var m = date.getMonth();
            var y = date.getFullYear();
        
     
          $scope.dataCalendar = [];        
     
            var calendar = $('#calendar').fullCalendar(
            {
           
                height:600,
                eventLimit: true,
                displayEventTime: false,
                dayClick: function (date, jsEvent, view) {
                    $scope.Date = date.format();
                    // $scope.Emp_ListSearch($scope.SelectedDate);
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $http.get(baseUrl + '/api/LeaveCalendar/Employee_List/?DepartmetId=' + $scope.Department_Name + '&FullName=' + $scope.FullName + '&Date=' + $filter('date')($scope.Date, "yyyy-MMM-dd")).success(function (data) {

                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;

                    }).error(function (data) {
                        $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                    });
                    angular.element('#RoleMapView').modal('show');
                },
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay,agendaFiveDay'
                },
                titleFormat: {
                    month: 'MMMM YYYY',   // like 'September 2009', for month view
                    week: 'MMM D YYYY', // like 'Sep 13 2009', for week views
                    day: 'MMMM D YYYY' // like 'September 8 2009', for day views
                },
                views: {
                    agendaFiveDay: {
                        type: 'agenda',
                        duration: { days: 5 },
                        buttonText: 'Five Day'
                    }
                },
                selectable: true,
                selectHelper: true,
            
                // Remove Event On Click
                eventRender: function (event, element) {
                    element.click(function () {                             
                    
                        $scope.Date = event._start._i;                
                        $scope.Emp_ListSearch($scope.Date);
                        angular.element('#RoleMapView').modal('show');
                    });
                },
                viewRender: function (view, element) {
                  $scope.FromDate = view.intervalStart._d;
                  $scope.ToDate = view.intervalEnd._d;          
              
                  $scope.dataCalendar = [];
                  $http.get(baseUrl + '/api/LeaveCalendar/EmployeeLeaveName_List/?DepartmetId=' + $scope.Department_Name + '&FullName=' + $scope.FullName + '&FromDate=' + $filter('date')($scope.FromDate, "yyyy-MMM-dd") + '&ToDate=' + $filter('date')($scope.ToDate, "yyyy-MMM-dd")).success(function (data) {
                
                      angular.forEach(data, function (value, index) {

                          var obj = {                     
                              title: value.FullName,
                              start: value.FromDate,
                          };
                          $scope.dataCalendar.push(obj);
                      });
                 
                      $('#calendar').fullCalendar('removeEvents');
                      $('#calendar').fullCalendar('removeEventSource', $scope.dataCalendar)
                      $('#calendar').fullCalendar('addEventSource', $scope.dataCalendar)
                      $('#calendar').fullCalendar('refetchEvents');

                  }).error(function (data) {
                      $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                  });

                },

                events: $scope.dataCalendar,
        
                timeFormat: 'H:mm:ss', // uppercase H for 24-hour clock
            });

            $('.AddEventCalender').hide();
            $('#calendar').fullCalendar('refetchEvents');
        

            $('#Close').click(function () {
                $('.AddEventCalender').hide();
            });




            $scope.EmpLeave_ListSearch = function () {         

          
                $scope.dataCalendar = [];
                $http.get(baseUrl + '/api/LeaveCalendar/EmployeeLeaveName_List/?DepartmetId=' + $scope.Department_Name + '&FullName=' + $scope.FullName + '&FromDate=' + $filter('date')($scope.FromDate, "yyyy-MMM-dd") + '&ToDate=' + $filter('date')($scope.ToDate, "yyyy-MMM-dd")).success(function (data) {
             
                    angular.forEach(data, function (value, index) {

                        var obj = {
                         //   Id:value.Id,
                            title:value.FullName ,
                            start: value.FromDate,

                        };
                        $scope.dataCalendar.push(obj);
                    });
              
                    $('#calendar').fullCalendar('removeEvents');
                    $('#calendar').fullCalendar('removeEventSource', $scope.dataCalendar)
                    $('#calendar').fullCalendar('addEventSource', $scope.dataCalendar)
                    $('#calendar').fullCalendar('refetchEvents');
              
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                });
            };

      

            $scope.Emp_ListSearch = function () {
          
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $http.get(baseUrl + '/api/LeaveCalendar/Employee_List/?DepartmetId=' + $scope.Department_Name + '&FullName=' + $scope.FullName + '&Date=' + $filter('date')($scope.Date, "yyyy-MMM-dd")).success(function (data) {
              
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
            
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                });
            };
      
        
        }
    ]);

    //This is for MenuList controller functions//
    EmpControllers.controller("MenuListController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window','filterFilter',
    function ($scope, $http, $routeParams, $location, $filter, $window,$ff) {
        $scope.Tabpage = $routeParams.Mode;

        $scope.Id = 0;
        $scope.AppId = 0;
        $scope.MenuId = 0;
        $scope.ViewEmployeeId = 0;
        $scope.roleId = 0;

        $scope.MenuArray = [];
        $scope.MenuArraytrue = [];
        var MenuArray1 = [];
        var MenuArraytrue1 = [];
        $scope.child = [];
        $scope.parentmenu = [];
        $scope.Appchild = [];
        $scope.Appparentmenu = [];
        $scope.ParentItem = [];
        $scope.ChildItem = [];

        $scope.MenuList = [];
        $scope.childrenlist = [];
        $scope.MenuArray = [];
        $scope.AppMenuList = [];
        $scope.Appchildrenlist = [];
        $scope.AppMenuArray = [];
        $scope.Menuoveridedelete = [];
        $scope.AppMenuoveridedelete = [];
        $scope.Employeemenu = [];
        $scope.EmployeeId = $routeParams.Id;
        $scope.Full_Name = '';
        $scope.EmployeeNo = '';
        $scope.Department_Name = "0";
   
        $scope.listdata = [];
        $scope.current_page = 1;
        $scope.page_size = 30;
        var Menu_Id="";
        $scope.childFilterItem = [];
        $scope.childItem = [];
        $scope.Menu_Level="";
   
        $scope.ChildItems =[];
        $scope.MenuId ="" ;
        $scope.Parent_Id=""; 
        $scope.childDeleteItem =[];
        $scope.childDeleteAppItem =[];
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }

        //This is function for DROPDOWN LIST  
        $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
            $scope.DepartmentNameList = data;
        });

        /* THIS IS FOR LIST FUNCTION */
        $scope.Menu_Selected = function () {
        
            angular.forEach($scope.parentmenu, function (groupitem, groupindex) {
                if (groupitem.selected == false) {
               
                    MenuArray1 = groupitem.children;

                    angular.forEach(MenuArray1, function (item, index) {
                        if (item.selected == false) {
                            var obj = { 'Menu_Name': item.Menu_Name, 'Menu_Id': item.Menu_Id, };
                            $scope.MenuArray.push(obj);
                        }                   
                    
                    });
               
                }           

                if (groupitem.selected == true) {
                    $scope.MenuArraytrue.push(groupitem);
                    MenuArraytrue1 = groupitem.children;

                    angular.forEach(MenuArraytrue1, function (item, index) {
                        if (item.selected == true) {
                            var obj = { 'Menu_Name': item.Menu_Name, 'Menu_Id': item.Menu_Id, };
                            $scope.MenuArraytrue.push(obj);
                        }

                    });
                }
            

            });
      
        };
    
        /* THIS IS FOR CHECKBOX FUNCTION */
        var Menu_Id="";
        $scope.Checklist = [];
        $scope.ParentItem = [];
        $scope.ChildItem = [];
        $scope.childFilterItem = [];

        $scope.CheckAll = function(Menu_Id){
            $scope.Checklist = $ff($scope.parentmenu, {Menu_Id : Menu_Id});   
            if($scope.Checklist.length>0)
            {                            
                angular.forEach($ff($scope.child, {Parent_Id : Menu_Id}), function (Item, IndexLoop) 
                {
                
                    $scope.ChildItem[Item.Menu_Id] = $scope.ParentItem[Menu_Id];    
             
                }); 
            }
            else
            {
                $scope.childFilterItem = $ff($scope.child, {Menu_Id : Menu_Id});            
                if($scope.childFilterItem.length>0)
                {
                    if($scope.ChildItem[Menu_Id] == false)
                    {
                        $scope.ParentItem[$scope.childFilterItem[0].Parent_Id] = $scope.ChildItem[Menu_Id];                     
                    }   
                    else
                    {
                    
                        var isunchecked=false;
                        angular.forEach($ff($scope.child, {Parent_Id : $scope.childFilterItem[0].Parent_Id}), function (Item, IndexLoop) 
                        {
                        
                            if($scope.ChildItem[Item.Menu_Id]==false)
                            {   
                                isunchecked=true;
                            
                            }                     
                        
                        }); 
                        if(isunchecked==false)
                        {
                            $scope.ParentItem[$scope.childFilterItem[0].Parent_Id] = $scope.ChildItem[Menu_Id]; 
                        }
                   
                    }
                }
            }
       
       
        };

        /* THIS IS FOR APPLICATION MENU OVERRIDE ADDEDIT FUNCTION */
        $scope.ApplicationRole_Id = "";
        $scope.AppMenuOverrideAddEdit  = function () {         
        
            angular.forEach($scope.parentmenu,function(parentItem,Index)
            {
                angular.forEach($ff($scope.child, {Parent_Id : $scope.childFilterItem.Parent_Id}), function (Item, IndexLoop) 
                {                    
                    if($scope.ChildItem[Item.Menu_Id]==false)
                    {                    
                        var obj = {
                            Id: $scope.Id,
                            ApplicationRole_Id:$scope.UserroleId,
                            Menu_Id: Item.Menu_Id,
                        };
                  
                        $http.post(baseUrl + '/api/MenuOverride/AppMenuOverride_AddEdit/', obj).success(function (data) {

                            $scope.Cancelvariables();

                            window.location.href = "/Home/Index#/MenuOveride";
                    
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                        });
                    }
                    else
                    {         
                        $scope.childDeleteAppItem = $ff($scope.childrenmenu, {Menu_Id : Item.Menu_Id});
               
                        if($scope.childDeleteAppItem.length>0)
                        {
                       
                            angular.forEach($scope.childDeleteAppItem,function(Items,IndexLoop)
                            {
                          
                                if($scope.ApplicationRole_Id = Items.ApplicationRole_Id)
                                {
                                    $http.get(baseUrl + '/api/MenuOverride/ApplicaitonMenuOveride_Delete/?ApplicationRole_Id=' + $scope.ApplicationRole_Id + '&Menu_Id=' + Item.Menu_Id ).success(function (data) {
                                
                                    });
                                }
                            });
                        }
                    
                    }
                }); 
            });
        };

        /* THIS IS FOR EMPLOYEE MENU OVERRIDE ADDEDIT FUNCTION */
        var Menu_Id ='';
        $scope.Employee_Id="";
        $scope.MenuId = 0;
        $scope.MenuOverrideAddEdit = function () 
        {         
            angular.forEach($scope.parentmenu,function(parentItem,Index)
            {
                angular.forEach($ff($scope.child, {Parent_Id : $scope.childFilterItem.Parent_Id}), function (Item, IndexLoop) 
                {           
                    if($scope.ChildItem[Item.Menu_Id]==false)
                    {   
                   
                        var obj = {
                            Id: $scope.Id,
                            Employee_Id: $scope.EmployeeId,
                            Menu_Id: Item.Menu_Id,
                        };
                   
                        $http.post(baseUrl + '/api/MenuOverride/MenuOverride_AddEdit/', obj).success(function (data) {

                            $scope.Cancelvariables();

                            window.location.href = "/Home/Index#/MenuOveride";
                    
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                        });
                    }
                    else
                    {         var isunchecked=false;  
                        $scope.childDeleteItem = $ff($scope.Employeemenu, {Menu_Id : Item.Menu_Id});
               
                        if($scope.childDeleteItem.length>0)
                        {
                       
                            angular.forEach($scope.childDeleteItem,function(Items,IndexLoop)
                            {
                           
                                if($scope.Employee_Id = Items.Employee_Id)
                                {
                                    $http.get(baseUrl + '/api/MenuOverride/MenuOveride_Delete/?Employee_Id=' + $scope.Employee_Id + '&Menu_Id=' + Item.Menu_Id ).success(function (data) {
                                
                                    });
                                }
                            });
                      
                        
                        }
                    
                    }
               
                });
            });
        };
    

        /* THIS IS FOR LIST REDIRECT FUNCTION */
        $scope.ListRedirect = function (RMId) {
            $scope.Cancelvariables();
            window.location.href = "/Home/Index#/MenuOveride/";
            $scope.Cancelvariables();
        };
        /* THIS IS FOR APPLICATION MENU OVERRIDE LIST REDIRECT FUNCTION */
        $scope.AppListRedirect = function (RMId) {
            $scope.Cancelvariables();
            window.location.href = "/Home/Index#/MenuOveride/";

        };

    
        /* THIS IS FOR  EMPLOYEE DETAILS VIEW FUNCTION */
        $scope.ViewEmployeeDetails = function () {
            $scope.child = [];
            $scope.parentmenu = [];
            $scope.Appchild = [];
            $scope.Appparentmenu = [];
            var Parent_Id ="";
            $scope.ChildItems =[];
            $scope.MenuView =[];
            $scope.MenuViews =[];
            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.ViewId = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/RoleMapping/EmployeeDetails_View/?Id=' + $scope.ViewId).success(function (data) {
                $scope.EmployeeId = data.Id;
                $scope.Employee_No = data.Employee_No;
                $scope.FullName = data.FullName;
                $scope.Designation_Name = data.Designation_Id.toString();
                $scope.ViewDesignation_Name = data.Designation_Name;
                $scope.Department_Name = data.Department_Id.toString();


                $scope.ViewDepartment_Name = data.Department_Name;
                      
            });
        
        };

        /* THIS IS FOR  APPLICATION ROLE DETAILS VIEW FUNCTION */
        $scope.ViewDetails = function () {
            $scope.child = [];
            $scope.parentmenu = [];
            $scope.Appchild = [];
            $scope.Appparentmenu = [];

            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.RoleViewId = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/RoleMapping/Application_View/?Id=' + $scope.RoleViewId).success(function (data) {
                $scope.UserroleId = data.Id;
                $scope.UserRoleName = data.UserRole_Name;
            });

        
            $http.get(baseUrl + 'api/MenuOverride/AppViewMenuOverride/?Id=' + $scope.RoleViewId).success(function (data) {
               
                $scope.childrenmenu = [];
                $scope.childrenmenu = data;
           
                angular.forEach($scope.childrenmenu, function (Items, Index) 
                {
               
                    if(Items.Menu_Level!=2)
                    {
                  
                        $scope.ParentItem[Items.Menu_Id]=false;
                    }
                    else
                    {
                        $scope.ChildItem[Items.Menu_Id]=false;
                    }
                });
            
           
            }).error(function (data) {
                $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
            });
        };
        $scope.emptydata = [];
        $scope.rowCollection = [];
        $scope.flag = 0;

        /* THIS IS FOR LIST FUNCTION */
        $scope.RoleMappingList = function () {

            if ($routeParams.Id != undefined) {
                $scope.roleId = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/RoleMapping/EmployeeList/?Id=' + $scope.roleId + '&Employee_No=' + $scope.EmployeeNo + '&FullName=' + $scope.Full_Name + '&Department_Id=' + $scope.Department_Name).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }
            }).error(function (data) {
                $scope.error = "AN error has occured while Listing the records!" + data;
            })
       
        };

        $scope.UserRole_Name = "";
        $scope.emptydatas = [];
        $scope.rowCollections = [];
        $scope.flag = 0;


        $http.get(baseUrl + '/api/CommonMenu/CommonMenu_Listall/').success(function (data) 
        {
            $scope.MenuList = data;
            $scope.Menu = data;
            angular.forEach($scope.MenuList, function (items, indexvalue) 
            {                    
                if (items.Menu_Level == 1) 
                {                      
                    $scope.parentmenu.push(items);
                }
                else 
                {
                    $scope.child.push(items);                      
                }
            });
        }).error(function (data) {
            $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
        });

        $http.get(baseUrl + 'api/MenuOverride/ViewMenuOverride/?Id=' + $scope.EmployeeId).success(function (data) 
        {            
            
            $scope.Employeemenu = [];
            $scope.Employeemenu = data;
            $scope.Parent_Id="";
            angular.forEach($scope.Employeemenu, function (Items, Index) 
            {
            
                if(Items.Menu_Level!=2)
                
                {
                    alert("aa");
                    $scope.ParentItem[Items.Menu_Id]=false;
                }
                else
                {
                    $scope.ChildItem[Items.Menu_Id]=false;

                }
            });

        });  
        /* THIS IS FOR LIST FUNCTION */
        $scope.EmployeeMappingList = function () {


            if ($routeParams.Id != undefined) {
                $scope.ViewEmployeeId = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/RoleMapping/ApplicationList/?Id=' + $scope.ViewEmployeeId + '&UserRole_Name=' + $scope.UserRole_Name).success(function (data) 
            {
                $scope.emptydatas = [];
                $scope.rowCollections = [];
                $scope.rowCollections = data;
                if ($scope.rowCollections.length > 0) {
                    $scope.flag = 1;
                }
                else 
                {
                    $scope.flag = 0;
                }
            }).error(function (data) {
                $scope.error = "AN error has occured while Listing the records!" + data;
            })
        };
        $scope.ViewAppPopUP = function (RMId) 
        {
            $scope.Id = RMId;
            var Mode = 2;
            $location.path("/MenuOverideMap/" + $scope.Id + "/" + Mode);
        };
        $scope.ViewRMPopUP = function (RMId) 
        {
            $scope.ViewId = RMId;
            var Mode = 1;
            $location.path("/MenuOverideMap/" + $scope.ViewId + "/" + Mode);
        };
        $scope.Cancelvariables = function () 
        {
            $scope.parentmenu = [];
            $scope.Employeemenu = [];
            $scope.AppEmployeemenu = [];
        }
    }
    ]);

    //this is for user role mapping controller//
    EmpControllers.controller("UserRoleMappingController", ['$scope', '$http', '$filter', '$routeParams', '$rootScope', '$timeout',
         function ($scope, $http, $filter, $routeParams, $rootScope, $timeout) {

             // List Page Pagination.
             $scope.Id = "0";
             $scope.listdata = [];
             $scope.current_pages = 1;
             $scope.page_sizes = 30;
             $scope.rembemberCurrentPages = function (p) {
                 $scope.current_pages = p
             }

             // Declaration and initialization of Scope Variables.
             $scope.UserRole_Id = "0";
             $scope.UserRoleList = [];
             $scope.SystemRole_Id = [];
             $scope.EmployeeNameList = [];
             $scope.SystemRole = [];
             $scope.SystemRoles_Id = "0";
             $scope.UserRole_Name = "";
             // $scope.Id = "0";

             // Declaration and initialization of row collection Variables.
             $scope.Initial = function () {
                 $scope.rowCollection = [];
                 $scope.rowCollections = [];
                 $scope.flag = 0;
                 $scope.flags = 0;
             }

           /* Validating the create page mandatory fields
           checking mandatory for the follwing fields
           UserRoleName,SystemRole
           and showing alert message when it is null.
           */
             $scope.Validationcontrols = function () {

                 if (typeof ($scope.UserRoleName) == "undefined" || $scope.UserRoleName == "") {
                     alert("Please enter User Role Name");
                     return false;
                 }
                 else if (typeof ($scope.SystemRole.length) == "undefined" || $scope.SystemRole.length == "0") {
                     alert("Please select System role");
                     return false;
                 }
                 return true;
             };


           /*
           Validating the create page mandatory fields
           checking mandatory for the follwing fields
           ApplicationRole
           and showing alert message when it is null.
           */
             $scope.ValidationcontrolsApp = function () {
                 if (typeof ($scope.ApplicationRole.length) == "undefined" || $scope.ApplicationRole.length == "0") {
                     alert("Please select Application Role");
                     return false;
                 }
                 return true;
             };

             /*
             Validating the create page mandatory fields
             checking mandatory for the follwing fields
             Employee
             and showing alert message when it is null.
             */
             $scope.ValidationcontrolsEmp = function () {
                 if (typeof ($scope.EmployeeNameList.length) == "undefined" || $scope.EmployeeNameList.length == "0") {
                     alert("Please select Employee ");
                     return false;
                 }
                 return true;
             };


             $scope.Tabpage = $routeParams.view;
             $scope.List = $routeParams.view;


             /* THIS IS FOR ROLE MAPPING REDIRECT FUNCTION */
             $scope.ListRedirect = function () {
                 if ($scope.Tabpage == 1) {
                     $location.path("/Userrolemapping/1/0/1");
                 }
                 else {
                     $location.path("/Userrolemapping/3/0/1");
                 }

             };

             /* THIS IS FOR ROLE MAPPING DELETE FUNCTION */
             $scope.SysIdList = "";
             $scope.SystemDeleteItemslist = function () {
                 for (i = 0; i < $scope.SystemRole.length; i++) {

                     if ($scope.SysIdList != "") {
                         $scope.SysIdList = $scope.SysIdList + ",";
                     }
                     $scope.SysIdList = $scope.SysIdList + $scope.SystemRole[i].Id.toString();
                 };
             };

             /* 
           Calling the api method to detele the details of the system role 
           for the  system role Id,
           and redirected to the list page.
           */
             $scope.SystemRoleDetailsDelete = function () {
           
                 $scope.UserRole_Id = $scope.UserroleId;

                 $http.get(baseUrl + 'api/RoleMapping/Systemapplication_Delete/?UserRole_Id=' + $scope.UserRole_Id + '&Systemstring=' + $scope.SysIdList).success(function (data) {

                
                 }).error(function (data) {
                     $scope.error = "An error has occurred while deleting Application details" + data;
                 });
             };


        /*
        Calling the api method to view the details of the system role 
        for the system role  Id 
        and display the details in the view pop up window.
        */
             $scope.ViewSystemDetails = function (Id) {
                 $scope.SystemRoles_Id = Id;

                 $http.get(baseUrl + 'api/RoleMapping/GetUserrolelist/?Id=' + $scope.SystemRoles_Id).success(function (data) {

                     $scope.SystemRole = [];
                     angular.forEach(data, function (Item, Index) {
                         var locObj = { Id: Item.SystemRoles_Id }
                         $scope.SystemRole.push(locObj);
                     });

                    // console.log($scope.SystemRole);
                 }).error(function (data) {
                     $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
                 });
             };

             /*
         Calling the api method to view the details of the User Role
         for the company Id 
         and display the details in the view page.
         */
             $scope.ViewDetails = function () {
                 if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                     $scope.Id = $routeParams.Id;
                     $scope.DuplicateId = $routeParams.Id;
                 }
                 $http.get(baseUrl + 'api/RoleMapping/Application_View/?Id=' + $scope.Id).success(function (data) {
                     $scope.DuplicateId = data.Id;
                     $scope.UserroleId = data.Id;
                     $scope.UserRoleName = data.UserRole_Name;
                     $scope.ViewSystemDetails($scope.Id);

                 }).error(function (data) {
                     $scope.error = "An error has occcurred while viewing Employee details!" + data;
                 });

             };



             /* THIS IS FOR ROLE MAPPING USER ROLE NAME FUNCTION */
             //$http.get(baseUrl + 'api/RoleMapping/ApplicationRole_List/').success(function (data) {
             //    $scope.UserRoleList = data;
             //}).error(function (data) {
             //    $scope.error = "AN error has occured while listing User Roles !" + data;
             //})


        /* 
        Calling api method for the dropdown list in the html page for the fields 
        SystemRole
        */
             $http.get(baseUrl + 'api/UserMenu/Get_SystemRole/').success(function (data) {
                 $scope.SystemRoleList = data;
             }).error(function (data) {
                 $scope.error = "AN error has occured while listing System Roles !" + data;
             })


             /* THIS IS FOR ROLE MAPPING CLEARE FUNCTION */
             $scope.ClearPopuprole = function () {
                 $scope.flag = "";
                 $scope.UserRoleName = "";
                 $scope.SysIdList = "";
                 $scope.SystemRole = "";
                 //$scope.SystemRole_Id = [];
             }

             /* Open the create pop up window */
             $scope.AddUser = function (ESId) {
                 $scope.Id = ESId;
                 //$scope.ViewEmployeeSkill();
                 angular.element('#MapView').modal('show');
                 //$scope.ClearPopuprole();
                 //$scope.EmployeeMappingList();
             }

             /* THIS IS FOR ROLE MAPPING CANCEL POPUP FUNCTION */
             $scope.CancellPopup = function () {
                 $scope.flag = "";
                 angular.element('#MapView').modal('hide');
                 $scope.ClearPopuprole();
             }

             /* THIS IS FOR ROLE MAPPING VIEW POPUP FUNCTION */
             $scope.ViewEmployee = function (EMId) {
                 $scope.Id = EMId;
                 $scope.ViewDetails();
                 angular.element('#MapView').modal('show');
             };

             /* THIS IS FOR ROLE MAPPING EDIT POPUP FUNCTION */
             $scope.EdiPopUP = function (EMId) {
                 $scope.Id = EMId;
                 $scope.ViewDetails();
                 angular.element('#MapView').modal('hide');
                 //window.location.href = "/Home/Index#/UserrolemappingEdit/" + $scope.Id;
             }


             /* THIS IS FOR USER ROLE MAPPING ARRAY LIST FUNCTION */
             $scope.UserRoleChange = function () {

                 $scope.loading = true;
                 $timeout(function () {
                     if ($scope.loading == true) {
                         $rootScope.$broadcast('show');
                     }
                 }, 3000); // 3 second

                 $http.get(baseUrl + 'api/UserMenu/Get_UserSystemRoleMapping/?UserRole_Id=' + $scope.UserRole_Id).success(function (data) {
                     $scope.SystemRole_Id = [];
                     angular.forEach(data, function (value, index) {
                         var objresult = {
                             Id: value.SystemRoles_Id
                         };

                         $scope.SystemRole_Id.push(objresult);
                     })

                     $scope.loading = false;
                     $rootScope.$broadcast('hide');
                 }).error(function (data) {
                     $scope.error = "AN error has occured while listing System Roles !" + data;
                 })
             }

             $scope.Id = 0;
             $scope.DuplicateId = 0;

             $scope.loading = false;
           /*
           Call the api method for insert and Update the record for a system role
           and display the record of selected system role when Id is greater than 0
           in edit.html and provide an option for create and modify the system role and save the system role record
           */
             $scope.SaveMapping = function () {
                 if ($scope.Validationcontrols() == true) {

                     $scope.SystemDeleteItemslist($scope.SystemRole);
                     $scope.SystemRoleDetailsDelete($scope.SystemRoles_Id);
                   //  console.log($scope.SystemRoleDetailsDelete);
                     $http.get(baseUrl + '/api/RoleMapping/RoleMappingDuplicateCheck/?Id=' + $scope.DuplicateId + '&UserRole_Name=' + $scope.UserRoleName).success(function (data) {
                        // console.log(data);
                         if (data == 1) {
                             alert("User Role Name already exists, cannot duplicate");
                             return false;
                         }
                         else {
                             // angular.forEach($scope.SystemRole, function (value, index) {
                             var obj = {
                                 Id: $scope.Id,
                                 UserRole_Name: $scope.UserRoleName,
                                 //SystemRoles_Id: value.Id
                             };


                             $scope.loading = true;
                             $timeout(function () {
                                 if ($scope.loading == true) {
                                     $rootScope.$broadcast('show');
                                 }
                             }, 3000); // 3 second

                             $http.post(baseUrl + '/api/RoleMapping/UserRoleMapping_AddEdit/', obj).success(function (data) {

                                 $scope.URId = data;
                                 $scope.MasterId = data;

                                 angular.forEach($scope.SystemRole, function (value, index) {
                                     value.URId = $scope.URId
                                     var objchild = {
                                         Id: $scope.Id,
                                         UserRole_Id: $scope.URId,
                                         SystemRoles_Id: value.Id
                                     };

                                     $scope.loading = true;
                                     $timeout(function () {
                                         if ($scope.loading == true) {
                                             $rootScope.$broadcast('show');
                                         }
                                     }, 3000); // 3 second
                                     $http.post(baseUrl + '/api/RoleMapping/UserRoleSystemRoleMapping_AddEdit/', objchild).success(function (data) {

                                         $scope.flag = 'Role';

                                         $scope.loading = false;
                                         $rootScope.$broadcast('hide');

                                     }).error(function (data) {
                                         $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                                     });
                                 });
                                 $scope.EmployeeMappingListGo();
                                 $scope.CancellPopup();

                             }).error(function (data) {
                                 $scope.error = "An error has occurred while adding PT!" + data.ExceptionMessage;
                             });
                         }
                     }).error(function (data) {
                         $scope.error = "An error has occurred while adding Fyconfiguration details!" + data.ExceptionMessage;
                     });
                 };
             };


             /* THIS IS FOR ROLE MAPPING RESET FUNCTION */
             $scope.ResetMapping = function () {
                 $scope.flag = "";
                 $scope.UserRole_Name = "";
                 $scope.SysIdList = "";
                 $scope.UserRole_Id = "";
             };


    /*--------------------------------------------------------------*/

    // THIS IS FOR APPLICATION MAPPING CONTROLLER FUNCTION */

             /* List Page Pagination*/
             $scope.Id = "0";
             $scope.current_page = 1;
             $scope.getUserRole = [];
             $scope.page_size = 30;
             $scope.rembemberCurrentPage = function (p) {
                 $scope.current_page = p
             }
             $scope.listdata = [];
             $scope.UserRole_Name = [];

             /* Validating the create page mandatory fields
                checking mandatory for the follwing fields
                Department Name,User Role
                and showing alert message when it is null.
            */
             $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
                 $scope.DepartmentNameList = data;
             });
             $scope.getUserRole = [];
             $scope.UserRoleListFn = function () {

                 $http.get(baseUrl + 'api/RoleMapping/ApplicationRole_List/').success(function (data) {
                     $scope.getUserRole = data;
                 });
             };
             $scope.UserRoleListFn();
             //console.log($scope.getUserRole);

             /*THIS IS FOR CLEAR FUNCITON */
             $scope.ClearPopup = function () {
                 $scope.AppIdList = "";
                 $scope.UserId = "0";
                 $scope.UserRole_Name = [];
                 // $scope.ApplicationRole = "";
             }

             /* THIS IS FOR APPLICATION MAPPING CANCEL POPUP FUNCTION */
             $scope.CancelPopup = function () {
                 angular.element('#RoleMapView').modal('hide');
                 $scope.ClearPopup();
             }

             /* THIS IS FOR APPLICATION MAPPING EDIT POPUP FUNCTION */
             $scope.EditRolePopUP = function (RMId) {
                 $scope.Id = RMId;
                 $scope.ViewEmployeeDetails();
                 angular.element('#MapView').modal('hide');
                 //window.location.href = "/Home/Index#/UserrolemappingEdit/" + $scope.Id;
             }

             /* THIS IS FOR APPLICATION MAPPING LIST POPUP FUNCTION */
             $scope.ListRolePopUP = function (RMId) {
                 $scope.Id = RMId;
                 $scope.RoleMappingList($scope.Id);
             }


             /* THIS IS FOR APPLICATION MAPPING VIEW POPUP FUNCTION */
             $scope.ViewRMPopUP = function (RMId) {
                 $scope.Id = RMId;
                 $scope.ViewEmployeeDetails();
                 angular.element('#RoleMapView').modal('show');
             };

        /* 
         Calling the api method to detele the details of the Application Role 
         for the  Application Role  Id,
         and redirected to the list page.
         */
             $scope.DeleteRoleMappingDetails = function () {
                 $http.get(baseUrl + 'api/RoleMapping/RoleMapping_Delete/?Id=' + $scope.Id).success(function (data) {
                     //      alert("Role Mapping Details deleted Successfully");
                     window.location.href = "/Home/Index#/rolemapping";
                 }).error(function (data) {
                     $scope.error = "An error has occurred while deleting Role Mapping details" + data;
                 });
             };

             /* THIS IS FOR APPLICATION MAPPING DELETE FUNCTION */
             $scope.AppIdList = "";
             $scope.GetDeleteItemslist = function () {
                 for (i = 0; i < $scope.ApplicationRole.length; i++) {
                     if ($scope.AppIdList != "") {
                         $scope.AppIdList = $scope.AppIdList + ",";
                     }
                     $scope.AppIdList = $scope.AppIdList + $scope.ApplicationRole[i].Id.toString();
              
                 };
             };
             $scope.UserRole_Name = [];

             $scope.loading = false;
             /*
            Call the api method for insert and Update the record for a Application Role
            and display the record of selected Application Role when Id is greater than 0
            in edit.html and provide an option for create and modify the Application Role and save the Application Role record
            */
             $scope.RoleMapAddEdit = function () {
                 if ($scope.ValidationcontrolsApp() == true) {
                     $scope.GetDeleteItemslist($scope.ApplicationRole);
                     $scope.ApplicationRoleDetailsDelete($scope.EmployeeId);
                     angular.forEach($scope.ApplicationRole, function (value, index) {
                         var obj = {
                             Id: $scope.Id,
                             UserId: $scope.EmployeeId,
                             ApplicationRoleId: value.Id
                         };
                         // console.log(obj);

                         $scope.loading = true;
                         $timeout(function () {
                             if ($scope.loading == true) {
                                 $rootScope.$broadcast('show');
                             }
                         }, 3000); // 3 second
                         $http.post(baseUrl + '/api/RoleMapping/RoleMapping_AddEdit/', obj).success(function (data) {

                             $scope.loading = false;
                             $rootScope.$broadcast('hide');

                         }).error(function (data) {
                             $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                         });

                     });

                     //$scope.RoleMappingListGo();
                     $scope.ListRolePopUP($scope.EmployeeId);
                     $scope.CancelPopup();
                 };
             };


         /*
         Calling the api method to view the details of the Application Mapping
         for the Application Id 
         and display the details in the view pop up window.
         */
             $scope.ViewRoleMappingDetails = function (Id) {
                 $scope.Id = Id;
                 $http.get(baseUrl + 'api/RoleMapping/ViewRoleMapping/?Id=' + $scope.EmployeeId).success(function (data) {
                     $scope.ApplicationRole = [];
                     angular.forEach(data, function (Item, Index) {
                         var locObj = { Id: Item.ApplicationRoleId }
                         $scope.ApplicationRole.push(locObj);
                     
                     });
                 }).error(function (data) {
                     $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
                 });
             };


         /*
         Calling the api method to view the details of the Application Mapping
         for the Application Id 
         and display the details in the view pop up window.
         */
             //$scope.Id = 0;     
             $scope.ViewEmployeeDetails = function () {
                // console.log('ViewEmployeeDetails');
                 if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                     $scope.Id = $routeParams.Id;
                 }

                 $http.get(baseUrl + 'api/RoleMapping/EmployeeDetails_View/?Id=' + $scope.Id).success(function (data) {
                     $scope.EmployeeId = data.Id;
                     $scope.Employee_No = data.Employee_No;
                     $scope.FullName = data.FullName;
                     $scope.Designation_Name = data.Designation_Id.toString();
                     $scope.ViewDesignation_Name = data.Designation_Name;
                     $scope.Department_Name = data.Department_Id.toString();
                     $scope.ViewDepartment_Name = data.Department_Name;
                     $scope.ViewRoleMappingDetails($scope.Id);
                 }).error(function (data) {
                     $scope.error = "An error has occcurred while viewing Employee details!" + data;
                 });

             };

             /* FUNCTION IS LIST THE EMPLOYEES  */
             $scope.EmployeeMappingTabClick = function () {
                 $scope.UserRoleListFn();
                 //$scope.ViewEmployeeDetails();
             };

             /* THIS IS FOR APPLICATION MAPPING DELETE FUNCTION */
             $scope.ApplicationRoleDetailsDelete = function () {
                 $scope.UserId = $scope.EmployeeId;
                 $http.get(baseUrl + 'api/RoleMapping/ApplicationRoleDetails_Delete/?UserId=' + $scope.UserId + '&Applicationstring=' + $scope.AppIdList).success(function (data) {

                 }).error(function (data) {
                     $scope.error = "An error has occurred while deleting Application details" + data;
                 });
             };

             $scope.Full_Name = '';
             $scope.EmployeeNo = '';
             $scope.Department_Name = "0";


          /*
          Calling the api method to list the company details for the  filters  Employee No,Employee Name,Department Name and
          showing the result in table.
          */
             //$scope.emptydata = [];
             //$scope.rowCollection = [];
             //$scope.flag = 0;
             $scope.RoleMappingList = function () {

                 $scope.loading = true;
                 $timeout(function () {
                     if ($scope.loading == true) {
                         $rootScope.$broadcast('show');
                     }
                 }, 3000); // 3 second
                 $http.get(baseUrl + 'api/RoleMapping/EmployeeList/?Id=' + $scope.Id + '&Employee_No=' + $scope.EmployeeNo + '&FullName=' + $scope.Full_Name + '&Department_Id=' + $scope.Department_Name).success(function (data) {
                     // $scope.emptydata = [];
                     $scope.rowCollection = [];
                     $scope.rowCollection = data;
                     //if ($scope.rowCollection.length > 0) {
                     //    $scope.flag = 1;
                     //}
                     //else {
                     //    $scope.flag = 0;
                     //}
                     $scope.loading = false;
                     $rootScope.$broadcast('hide');
                 }).error(function (data) {
                     $scope.error = "AN error has occured while Listing the records!" + data;
                 })
             };


             /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
             $scope.RoleMappingListGo = function () {
                 $scope.Id = 0;
                 var ListId = $scope.Id;
                 $scope.ListRolePopUP(ListId);
             };
             $scope.ListRedirect = function (RMId) {
                 window.location.href = "/Home/Index#/Userrolemapping/";
             };

    /*-------------------------------------------*/

        /* 
        Calling api method for the dropdown list in the html page for the fields 
        Employee
        */
             $scope.EmployeeList = [];
             $http.get(baseUrl + 'api/RoleMapping/Employee_List/').success(function (data) {
                 $scope.EmployeeList = data;
             });



             /*THIS IS FOR POPUP FUNCITON */
             $scope.ClearsPopup = function () {

                 $scope.UserRole_Name = "";
                 $scope.EMPIdList = "";
                 // $scope.EmployeeList = [];
             }

             /*THIS IS FOR CANCEL POPUP FUNCITON */
             $scope.CancelsPopup = function () {
                 $scope.flag = "";
                 angular.element('#EmployeeMapView').modal('hide');
                 $scope.ClearsPopup();
             }
       
             /* Open the edit pop up window and show the details for the employee for the  employee Id */
             $scope.EditPopUP = function (RMsId) {
                 $scope.Id = RMsId;
                 $scope.ViewApplicationDetails();
                 angular.element('#User').modal('hide');
             }

             /*calling list function */
             $scope.ListPopUP = function (RMsId) {
                 $scope.Id = RMsId;
                 $scope.EmployeeMappingList();
             }

             /* Open the view pop up window and show the details for the Employee for the  employee Id */
             $scope.ViewopUP = function (RMsId) {
                 $scope.Id = RMsId;
                 $scope.ViewApplicationDetails();
                 angular.element('#EmployeeMapView').modal('show');
             };


             /*THIS IS FOR DELETE IN ARRAY LIST FUNCITON */
             $scope.EMPIdList = "";
             $scope.DeleteItemslist = function () {
                 for (i = 0; i < $scope.EmployeeNameList.length; i++) {
                     if ($scope.EMPIdList != "") {
                         $scope.EMPIdList = $scope.EMPIdList + ",";
                     }
                     $scope.EMPIdList = $scope.EMPIdList + $scope.EmployeeNameList[i].Id.toString();
                 };
             };


             $scope.UserRole_Name = [];

          /*
          Call the api method for insert and Update the record for a employee
          and display the record of selected employee when Id is greater than 0
          in edit.html and provide an option for create and modify the employee and save the employee record
          */
             $scope.EmployeeMappingAddEdit = function () {

                 if ($scope.ValidationcontrolsEmp()== true) {

                     $scope.DeleteItemslist($scope.EmployeeNameList);
                     $scope.EmployeeListDelete($scope.ApplicationRoleId);
                     angular.forEach($scope.EmployeeNameList, function (value, index) {
                         var obj = {
                             Id: $scope.Id,
                             UserId: value.Id,
                             ApplicationRoleId: $scope.Id
                         };

                         $scope.loading = true;
                         $timeout(function () {
                             if ($scope.loading == true) {
                                 $rootScope.$broadcast('show');
                             }
                         }, 3000); // 3 second
                         $http.post(baseUrl + '/api/RoleMapping/RoleMapping_AddEdit/', obj).success(function (data) {
                             $scope.flag = 'Emp';
                             // close the popup and move to List page only after updating all employee mapping list
                             if ($scope.EmployeeNameList.length - 1 == index) {
                                 $scope.EmployeeMappingListGo();
                                 $scope.CancelsPopup();
                             }

                             $scope.loading = false;
                             $rootScope.$broadcast('hide');
                         }).error(function (data) {
                             $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                         });
                     });

                     //$scope.EmployeeMappingListGo();
                     //$scope.CancelsPopup();
                 };

             };
       /*
       Calling the api method to view the details of the employee
       for the employee Id 
       and display the details in the view pop up window.
       */
             //$scope.EmployeId = 0;
             $scope.ViewEmpDetails = function (Id) {
                 $scope.ApplicationRoleId = Id;
                 $http.get(baseUrl + 'api/RoleMapping/ViewApplicationRole/?Id=' + $scope.Id).success(function (data) {
                     $scope.EmployeeNameList = [];
                     angular.forEach(data, function (Item, Index) {
                         var localObj = { Id: Item.UserId }

                         $scope.EmployeeNameList.push(localObj);
                     });
                 }).error(function (data) {
                     $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
                 });
             };

       /*
       Calling the api method to view the details of the employee
       for the employee Id 
       and display the details in the view pop up window.
       */
             $scope.Id = 0;
             $scope.ViewApplicationDetails = function () {
                 if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                     $scope.Id = $routeParams.Id;
                 }
                 $http.get(baseUrl + 'api/RoleMapping/Application_View/?Id=' + $scope.Id).success(function (data) {
                     $scope.Id = data.Id;
                     $scope.UserRole_Name = data.UserRole_Name;
                     $scope.ViewEmpDetails($scope.Id);

                 }).error(function (data) {
                     $scope.error = "An error has occcurred while viewing Employee details!" + data;
                 });
             };

     /* 
     Calling the api method to detele the details of the application 
     for the  application Id,
     and redirected to the list page.
     */
             $scope.EmployeeListDelete = function () {
                 $http.get(baseUrl + 'api/RoleMapping/EmployeeDetails_Delete/?ApplicationRoleId=' + $scope.ApplicationRoleId + '&Userstring=' + $scope.EMPIdList).success(function (data) {
                     // alert("Application Details deleted Successfully");
                     // window.location.href = "/Home/Index#/rolemapping/" + $scope.Id;
                 }).error(function (data) {
                     $scope.error = "An error has occurred while deleting Application details" + data;
                 });
             };

             $scope.UserRole_Name = "";


             /* THIS IS FOR LIST FUNCTION */
             //$scope.emptydatas = [];
             //$scope.rowCollections = [];
             //$scope.flags = 0;
             //$scope.Empemptydatas = [];
             //$scope.EmprowCollections = [];
             //$scope.Empflags = 0;

      /*
      Calling the api method to list the company details for the  filters  user name and
      showing the result in table.
      */
             $scope.EmployeeMappingList = function () {


                 $scope.loading = true;
                 $timeout(function () {
                     if ($scope.loading == true) {
                         $rootScope.$broadcast('show');
                     }
                 }, 3000); // 3 second
                 $http.get(baseUrl + 'api/RoleMapping/ApplicationList/?Id=' + $scope.Id + '&UserRole_Name=' + $scope.UserRole_Name).success(function (data) {
                     $scope.emptydatas = [];
                     $scope.rowCollections = [];
                     $scope.Empemptydatas = [];
                     $scope.EmprowCollections = [];
                     $scope.rowCollections = data;
                     $scope.EmprowCollections = data;
                     //if ($scope.rowCollections.length > 0) {
                     //    $scope.flags = 1;
                     //    $scope.Empflags = 1;
                     //}
                     //else {
                     //    $scope.flags = 0;
                     //    $scope.Empflags = 0;
                     //}

                     $scope.loading = false;
                     $rootScope.$broadcast('hide');

                 }).error(function (data) {
                     $scope.error = "AN error has occured while Listing the records!" + data;
                 })
             };


             /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
             $scope.EmployeeMappingListGo = function () {
                 $scope.Id = 0;
                 var ListsId = $scope.Id;
                 $scope.ListPopUP(ListsId);
             };

         }]);

    //this is for Employee relieve controller//
    EmpControllers.controller("EmployeeRelieveController", ['$scope', '$http', '$filter', '$routeParams', 'filterFilter', '$rootScope', '$timeout',
         function ($scope, $http, $filter, $routeParams, $ff, $rootScope, $timeout) {

             // List Page Pagination.
             $scope.current_page = 1;
             $scope.page_size = 30;
             $scope.rembemberCurrentPage = function (p) {
                 $scope.current_page = p
             }


             // Declaration and initialization of Scope Variables.
             $scope.ReasonLeaving_Type = "0";
             $scope.Id = 0;
             /* Validating the Relieve page mandatory fields not null.
             check these fields
             Employee_No,Resignation_Date,Reason_Leaving_Type,Leaving_Reason,Notice_Period,
             Last_Working_Day and showing alert message when it is null.
             */
             $scope.Validationcontrols = function () {

                 if (typeof ($scope.Employee_No) == '' || $scope.BranchSelected == undefined) {
                     alert("Please select Employee");
                     return false;
                 }
                 else if (typeof ($scope.Resignation_Date) == "undefined" || $scope.Resignation_Date == "") {
                     alert("Please select Resignation Date");
                     return false;
                 }
                 else if (typeof ($scope.ReasonLeaving_Type) == "undefined" || $scope.ReasonLeaving_Type == 0) {
                     alert("Please select Reason Leaving Type");
                     return false;
                 }
                 else if (typeof ($scope.Notice_Period) == "undefined" || $scope.Notice_Period == 0) {
                     alert("Please enter Notice Period");
                     return false;
                 }
                 else if (typeof ($scope.Leaving_Reason) == "undefined" || $scope.Leaving_Reason == "") {
                     alert("Please enter Leaving Reason");
                     return false;
                 }
                 else if (typeof ($scope.Last_Working_Day) == "undefined" || $scope.Last_Working_Day == "") {
                     alert("Please select Last Working Day");
                     return false;
                 }
                     //else if ((ParseDate($scope.Last_Working_Day)) < (ParseDate($scope.Resignation_Date))) {
                     //    alert("Please select Last Working day greater than or equal to Resignation day");
                     //    return false;
                     //}
                 else if ((ParseDate($scope.Payment_Date)) < (ParseDate($scope.Last_Working_Day))) {
                     alert("Please select Payment day greater than or equal to Last working day");
                     return false;
                 }
                 else if ((ParseDate($scope.Payment_Date)) < (ParseDate($scope.Resignation_Date))) {
                     alert("Please select Payment day greater than or equal to Resignation day");
                     return false;
                 }
                 else if (isDate($scope.Resignation_Date) == false) {
                     alert("Resignation Date is invalid date format, please enter dd-mm-yy");
                     return false;
                 }
                     //else if (isDate($scope.Last_Working_Day) == false) {
                     //    alert("Last Working Day is invalid date format, please enter dd-mm-yy");
                     //    return false;
                     //}
                 else if (isDate($scope.Payment_Date) == false) {
                     alert("Payment Date is invalid date format, please enter dd-mm-yy");
                     return false;
                 }

                 return true;

             };




             $scope.DepartmentFilterList = [];
             $scope.DepartmentList = [];
             $http.get(baseUrl + 'api/EmployeeMaster/GetDepartment/').success(function (data) {
                 // all Department records list including active and inactive 
                 // used for list page DD and inactive records filtering
                 $scope.DepartmentFilterList = data;
                 // only active Department
                 $scope.DepartmentList = $ff(data, { IsActive: 1 });
             });

             $scope.RelieveReasonList = [];
             $scope.RelieveReasonNameList = [];
             $http.get(baseUrl + 'api/Common/RelieveReasonTypeList/').success(function (data) {
                 $scope.RelieveReasonList = data;
                 $scope.RelieveReasonNameList = $ff(data, { Active: 1 });
             });



             /* Open the create pop up window */
             $scope.AddEmployeeReleivePopUP = function (LPH) {
                 $scope.ClearPopup();
                 $scope.Id = LPH;
                 angular.element('#EmployeeReleiveModal').modal('show');
             }

             /* List page pop up function */
             $scope.ListEmployeeReleiveGo = function (LPH) {
                 $scope.Id = LPH;
                 $scope.EmployeeReleiveList();
             }


             $scope.DepartmentName = "0";
             $scope.Reason_Leaving_Type = "0";



             $scope.Department_Name = "";
             $scope.Name = "";
             $scope.PeriodFrom = "";
             $scope.PeriodTo = "";
             $scope.Id = 0;
             $scope.flag = 0;
             $scope.emptydata = [];
             $scope.rowCollection = [];

             $scope.EmployeeReleiveList = function () {
           
                 $scope.emptydata = [];
                 $scope.rowCollection = [];
                 var EmpName = '';
                 if ($scope.Employee_Selected != undefined) {
                     EmpName = $scope.Employee_Selected.originalObject.FullName;
                 };
                         
                     $scope.loading = true;
                     $timeout(function () {
                         if ($scope.loading == true) {
                             $rootScope.$broadcast('show');
                         }
                     }, 3000); // 5 seconds

                 $http.get(baseUrl + 'api/EmployeeMaster/EmployeeReleiveList/?FullName=' + EmpName
                         + '&Department_Id=' + $scope.DepartmentName + '&Reason_Leaving_Type=' + $scope.Reason_Leaving_Type
                         + '&PeriodFrom=' + $scope.PeriodFrom + '&PeriodTo=' + $scope.PeriodTo
                         ).success(function (data) {
                       
                             $scope.emptydata = [];
                             $scope.rowCollection = [];
                             $scope.rowCollection = data;
                             if ($scope.rowCollection.length > 0) {
                                 $scope.flag = 1;
                             }
                             else {
                                 $scope.flag = 0;
                             }

                             $scope.loading = false;
                             $rootScope.$broadcast('hide');
                         }).error(function (data) {

                             $scope.loading = false;
                             $rootScope.$broadcast('hide');
                             $scope.error = "AN error has occured while Listing the records!" + data;
                         }) 
                      };



             /* 
             Calling api method for the dropdown list in the html page for the fields 
             RelieveReasonList,CompanyNameList,Locaiton,Company,Department,Employee List
             */
             $scope.RelieveReasonList = [];
             $http.get(baseUrl + 'api/Common/RelieveReasonTypeList/').success(function (data) {
                 $scope.RelieveReasonList = data;
             });


             $scope.CompanyNameList = [];
             $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                 $scope.CompanyNameList = data;
             });

             $scope.CommonEmployee_Filterlist = [];
             $scope.Employee_Filterlist = [];
             $scope.EmployeeList = function () {
                 if ($scope.CommonEmployee_Filterlist != undefined) {
                     $scope.CommonEmployee_Filterlist = [];
                     $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0'  + '&LocationId=0').success(function (data) {

                         $scope.CommonEmployee_Filterlist = $ff(data, { IsActive: 1 });
                         // console.log($scope.CommonEmployee_Filterlist);
                     });
                 }
             };


             $scope.Employee_Filterlist = [];
             $scope.EmployeeListfilter = function () {
                 if ($scope.Employee_Filterlist != undefined) {
                     $scope.Employee_Filterlist = [];
                     $http.get(baseUrl + 'api/EmployeeMaster/ReleiveEmployeeList/').success(function (data) {

                         $scope.Employee_Filterlist = data;
                         // console.log($scope.CommonEmployee_Filterlist);
                     });
                 }
             };
       


             //$scope.Effective_Date = $filter('date')(new Date(), 'dd/MMM/yyyy');
             if (event.preventDefault) {
                 event.preventDefault();
             } else if (typeof event.returnValue !== "undefined") {
                 event.returnValue = false;
             }

             //This is for Last working day field auto fill calculation//
             $scope.calculateRelievingDate = function () {
                 //if ($scope.Last_Working_Day == '')
                 {
                     //if (!(angular.isDate($filter('date')(new Date(new Date($scope.Resignation_Date).getTime() + $scope.Notice_Period * 24 * 60 * 60 * 1000), 'dd-MMM-yyyy')))) {
                     //    $scope.Last_Working_Day = $filter('date')(new Date(new Date($scope.Resignation_Date).getTime() + $scope.Notice_Period * 24 * 60 * 60 * 1000), 'dd-MMM-yyyy');
                     $scope.Last_Working_Day = moment(ParseDate($scope.Resignation_Date).add('d', $scope.Notice_Period)).format("DD-MMM-YYYY");
                     // $scope.Last_Working_Day = $filter('date')(new Date(ParseDate($scope.Resignation_Date).add('days', $scope.Notice_Period)));
                 }


             }
             /*This is for Auto fill Employee Details by selected Employee code */
             $scope.AttendanceEmployeeList = function () {
                 var Name = '';
                 if ($scope.BranchSelected != undefined) {
                     $scope.Name = $scope.BranchSelected.originalObject.Id;
                 }
           
                 $http.get(baseUrl + 'api/EmployeeMaster/EmployeeNameDetailsList/?Id=' + $scope.Name).success(function (data) {
                     $scope.Employee_Id = data.Id;
                     $scope.Employee_No = data.Employee_No;
                     $scope.Employee_Name = data.FullName;
                     $scope.Department_Name = data.Department_Name;
                     $scope.Designation_Name = data.Designation_Name;
                 }).error(function (data) {
                     $scope.error = "AN error has occured while Listing the records!" + data;
                 });



             };

             $scope.loading = false;

             //Calling api method for Update Employee Record set inactive //
             $scope.EmployeeDetails_Relieve = function () {
                 // $scope.calculateRelievingDate();
                 //return
                 if ($scope.Validationcontrols() == true) {

                     $scope.EmployeeNo = $scope.BranchSelected.originalObject.Employee_No;
                     var obj = {
                         Id: $scope.Employee_Id,
                         Resignation_Date: $scope.Resignation_Date,
                         Reason_Leaving_Type: $scope.ReasonLeaving_Type,
                         Leaving_Reason: $scope.Leaving_Reason,
                         Notice_Period: $scope.Notice_Period,
                         Last_Working_Day: $scope.Last_Working_Day,
                         Remarks: $scope.Remarks == "" ? null : $scope.Remarks,
                         Payment_Date: $scope.Payment_Date == "" ? null : $scope.Payment_Date,
                     };

                     $scope.loading = true;
                     $timeout(function () {
                         if ($scope.loading == true) {
                             $rootScope.$broadcast('show');
                         }
                     }, 3000); // 3 second

                     $http.post(baseUrl + '/api/EmployeeMaster/Employee_Relieve/', obj).success(function (data) {

                         $scope.ClearPopup();

                         $scope.loading = false;
                         $rootScope.$broadcast('hide');

                     }).error(function (data) {
                         $scope.error = "An error has occurred while adding Employee details!" + data.ExceptionMessage;
                     });

                 }
             };

             //This is for List page Redirect Function
             $scope.ListRedirect = function () {
                 $location.path("/ListEmployee/0/0");

             }

             $scope.CancelPopup = function()
             {
                 angular.element('#EmployeeReleiveModal').modal('hide');
                 $scope.ClearPopup();
             }

             //This is for clear function//
             $scope.ClearPopup = function () {
                 $scope.CommonEmployee_Filterlist = [];
                 $scope.Last_Working_Day = "";
                 //$scope.Employee_Id = "";
                 $scope.Employee_No = "";
                 $scope.Employee_Name = "";
                 $scope.Department_Name = ""; 
                 $scope.Designation_Name = "";
                 $scope.Resignation_Date = "";
                 $scope.ReasonLeaving_Type = "0";
                 $scope.Leaving_Reason = "";
                 $scope.Notice_Period = "";
                 $scope.Remarks = "";
                 $scope.Payment_Date = "";
                 $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
             };

         }]);

    //this is for user role mapping controller//
    EmpControllers.controller("EmployeeExcelController", ['$scope', '$http', '$filter', '$routeParams', '$rootScope', '$timeout',
         function ($scope, $http, $filter, $routeParams, $rootScope, $timeout) {
             $scope.EmployeeDetails = [];
             $scope.Message = [];
  
             $scope.downloadfile = function (url, defaultFileName) {
                 var self = this;
                 var deferred = $q.defer();
                 $http.get(url, { responseType: "blob" }).then(
                    function (data) {
                        saveAs(data.data, defaultFileName)
                        deferred.resolve(defaultFileName);
                    }, function (data) {
                        var e = /* error */
                         deferred.reject(e);
                    });
                 return deferred.promise;
             };


             $scope.dataURItoBlob = function (dataURI) {
                 var binary = atob(dataURI.split(',')[1]);
                 var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                 var array = [];
                 for (var i = 0; i < binary.length; i++) {
                     array.push(binary.charCodeAt(i));
                 }
                 return new Blob([new Uint8Array(array)], {
                     type: mimeString
                 });
             }
        
             $scope.doclogoChange = function () {

                 if ($('#Employee')[0].files[0] != undefined) {
                     $scope.LicenseFileName = $('#Employee')[0].files[0]['name'];
                 }
             }
        
             $scope.fileclear = function () {
                 $scope.licedoc = "";
                 $scope.Document_Upload = "";       
                 $scope.LicenseFileName = "";
                 $('#Employee').val('');
                 $scope.EmployeeDetails=[];
             };

             $scope.loading = false;

        


             $scope.MasterId = 0;

             $scope.EmployeeExcel_AddEdit = function () {

                 if ($scope.LicenseFileName == '' || $scope.LicenseFileName == undefined) {
                     alert("Please upload employee details");
                 }
                 else {

                     var filename = "";

                     var Licensefilename = "";

                     var fd = new FormData();
                     var imgBlob;
                     var imgBlobfile;
                     var itemIndexLogo = -1;
                     var itemIndexfile = -1;

                     var fd = new FormData();

                     if ($('#Employee')[0].files[0] != undefined) {
                         Licensefilename = $('#Employee')[0].files[0]['name'];
                         imgBlobfile = $scope.dataURItoBlob($scope.licedoc);                   

                         if (itemIndexLogo == -1) {
                             itemIndexfile = 0;
                         }
                         else {
                             itemIndexfile = 1;
                         }
                     }

                     if (itemIndexfile != -1) {
                         fd.append('file1', imgBlobfile);
                     }

                     $scope.loading = true;
                     $timeout(function () {
                         if ($scope.loading == true) {
                             $rootScope.$broadcast('show');
                         }
                     }, 3000); // 3 second

                     $http.post(baseUrl + 'api/ExcelUpload/AttachExcelFile',

                     fd,

                     {
                         withCredentials: false,
                         transformRequest: angular.identity,
                         headers: {
                             'Content-Type': undefined
                         },
                         params: {
                             fd

                             },
                     
                     }
                     )

                     .success(function (response) {


                         $scope.EmployeeDetails = response;
                   
                         $scope.loading = false;
                         $rootScope.$broadcast('hide');

                     }).error(function (response) {
                         $scope.Document_Upload = "";

                     }).error(function (data) {
                         $scope.error = "An error has occurred while adding employee details!" + data.ExceptionMessage;
                     });

                     $("#documentfile").val('');
                 };
             };
  
         }]);


    //This is for Employee Working Controller functions//
    EmpControllers.controller("EmployeeHolidayController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {
            $scope.Id = "0";

            // List Page Pagination.
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }
            $scope.rowCollection = [];
            $scope.listdata = [];

            ///*THIS IS FOR VALIDATION FUNCTION */
            /* Validating the create page mandatory fields
           checking mandatory for the follwing fields
           company name,Region name,LocationName,Department_Name,full name,Holiday date,reason
           and showing alert message when it is null.
           */
            $scope.Validationcontrols = function () {


                if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0 || $scope.Company_Name == null) {
                    alert("Please select Company");
                    return false;
                }
                else if (typeof ($scope.Region_Name) == "undefined" || $scope.Region_Name == 0) {
                    alert("Please select Region");
                    return false;
                }
                else if (typeof ($scope.Location_Name) == "undefined" || $scope.Location_Name == 0) {
                    alert("Please select Location");
                    return false;
                }
                else if (typeof ($scope.Department_Name) == "undefined" || $scope.Department_Name == 0) {
                    alert("Please select Department");
                    return false;
                }
                else if (typeof ($scope.Designation_Name) == "undefined" || $scope.Designation_Name == 0) {
                    alert("Please select Designation");
                    return false;
                }
                    //else if (typeof ($scope.Employee_No) == "undefined" || $scope.Employee_No == 0) {
                    //    alert("Please Select Employee");
                    //    return Employee_No;
                    //}
                    //else if (typeof ($scope.Employee_Name) == "undefined" || $scope.Employee_Selected == undefined || $scope.Name==0) {
                    //    alert("Please enter Employee Name");
                    //    return false;
                    //}
                else if (typeof ($scope.HolidayName) == "undefined" || $scope.HolidayName == "") {
                    alert("Please enter Holiday Name");
                    return false;
                }
                else if (typeof ($scope.HolidayDate) == "undefined" || $scope.HolidayDate == "") {
                    alert("Please select Holiday Date");
                    return false;
                }
                else if (isDate($scope.HolidayDate) == false) {
                    alert("Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            };


            /* THIS IS FOR VALIDATION FUNCTION */
            /* Showing alert when inactive record is try to edit in the list page */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            /*  Calling api method for the dropdown list in the html page for the fields 
              Company, LocationName, Region, Department, Designation
              */
            /* COMPANY NAME */
            $scope.CompanyFilterList = [];
            $scope.CompanyNameList = [];
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            });

            /* LOCATION NAME */
            $scope.LocationFilterList = [];
            $scope.LocationNameList = [];
            $http.get('/api/Common/GetLocationList_FromEmployee/').success(function (data) {
                // all location records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.LocationFilterList = data;
                // only active location
                $scope.LocationNameList = $ff(data, { IsActive: 1 });
            });

            /* REGION NAME */
            $scope.RegionFilterList = [];
            $scope.RegionList = [];
            $http.get(baseUrl + 'api/Common/GetRegionList/').success(function (data) {
                // all region records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.RegionFilterList = data;
                // only active region
                $scope.RegionList = $ff(data, { Active: 1 });
            });


            /* DEPARTMENT NAME */
            $scope.DepartmentFilterList = [];
            $scope.DepartmentList = [];
            $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                // all department records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DepartmentFilterList = data;
                // only active department
                $scope.DepartmentList = $ff(data, { Active: 1 });
            });


            /* DESIGNATION NAME */
            $scope.DesignationFilterList = [];
            $scope.DesignationList = [];
            $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {
                // all designation records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DesignationFilterList = data;
                // only active designation
                $scope.DesignationList = $ff(data, { Active: 1 });
            });


            // Declaration and initialization of Scope Variables.
            $scope.EmpWorkingId = 0;
            $scope.Id = "0";
            $scope.CompanyName = "0";
            $scope.RegionName = "0";
            $scope.LocationName = "0";
            $scope.DepartmentName = "0";
            $scope.DesignationName = "0";
            $scope.Company_Name = "0";
            $scope.Region_Name = "0";
            $scope.Location_Name = "0";
            $scope.Department_Name = "0";
            $scope.Designation_Name = "0";
            $scope.Employee_Name = '';
            $scope.Employee_Id = "";
            $scope.Employee_No = "";
            $scope.EmployeeList = [];

            /* Open the create pop up window */
            $scope.AddRegionHolidayPopUP = function (EHD) {
                $scope.ClearRegionHolidayPopup();
                $scope.Id = EHD;
                angular.element('#RegionLeaveModal').modal('show');
            }
            /* Open the view pop up window and show the details for the 
               employee holiday matching the specified employee holiday Id */
            $scope.ViewRegionHolidayPopUP = function (EHD) {
                $scope.Id = EHD;
                $scope.ViewRegionHolidayDetails();
                angular.element('#RegionLeaveViewModal').modal('show');
            }
            /* Open the edit pop up window and show the details for the 
                 employee holiday matching the specified employee holiday Id */
            $scope.EditRegionHolidayPopUP = function (EHD) {
                $scope.Id = EHD;
                $scope.ViewRegionHolidayDetails();
                angular.element('#RegionLeaveModal').modal('show');
            };
            /* List page pop up function */
            $scope.ListRegionHolidayPopUP = function (EHD) {
                $scope.Id = EHD;
                $scope.RegionHolidayList($scope.Id);
            };


            //Delete popup function// 
            $scope.DeleteRegionHoliday = function (EHD) {
                $scope.Id = EHD;
                $scope.DeleteRegionHolidayDetails();
            };


            /* View the inserted values */
            $scope.ViewRegionHolidayDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/EmployeeHoliday/EmployeeHoliday_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.EmpWorkingId = data.Id;
                    $scope.Company_Name = data.CompanyId.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Region_Name = data.RegionId.toString();
                    $scope.ViewRegionName = data.RegionName;
                    $scope.Location_Name = data.LocationId.toString();
                    $scope.ViewLocationName = data.LocationName;
                    $scope.Department_Name = data.DepartmentId.toString();
                    $scope.ViewDepartmentName = data.DepartmentName;
                    $scope.Designation_Name = data.DesignationId.toString();
                    $scope.ViewDesignationName = data.DesignationName;
                    $scope.Employee_Id = data.EmployeeId;
                    $scope.Employee_No = data.Employee_No;
                    $scope.FullNamelist = data.FullNamelist;
                    $scope.EmployeeName = data.EmployeeName;
                    $scope.HolidayName = data.HolidayName;
                    $scope.FullNamelist = data.FullNamelist;
                    $scope.HolidayDate = $filter('date')(data.HolidayDate, "dd-MMM-yyyy");
                    $scope.Remarks = data.Remarks;
                    //$scope.EmployeeDetailsPopup($scope.Company_Name);
                   // $scope.Employeelistfilter();

                    var sel = {
                        Id: data.EmployeeId,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;

                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);

                    $scope.CompanyInactiveFlag = 0;
                    $scope.LocationInactiveFlag = 0;
                    $scope.RegionInactiveFlag = 0;
                    $scope.DepartmentInactiveFlag = 0;
                    $scope.DesignationInactiveFlag = 0;
                    // if the current viewing company is inactive
                    // set the flag value to 1
                    if (($ff($scope.CompanyFilterList, { Id: $scope.Company_Name, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                        $scope.CompanyInactiveFlag = 1;
                    }
                    if (($ff($scope.LocationFilterList, { Id: $scope.Location_Name, LocationName: $scope.ViewLocationName, Active: 0 }).length) == 1) {
                        $scope.LocationInactiveFlag = 1;
                    }
                    if (($ff($scope.RegionFilterList, { Id: $scope.Region_Name, Region: $scope.ViewRegionName, Active: 0 }).length) == 1) {
                        $scope.RegionInactiveFlag = 1;
                    }
                    if (($ff($scope.DepartmentFilterList, { Id: $scope.Department_Name, Department_Name: $scope.ViewDepartmentName, Active: 0 }).length) == 1) {
                        $scope.DepartmentInactiveFlag = 1;
                    }
                    if (($ff($scope.DesignationFilterList, { Id: $scope.Designation_Name, Designation_Name: $scope.ViewDesignationName, Active: 0 }).length) == 1) {
                        $scope.DesignationInactiveFlag = 1;
                    }

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Region Holiday details!" + data;
                });
            };


            /* Inactivate the active records in list page */
            $scope.DeleteRegionHolidayDetails = function () {
                var del = confirm("Do you like to inactivate the selected employee holiday detail?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EmployeeHoliday/EmployeeHoliday_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee holiday detail has been inactivated successfully");
                        $scope.RegionHolidayListGo();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Region Holidays Detail" + data;
                    });
                };
            }
            //Activate record pop up function// 
            $scope.ReInsertRegionHoliday = function (EHD) {
                $scope.Id = EHD;
                $scope.ReInsertRegionHolidayDetails();
            };

            /*Activate the inactivated records in the list page */
            $scope.ReInsertRegionHolidayDetails = function () {
                var Ins = confirm("Do you like to activate the selected employee holiday detail?");
                if (Ins == true) {
                    $http.get(baseUrl + 'api/EmployeeHoliday/EmployeeHoliday_ReInsert/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee holiday detail has been activated successfully");
                        $scope.ListRegionHolidayPopUP($scope.Id = 0);
                    }).error(function (data) {
                        $scope.error = "An error has occurred while ReInserting Region Holiday Detail" + data;
                    });s
                };
            };

            //ReInsert popup function//
            $scope.ReInsertRegionHoliday = function (EHD) {
                $scope.Id = EHD;
                $scope.ReInsertRegionHolidayDetails();
            };

            /* Clear the create page scope variable values. */
            $scope.ClearRegionHolidayPopup = function () {
                $scope.Name = "0";
                $scope.Company_Name = "0";
                $scope.Region_Name = "0";
                $scope.Location_Name = "0";
                $scope.Department_Name = "0";
                $scope.Designation_Name = "0";
                $scope.HolidayName = "";
                $scope.Employee_No = "";
                $scope.HolidayDate = "";
                $scope.EmployeeName = "";
                $scope.Remarks = "";
                $scope.CompanyInactiveFlag = 0;
                $scope.LocationInactiveFlag = 0;
                $scope.RegionInactiveFlag = 0;
                $scope.DepartmentInactiveFlag = 0;
                $scope.DesignationInactiveFlag = 0;
                $scope.NameList = "0";
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            };
            /* Clear the create page scope Employee variable values. */
            $scope.ClearEmployee = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
            };
            $scope.EmpWorkingId = 0;
            //    $scope.EmpWorkingId = 0;
            //    $scope.RegionHolidayAddEdit = function () {
            //    if ($scope.CompanyName != "") {
            //            $http.get(baseUrl + '/api/EmployeeHoliday/EmployeeHoliday_DuplicateCheck/?Id=' + $scope.EmpWorkingId + '&CompanyId=' + $scope.Company_Name + '&RegionId=' + $scope.Region_Name + '&LocationId=' + $scope.Location_Name + '&DepartmentId=' + $scope.Department_Name + '&DesignationId=' + $scope.Designation_Name + '&EmployeeId=' + $scope.EmployeeId + '&HolidayDate=' + $scope.HolidayDate).success(function (data) {

            //            if (data.returnval == 1) {
            //                alert("This Organization worday already exists, cannot duplicate");
            //                return false;
            //            }
            //            else {
            //                $scope.RegionHolidayAddEdit1();
            //            }
            //            //return true;
            //            //$scope.InsertLeavePolicy_AddEdit();
            //        });
            //        return true;
            //    };
            //}

            $scope.RegionHolidayEmployee = function () {
                if ($scope.Company_Name == 0 && $scope.Location_Name == 0 && $scope.Department_Name == 0 && $scope.Designation_Name == 0) {
                    var Name = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.Name = $scope.Employee_Selected.originalObject.Id;

                        $http.get(baseUrl + '/api/Common/EmployeeSelectionDetailsList/?Id=' + $scope.Name).success(function (data) {
                            $scope.Employee_No = data.Employee_No;
                            $scope.Company_Name = data.Company_Name;
                            $scope.Location_Name = data.Location_Name;
                            $scope.Department_Name = data.Department_Name;
                            $scope.Designation_Name = data.Designation_Name;

                            $scope.CompanyFilterList1 = [];
                            $scope.CompanyNameList1 = [];
                            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                                // all company records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.CompanyFilterList1 = data;
                                // only active company
                                $scope.CompanyNameList1 = $ff(data, { Active: 0 });
                                angular.forEach($scope.CompanyNameList1, function (value, index) {
                                    if (($scope.Company_Name == value.Id)) {
                                        $scope.Company_Name = "0";
                                    }
                                });
                            });
                            $scope.LocationFilterList1 = [];
                            $scope.LocationNameList1 = [];
                            $http.get('/api/Common/GetLocationList/').success(function (data) {
                                // all location records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.LocationFilterList1 = data;
                                // only active location
                                $scope.LocationNameList1 = $ff(data, { Active: 0 });
                                angular.forEach($scope.LocationNameList1, function (value, index) {
                                    //  console.log(value.Id);
                                    if (($scope.Location_Name == value.Id)) {

                                        $scope.Location_Name = "0";
                                    }
                                });
                            });
                            $scope.DepartmentFilterList1 = [];
                            $scope.DepartmentList1 = [];
                            $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                                // all department records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.DepartmentFilterList1 = data;
                                // only active department
                                $scope.DepartmentList1 = $ff(data, { Active: 0 });
                                //  console.log($scope.DepartmentList1);
                                angular.forEach($scope.DepartmentList1, function (value, index) {
                                    if (($scope.DepartmentList1 == value.Id)) {
                                        $scope.Department_Name = "0";
                                    }
                                });
                            });


                            /* DESIGNATION NAME */
                            $scope.DesignationFilterList1 = [];
                            $scope.DesignationList1 = [];
                            $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {
                                // all designation records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.DesignationFilterList1 = data;
                                // only active designation
                                $scope.DesignationList1 = $ff(data, { Active: 0 });
                                //   console.log($scope.DesignationList1);
                                angular.forEach($scope.DesignationList1, function (value, index) {
                                    if (($scope.DesignationList1 == value.Id)) {

                                        $scope.Designation_Name = "0";
                                    }
                                });
                            });

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    }
                    else {
                        $scope.EmployeeNameList();
                    }
                }
            };
            $scope.loading = false;
       
            /*THIS IS FOR ADD EDIT FUNCITON */
            $scope.RegionHolidayAddEdit = function () {

                if ($scope.Validationcontrols() == true) {
                    $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 seconds
                    $http.get(baseUrl + '/api/EmployeeHoliday/EmployeeHoliday_AddEdit/?Id=' + $scope.EmpWorkingId + '&CompanyId=' + $scope.Company_Name + '&RegionId=' + $scope.Region_Name + '&LocationId=' + $scope.Location_Name + '&DepartmentId=' + $scope.Department_Name + '&DesignationId=' + $scope.Designation_Name
                     + '&HolidayDate=' + $scope.HolidayDate + '&Remarks=' + $scope.Remarks + '&EmployeeId=' + $scope.EmployeeId + '&HolidayName=' + $scope.HolidayName).success(function (data) {

                         $scope.EmployeeWorkingId = data.Id;
                         // console.log(data);
                         var Flag = data.Flag;

                         if ((Flag == 1) || (Flag == 2)) {
                             $scope.AddId = data.Id;
                             $scope.ListRegionHolidayPopUP($scope.EmployeeWorkingId);
                             angular.element('#RegionLeaveModal').modal('hide');
                             $scope.ClearRegionHolidayPopup();

                         }
                         else if (Flag == 3) {
                             alert("Selected date is already a Holiday")
                         }
                         $scope.loading = false;
                         $rootScope.$broadcast('hide');
                     }).error(function (data) {
                         $scope.error = "An error has occurred while adding Company update details!" + data.ExceptionMessage;
                     });
                    //  console.log(data);
                }
            }

            $scope.NameListfilter = [];
            $scope.NamefilterListfilter = [];
            $scope.Employeelistfilter = function () {
                if ($scope.NamefilterListfilter != undefined) {
                    $scope.NameListfilter = [];
                    $scope.NamefilterListfilter = [];
                    // $scope.NameList = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.LocationName + '&Designation_Id=' + $scope.DesignationName).success(function (data) {
                        // $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=0').success(function (data) {
                        $scope.NameListfilter = data;
                        $scope.NamefilterListfilter = $ff(data, { IsActive: 1 });
                    });
                }
            }
            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $scope.Employeefilteredlist = function () {
                if ($scope.Autolist != undefined) {
                    $scope.Autolist = [];
                    $scope.Autofilterlist = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName + '&Department_Id=' + $scope.DepartmentName + '&LocationId=' + $scope.LocationName + '&Designation_Id=' + $scope.DesignationName).success(function (data) {
                        $scope.Autofilterlist = data;
                        $scope.Autolist = data;
                    });
                }
            }


            //$scope.EmployeeNameList = function () {
            //    var EmployeeNo = '';
            //    if ($scope.Employee_Selected != undefined) {
            //        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

            //        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

            //            $scope.Employee_No = data.Employee_No;

            //        }).error(function (data) {
            //            $scope.error = "AN error has occured while Listing the records!" + data;
            //        });
            //    };
            //};


            $scope.CompanyId = "0";
            $scope.HolidayName = "";
            $scope.HolidayDate = "";
            $scope.Remarks = "";


            /*THIS IS FOR LIST FUNCITON */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.loading = false;
            $scope.RegionHolidayList = function () {

                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.FullName;
                };
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds
                $http.get(baseUrl + 'api/EmployeeWorking/EmployeeWorkingList/?Id=' + $scope.Id + '&CompanyId=' + $scope.CompanyName + '&RegionId=' + $scope.RegionName + '&LocationId=' + $scope.LocationName + '&DepartmentId=' + $scope.DepartmentName + '&DesignationId=' + $scope.DesignationName + '&EmployeeName=' + EmpName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;

                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };


            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            // $scope.Employeefilteredlist = function () {
            // $scope.autocompleteclear();
            if ($scope.Autolist != undefined) {  // to avoid going to DB each time when Employee Search clicked
                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.LocationName + '&Designation_Id=' + $scope.DesignationName).success(function (data) {
                    $scope.Autofilterlist = $ff(data, { IsActive: 1 });
                    $scope.Autolist = data;
                });
                // }
            }
            /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            $scope.Autocompletefilter = function () {
                if ($scope.IsActive == 1) {

                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                }
                else if ($scope.IsActive == 0) {
                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                }
                else if ($scope.IsActive == -1) {
                    $scope.Autolist = [];
                    $scope.Autolist = $scope.Autofilterlist;
                }
            };
            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            //$scope.NameList = [];
            //$scope.NamefilterList = [];
            //$scope.Employeelist = function () {
            //    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
            //        $scope.NameList = [];
            //        $scope.NamefilterList = [];

                
            //        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.Location_Name + '&Designation_Id=' + $scope.Designation_Name).success(function (data) {
            //            $scope.NameList = data;
            //            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    
            //        });
            //    }
            //}

            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.Location_Name + '&Designation_Id=' + $scope.Designation_Name).success(function (data) {
                $scope.NameList = data;
                $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    
            });

            /* To show the employee code at the time of employee selection */
            $scope.EmployeeNameList = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                        $scope.Employee_No = data.Employee_No;
                        $scope.Department_Name =data.Department_Id;
                        $scope.Location_Name =data.LocationId;
                        $scope.Designation_Name =data.Designation_Id;
                  
                        if(data.Company_Name == null)
                        {
                            $scope.Company_Name ="0";
                        }
                        else{
                            $scope.Company_Name = data.Company_Name;
                        }

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };

            //List page filters
            $scope.EmployeeNameListfunction = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {
                    
                        // $scope.Employee_No = data.Employee_No;
                        $scope.DepartmentName =data.Department_Id;
                        $scope.LocationName =data.LocationId;
                        $scope.DesignationName =data.Designation_Id;
                  
                        if(data.Company_Name == null)
                        {
                            $scope.CompanyName ="0";
                        }
                        else{
                            $scope.CompanyName = data.Company_Name;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };

            $scope.CompanyId = "0";
            $scope.HolidayName = "";
            $scope.HolidayDate = "";
            $scope.Remarks = "";


            /*
          Calling the api method to list the Employee holiday details for the  filters  comapany name,region,location,department,designation 
          and employee name
          showing the result in table.
          */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.RegionHolidayList = function () {
                if ($scope.Employee_Selected != undefined) {
                    var EmpName = '';
                    EmpName = $scope.Employee_Selected.originalObject.Id;
                }

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds

                $http.get(baseUrl + '/api/EmployeeHoliday/EmployeeHolidayList/?Id=' + $scope.Id + '&CompanyId=' + $scope.CompanyName + '&RegionId=' + $scope.RegionName + '&LocationId=' + $scope.LocationName + '&DepartmentId=' + $scope.DepartmentName + '&DesignationId=' + $scope.DesignationName + '&Employee_Id=' + EmpName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;

                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');

                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };
            $scope.Id = 0;
            /* on click Go calling the list function.*/
            $scope.RegionHolidayListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.ListRegionHolidayPopUP(ListId);
            };

            $scope.ViewRedirect = function () {
                $location.path("/RegionHolidayEdit/" + $scope.Id);
            };

            $scope.ListRedirect = function () {
                $location.path("/RegionHolidayList/" + $scope.Id);
            };

            /* Close the pop up window for the view pop up on click cancel button */
            $scope.CancelView = function () {
                angular.element('#RegionLeaveViewModal').modal('hide');
                $scope.ClearRegionHolidayPopup();
            }
            /* Close the pop up window for the edit pop up on click cancel button */
            $scope.CancelPopup = function () {
                angular.element('#RegionLeaveModal').modal('hide');
                $scope.ClearRegionHolidayPopup();
            }


        }
    ]);


    //This is for Employee Working Controller functions//
    EmpControllers.controller("EmployeeWorkingController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {
            $scope.Id = "0";

            // List Page Pagination.
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }
            $scope.rowCollection = [];
            $scope.listdata = [];

            /*THIS IS FOR VALIDATION FUNCTION */
            /* Validating the create page mandatory fields
           checking mandatory for the follwing fields
           company name,Region name,LocationName,Department_Name,full name,Holiday date,reason
           and showing alert message when it is null.
           */
            $scope.Validationcontrols = function () {


                if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0) {
                    alert("Please select Company");
                    return false;
                }
                else if (typeof ($scope.Region_Name) == "undefined" || $scope.Region_Name == 0) {
                    alert("Please select Region");
                    return false;
                }
                else if (typeof ($scope.Location_Name) == "undefined" || $scope.Location_Name == 0) {
                    alert("Please select Location");
                    return false;
                }
                else if (typeof ($scope.Department_Name) == "undefined" || $scope.Department_Name == 0) {
                    alert("Please select Department");
                    return false;
                }
                else if (typeof ($scope.Designation_Name) == "undefined" || $scope.Designation_Name == 0) {
                    alert("Please select Designation");
                    return false;
                }
                    //else if (typeof ($scope.Employee_No) == "undefined" || $scope.Employee_No == 0) {
                    //    alert("Please Select Employee");
                    //    return Employee_No;
                    //}
                else if (typeof ($scope.NameList) == "undefined" || $scope.Employee_Selected == undefined) {
                    alert("Please enter Employee Name");
                    return false;
                }
                else if (typeof ($scope.Date) == "undefined" || $scope.Date == "") {
                    alert("Please select Date");
                    return false;
                }
                else if (typeof ($scope.Reason) == "undefined" || $scope.Reason == "") {
                    alert("Please enter Reason");
                    return false;
                }
                else if (isDate($scope.Date) == false) {
                    alert("Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            };

            /* THIS IS FOR VALIDATION FUNCTION */
            /* Showing alert when inactive record is try to edit in the list page */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            /*  Calling api method for the dropdown list in the html page for the fields 
              Company, LocationName, Region, Department, Designation
              */
            /* COMPANY NAME */
            $scope.CompanyFilterList = [];
            $scope.CompanyNameList = [];
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            });

            /* LOCATION NAME */
            $scope.LocationFilterList = [];
            $scope.LocationNameList = [];
            $http.get('/api/Common/GetLocationList_FromEmployee/').success(function (data) {
                // all location records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.LocationFilterList = data;
                // only active location
                $scope.LocationNameList = $ff(data, { IsActive: 1 });
            });

            /* REGION NAME */
            $scope.RegionFilterList = [];
            $scope.RegionList = [];
            $http.get(baseUrl + 'api/Common/GetRegionList/').success(function (data) {
                // all region records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.RegionFilterList = data;
                // only active region
                $scope.RegionList = $ff(data, { Active: 1 });
            });


            /* DEPARTMENT NAME */
            $scope.DepartmentFilterList = [];
            $scope.DepartmentList = [];
            $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                // all department records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DepartmentFilterList = data;
                // only active department
                $scope.DepartmentList = $ff(data, { Active: 1 });
            });


            /* DESIGNATION NAME */
            $scope.DesignationFilterList = [];
            $scope.DesignationList = [];
            $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {
                // all designation records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.DesignationFilterList = data;
                // only active designation
                $scope.DesignationList = $ff(data, { Active: 1 });
            });

            // Declaration and initialization of Scope Variables.
            $scope.CompanyName = "0";
            $scope.RegionName = "0";
            $scope.LocationName = "0";
            $scope.DepartmentName = "0";
            $scope.DesignationName = "0";
            $scope.Company_Name = "0";
            $scope.Region_Name = "0";
            $scope.Location_Name = "0";
            $scope.Department_Name = "0";
            $scope.Designation_Name = "0";
            $scope.Employee_Name = '';

            /* Open the create pop up window */
            $scope.AddEmpWorkingPopUP = function (LPH) {
                $scope.ClearEmpWorkingPopup();
                $scope.Id = LPH;
                angular.element('#RegionWorkModal').modal('show');
            }
            /* Open the view pop up window and show the details for the 
               employee working day for the  employee working day Id */
            $scope.ViewEmpWorkingPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.ViewEmpWorkingDetails();
                angular.element('#RegionWorkViewModal').modal('show');
            }
            /* Open the edit pop up window and show the details for the 
               employee working day for the  employee working day Id */
            $scope.EditEmpWorkingPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.ViewEmpWorkingDetails();
                angular.element('#RegionWorkModal').modal('show');
            }
            /* List page pop up function */
            $scope.ListEmpWorkingPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.EmpWorkingList($scope.Id);
            }

            //Delete popup function// 
            $scope.DeleteEmpWorking = function (LPHId) {
                $scope.Id = LPHId;
                $scope.DeleteEmpWorkingDetails();
            };

            /* View the inserted values */
            $scope.ViewEmpWorkingDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;

                }
                $http.get(baseUrl + 'api/EmployeeWorking/EmployeeWorking_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.EmpWorkingId = data.Id;
                    $scope.Company_Name = data.CompanyId.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Region_Name = data.RegionId.toString();
                    $scope.ViewRegionName = data.RegionName;
                    $scope.Location_Name = data.LocationId.toString();
                    $scope.ViewLocationName = data.LocationName;
                    $scope.Department_Name = data.DepartmentId.toString();
                    $scope.ViewDepartmentName = data.DepartmentName;
                    $scope.Designation_Name = data.DesignationId.toString();
                    $scope.ViewDesignationName = data.DesignationName;
                    $scope.Employee_Id = data.EmployeeId;
                    $scope.Employee_No = data.Employee_No;
                    $scope.FullNamelist = data.FullNamelist;
                    $scope.EmployeeName = data.EmployeeName;
                    $scope.Date = $filter('date')(data.Date, "dd-MMM-yyyy");
                    $scope.Reason = data.Reason;
                    //$scope.EmployeeDetailsPopup($scope.Company_Name);
                    $scope.Employeelist();


                    var sel = {
                        Id: data.EmployeeId,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;

                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);

                    $scope.CompanyInactiveFlag = 0;
                    $scope.LocationInactiveFlag = 0;
                    $scope.RegionInactiveFlag = 0;
                    $scope.DepartmentInactiveFlag = 0;
                    $scope.DesignationInactiveFlag = 0;
                    // if the current viewing company is inactive
                    // set the flag value to 1
                    if (($ff($scope.CompanyFilterList, { Id: $scope.Company_Name, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                        $scope.CompanyInactiveFlag = 1;
                    }
                    if (($ff($scope.LocationFilterList, { Id: $scope.Location_Name, LocationName: $scope.ViewLocationName, Active: 0 }).length) == 1) {
                        $scope.LocationInactiveFlag = 1;
                    }
                    if (($ff($scope.RegionFilterList, { Id: $scope.Region_Name, Region: $scope.ViewRegionName, Active: 0 }).length) == 1) {
                        $scope.RegionInactiveFlag = 1;
                    }
                    if (($ff($scope.DepartmentFilterList, { Id: $scope.Department_Name, Department_Name: $scope.ViewDepartmentName, Active: 0 }).length) == 1) {
                        $scope.DepartmentInactiveFlag = 1;
                    }
                    if (($ff($scope.DesignationFilterList, { Id: $scope.Designation_Name, Designation_Name: $scope.ViewDesignationName, Active: 0 }).length) == 1) {
                        $scope.DesignationInactiveFlag = 1;
                    }

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Region Holiday details!" + data;
                });
            };


            /*THIS IS FOR DELETE FUNCITON */
            $scope.DeleteEmpWorkingDetails = function () {
                var del = confirm("Do you like to inactivate the selected employee work day detail?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EmployeeWorking/EmployeeWorking_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee work day detail has been inactivated successfully");
                        $scope.EmpWorkingListGo();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Region Holidays Detail" + data;
                    });
                };
            }
            //Active popup function// 
            $scope.ActiveEmpWorking = function (LPHId) {
                $scope.Id = LPHId;
                $scope.ReInsertEmpWorkingDetails();
            };

            /*THIS IS FOR REINSERT FUNCITON */
            $scope.ReInsertEmpWorkingDetails = function () {
                var Ins = confirm("Do you like to activate the selected employee work day detail?");
                if (Ins == true) {
                    $http.get(baseUrl + 'api/EmployeeWorking/EmployeeWorking_ReInsert/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee work day detail has been activated successfully");
                        $scope.ListEmpWorkingPopUP($scope.Id = 0);
                        // $scope.CompanyBranchMaster_ListSearch();
                        //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while ReInserting Employee working day detail" + data;
                    });
                };
            }

            //ReInsert popup function//
            $scope.ReEmpWorking = function (EWD) {
                $scope.Id = EWD;
                $scope.ReInsertEmpWorkingDetails();
            };

            /* Clear the create page scope variable values. */
            $scope.ClearEmpWorkingPopup = function () {
                $scope.Name = "0";
                $scope.Company_Name = "0";
                $scope.Region_Name = "0";
                $scope.Location_Name = "0";
                $scope.Department_Name = "0";
                $scope.Designation_Name = "0";
                $scope.Employee_No = "";
                $scope.EmployeeName = "";
                $scope.Date = "";
                $scope.Reason = "";
                $scope.CompanyInactiveFlag = 0;
                $scope.LocationInactiveFlag = 0;
                $scope.RegionInactiveFlag = 0;
                $scope.DepartmentInactiveFlag = 0;
                $scope.DesignationInactiveFlag = 0;
                $scope.NameList = "0";
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
            };
            /* Clear the create page scope Employee variable values. */
            $scope.ClearEmployee = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
            };
            $scope.EmpWorkingId = 0;


            $scope.EmpWorking = function () {
                if ($scope.Company_Name == 0 && $scope.Location_Name == 0 && $scope.Department_Name == 0 && $scope.Designation_Name == 0) {
                    var Name = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.Name = $scope.Employee_Selected.originalObject.Id;
              
                    $http.get(baseUrl + '/api/Common/EmployeeSelectionDetailsList/?Id=' + $scope.Name).success(function (data) {
                        $scope.Employee_No = data.Employee_No;
                        $scope.Company_Name = data.Company_Name;
                        $scope.Location_Name = data.Location_Name;
                        $scope.Department_Name = data.Department_Name;
                        $scope.Designation_Name = data.Designation_Name;

                        $scope.CompanyFilterList1 = [];
                        $scope.CompanyNameList1 = [];
                        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                            // all company records list including active and inactive 
                            // used for list page DD and inactive records filtering
                            $scope.CompanyFilterList1 = data;
                            // only active company
                            $scope.CompanyNameList1 = $ff(data, { Active: 0 });
                            angular.forEach($scope.CompanyNameList1, function (value, index) {
                                if (($scope.Company_Name == value.Id)) {
                                    $scope.Company_Name = "0";
                                }
                            });
                        });
                        $scope.LocationFilterList1 = [];
                        $scope.LocationNameList1 = [];
                        $http.get('/api/Common/GetLocationList/').success(function (data) {
                            // all location records list including active and inactive 
                            // used for list page DD and inactive records filtering
                            $scope.LocationFilterList1 = data;
                            // only active location
                            $scope.LocationNameList1 = $ff(data, { Active: 0 });
                            angular.forEach($scope.LocationNameList1, function (value, index) {
                                //  console.log(value.Id);
                                if (($scope.Location_Name == value.Id)) {

                                    $scope.Location_Name = "0";
                                }
                            });
                        });
                        $scope.DepartmentFilterList1 = [];
                        $scope.DepartmentList1 = [];
                        $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                            // all department records list including active and inactive 
                            // used for list page DD and inactive records filtering
                            $scope.DepartmentFilterList1 = data;
                            // only active department
                            $scope.DepartmentList1 = $ff(data, { Active: 0 });
                            //  console.log($scope.DepartmentList1);
                            angular.forEach($scope.DepartmentList1, function (value, index) {
                                if (($scope.DepartmentList1 == value.Id)) {
                                    $scope.Department_Name = "0";
                                }
                            });
                        });


                        /* DESIGNATION NAME */
                        $scope.DesignationFilterList1 = [];
                        $scope.DesignationList1 = [];
                        $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {
                            // all designation records list including active and inactive 
                            // used for list page DD and inactive records filtering
                            $scope.DesignationFilterList1 = data;
                            // only active designation
                            $scope.DesignationList1 = $ff(data, { Active: 0 });
                            //   console.log($scope.DesignationList1);
                            angular.forEach($scope.DesignationList1, function (value, index) {
                                if (($scope.DesignationList1 == value.Id)) {

                                    $scope.Designation_Name = "0";
                                }
                            });
                        });

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                    }
                }
                else {
                    $scope.EmployeeNameList();
                }
            }

            /*THIS IS FOR ADD EDIT FUNCITON */
            $scope.EmpWorkingAddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + '/api/EmployeeWorking/EmployeeWorking_AddEdit/?Id=' + $scope.EmpWorkingId + '&CompanyId=' + $scope.Company_Name + '&RegionId=' + $scope.Region_Name + '&LocationId=' + $scope.Location_Name + '&DepartmentId=' + $scope.Department_Name + '&DesignationId=' + $scope.Designation_Name
                      + '&Date=' + $scope.Date + '&Reason=' + $scope.Reason + '&EmployeeId=' + $scope.EmployeeId).success(function (data) {
                          $scope.EmployeeWorkingId = data.Id;

                          var Flag = data.Flag;

                          if ((Flag == 1) || (Flag == 2)) {
                              $scope.AddId = data.Id;
                              $scope.ListEmpWorkingPopUP($scope.EmployeeWorkingId);
                              angular.element('#RegionWorkModal').modal('hide');
                              $scope.ClearEmpWorkingPopup();

                          }
                          else if (Flag == 3) {
                              alert("Selected date is already a Workday")
                          }

                      }).error(function (data) {
                          $scope.error = "An error has occurred while adding Company update details!" + data.ExceptionMessage;
                      });
                }
            }

            $scope.NameList = [];
            $scope.NamefilterList = [];
            $scope.Employeelist = function () {
                if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.Location_Name + '&Designation_Id=' + $scope.Designation_Name).success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            };


            //$scope.EmployeeNameList = function () {
            //    var EmployeeNo = '';
            //    if ($scope.Employee_Selected != undefined) {
            //        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

            //        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

            //            $scope.Employee_No = data.Employee_No;

            //        }).error(function (data) {
            //            $scope.error = "AN error has occured while Listing the records!" + data;
            //        });
            //    };
            //};


            $scope.CompanyId = "0";
            $scope.HolidayName = "";
            $scope.HolidayDate = "";
            $scope.Remarks = "";


            /*THIS IS FOR LIST FUNCITON */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.loading = false;
            $scope.EmpWorkingList = function () {

                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.FullName;
                };
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds
                $http.get(baseUrl + 'api/EmployeeWorking/EmployeeWorkingList/?Id=' + $scope.Id + '&CompanyId=' + $scope.CompanyName + '&RegionId=' + $scope.RegionName + '&LocationId=' + $scope.LocationName + '&DepartmentId=' + $scope.DepartmentName + '&DesignationId=' + $scope.DesignationName + '&EmployeeName=' + EmpName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;

                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };


            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $scope.Employeefilteredlist = function () {
                // $scope.autocompleteclear();
                if ($scope.Autolist != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.Autolist = [];
                    $scope.Autofilterlist = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.CompanyName + '&Department_Id=' + $scope.DepartmentName + '&LocationId=' + $scope.LocationName + '&Designation_Id=' + $scope.DesignationName).success(function (data) {
                        $scope.Autofilterlist = data;
                        $scope.Autolist = data;
                    });
                }
            }
            /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            $scope.Autocompletefilter = function () {
                if ($scope.IsActive == 1) {

                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                }
                else if ($scope.IsActive == 0) {
                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                }
                else if ($scope.IsActive == -1) {
                    $scope.Autolist = [];
                    $scope.Autolist = $scope.Autofilterlist;
                }
            };
            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            $scope.NameList = [];
            $scope.NamefilterList = [];
            //$scope.Employeelist = function () {
            //    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
            //        $scope.NameList = [];
            //        $scope.NamefilterList = [];
            //        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.Location_Name + '&Designation_Id=' + $scope.Designation_Name).success(function (data) {
            //            $scope.NameList = data;
            //            $scope.NamefilterList = $ff(data, { IsActive: 1 });

            //        });
            //    }
            //}

            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=' + $scope.Department_Name + '&LocationId=' + $scope.Location_Name + '&Designation_Id=' + $scope.Designation_Name).success(function (data) {
                $scope.NameList = data;
                $scope.NamefilterList = $ff(data, { IsActive: 1 });
            });

            /* To show the employee code at the time of employee selection */
            $scope.EmployeeNameList = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {
                    
                        $scope.Employee_No = data.Employee_No;
                        $scope.Department_Name =data.Department_Id;
                        $scope.Location_Name =data.LocationId;
                        $scope.Designation_Name =data.Designation_Id;
                  
                        if(data.Company_Name == null)
                        {
                            $scope.Company_Name ="0";
                        }
                        else{
                            $scope.Company_Name = data.Company_Name;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };

            //List page filters
            $scope.EmployeeNameListfunction = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {
                    
                       // $scope.Employee_No = data.Employee_No;
                        $scope.DepartmentName =data.Department_Id;
                        $scope.LocationName =data.LocationId;
                        $scope.DesignationName =data.Designation_Id;
                  
                        if(data.Company_Name == null)
                        {
                            $scope.CompanyName ="0";
                        }
                        else{
                            $scope.CompanyName = data.Company_Name;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };


            $scope.CompanyId = "0";
            $scope.HolidayName = "";
            $scope.HolidayDate = "";
            $scope.Remarks = "";


            /*
          Calling the api method to list the Employee holiday details for the  filters  comapany name,region,location,department,designation 
          and employee name
          showing the result in table.
          */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.EmpWorkingList = function () {
                if ($scope.Employee_Selected != undefined) {
                    var EmpName = '';
                    EmpName = $scope.Employee_Selected.originalObject.Id;
                }

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds

                $http.get(baseUrl + 'api/EmployeeWorking/EmployeeWorkingList/?Id=' + $scope.Id + '&CompanyId=' + $scope.CompanyName + '&RegionId=' + $scope.RegionName + '&LocationId=' + $scope.LocationName + '&DepartmentId=' + $scope.DepartmentName + '&DesignationId=' + $scope.DesignationName + '&Employee_Id=' + EmpName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;

                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };

            /* on click Go calling the list function.*/
            $scope.EmpWorkingListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.ListEmpWorkingPopUP(ListId);
            };

            $scope.ViewRedirect = function () {
                $location.path("/RegionHolidayEdit/" + $scope.Id);
            };

            $scope.ListRedirect = function () {
                $location.path("/RegionHolidayList/" + $scope.Id);
            };

            /* Close the pop up window for the view pop up on click cancel button */
            $scope.CancelViewPopup = function () {
                angular.element('#RegionWorkViewModal').modal('hide');
                $scope.ClearEmpWorkingPopup();
            }
            /* Close the pop up window for the edit pop up on click cancel button */
            $scope.CancelPopup = function () {
                angular.element('#RegionWorkModal').modal('hide');
                $scope.ClearEmpWorkingPopup();
            }

        }
    ]);

    //This is for Public WorkDays Controller functions//
    EmpControllers.controller("OrganizationWorkDaysController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {
            $scope.PubId = 0;
            $scope.Id = "0";
            // List Page Pagination.
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.listdata = [];
            $scope.rowCollection = [];
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }


            /*THIS IS FOR VALIDATION FUNCTION */
            /* Validating the create page mandatory fields
              checking mandatory for the follwing fields
              company name,Region name,LocationName,work date,reason
              and showing alert message when it is null.
              */
            $scope.Validationcontrols = function () {
                //if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0 ) {
                //    alert("Please select Company");
                //    return false;
                //}
                //else if (typeof ($scope.Region) == "undefined" || $scope.Region == 0) {
                //    alert("Please select Region");
                //    return false;
                //}
                //else if (typeof ($scope.LocationName) == "undefined" || $scope.LocationName == 0) {
                //    alert("Please select Location");
                //    return false;
                //}
                 if (typeof ($scope.WorkDate) == "undefined" || $scope.WorkDate == "") {
                    alert("Please select Date");
                    return false;
                }
                else if (typeof ($scope.Reason) == "undefined" || $scope.Reason == "") {
                    alert("Please enter Reason");
                    return false;
                }
                else if (isDate($scope.WorkDate) == false) {
                    alert("Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            };


            /* THIS IS FOR VALIDATION FUNCTION */
            /* Showing alert when inactive record is try to edit in the list page */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            /*  Calling api method for the dropdown list in the html page for the fields 
             Company, LocationName, Region */
            /* COMPANY NAME */
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            });

            /* LOCATION NAME */
            $scope.LocationFilterList = [];
            $scope.LocationNameList = [];
            $http.get('/api/Common/GetLocationList_FromEmployee/').success(function (data) {
                // all loation records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.LocationFilterList = data;
                // only active location
                $scope.LocationNameList = $ff(data, { IsActive: 1 });
            });

            /* REGION NAME */
            $scope.RegionList = [];
            $http.get(baseUrl + 'api/Common/GetRegionList/').success(function (data) {
                // all region records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.RegionFilterList = data;
                // only active region
                $scope.RegionList = $ff(data, { Active: 1 });
            });
            // Declaration and initialization of Scope Variables.
          //  $scope.CompanyName = "0";
            $scope.Company_Name = "0";
           // $scope.LocationName = "";
            $scope.Location_Name = "0";
          //  $scope.Region = "";
            $scope.Region_Name = "0";

            $scope.Region = "0";
            $scope.LocationName = "0";
            $scope.CompanyName = "0";

            //$scope.Region = "";
            //$scope.LocationName = "";
            //$scope.CompanyName = "";

            /* Open the create pop up window */
            $scope.AddWorkDaysPopUP = function (WD) {
                $scope.CancelPopup();
                $scope.Id = WD;
                angular.element('#WDModal').modal('show');
            }

            /* Open the view pop up window and show the details for the 
            organization work day matching the specified organization work day Id */
            $scope.ViewWorkDaysPopUP = function (WD) {
                $scope.Id = WD;
                $scope.ViewWorkDaysDetails();
                angular.element('#WDViewModal').modal('show');
            }

            /* Open the edit pop up window and show the details for the 
              organization work day matching the specified organization work day Id */
            $scope.EditWorkDaysPopUP = function (WD) {
                $scope.Id = WD;
                $scope.ViewWorkDaysDetails();
                angular.element('#WDModal').modal('show');
            }

            /* List page pop up function */
            $scope.ListWorkDaysPopUP = function (WD) {
                $scope.Id = WD;
                $scope.WorkDaysList();
            }

            //Delete popup function// 
            $scope.DeleteWorkDays = function (WD) {
                $scope.Id = WD;
                $scope.DeleteWorkDaysDetails();
            };

            /* View the inserted values */
            $scope.ViewWorkDaysDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/OrganizationWorkDays/OrganizationWorkDay_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.PubId = data.Id;
                    $scope.CompanyName = data.CompanyId.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Region = data.RegionId.toString();
                    $scope.ViewRegion = data.Region;
                    $scope.LocationName = data.LocationId.toString();
                    $scope.ViewLocationName = data.LocationName;
                    $scope.WorkDate = $filter('date')(data.WorkDate, "dd-MMM-yyyy");
                    $scope.Reason = data.Reason;

                    $scope.CompanyInactiveFlag = 0;
                    $scope.LocationInactiveFlag = 0;
                    $scope.RegionInactiveFlag = 0;

                    if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                        $scope.CompanyInactiveFlag = 1;
                    }
                    if (($ff($scope.LocationFilterList, { Id: $scope.LocationName, LocationName: $scope.ViewLocationName, Active: 0 }).length) == 1) {
                        $scope.LocationInactiveFlag = 1;
                    }
                    if (($ff($scope.RegionFilterList, { Id: $scope.Region, Region: $scope.ViewRegion, Active: 0 }).length) == 1) {
                        $scope.RegionInactiveFlag = 1;
                    }
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Public Holiday details!" + data;
                });
            };


            /* Inactivate the active records in list page */
            $scope.DeleteWorkDaysDetails = function () {
                var del = confirm("Do you like to inactivate the selected organization work day?");
                if (del == true) {
                    $http.get(baseUrl + 'api/OrganizationWorkDays/OrganizationWorkDays_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected organization work day has been inactivated successfully");
                        $scope.WorkDaysListGo();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Public Holidays Detail" + data;
                    });
                };
            };

            /*Activate the inactivated records in the list page */
            $scope.ReInsertOrganizationWorkdayDetails = function () {
                var Ins = confirm("Do you like to activate the selected organization work day?");
                if (Ins == true) {
                    $http.get(baseUrl + 'api/OrganizationWorkDays/OrganizationWorkDays_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected organization work day has been activated successfully");
                        $scope.ListWorkDaysPopUP($scope.Id = 0);
                    }).error(function (data) {
                        $scope.error = "An error has occurred while ReInserting Organization Workday Detail" + data;
                    });
                };
            }

            //Activate record pop up function// 
            $scope.ReInsertOrganizationWorkday = function (OWD) {
                $scope.Id = OWD;
                $scope.ReInsertOrganizationWorkdayDetails();
            };
            /* Clear the create page scope variable values. */
            $scope.ClearWorkDaysPopup = function () {
                $scope.CompanyId = "0";
                $scope.CompanyName = "0";
                $scope.RegionId = "0";
                $scope.Region = "0";
                $scope.LocationId = "0";
                $scope.LocationName = "0";
                $scope.WorkDate = "";
                $scope.Reason = "";
                //  $scope.Clearlist();
                $scope.CompanyInactiveFlag = 0;
                $scope.LocationInactiveFlag = 0;
                $scope.RegionInactiveFlag = 0;
            };

            $scope.PubId = 0;
            $scope.WorkDaysAddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    if ($scope.CompanyName != "") {
                        $http.get(baseUrl + '/api/OrganizationWorkDays/OrganizationWorkday_DuplicateCheck/?Id=' + $scope.PubId + '&CompanyName=' + $scope.CompanyName + '&Region=' + $scope.Region + '&Location=' + $scope.LocationName + '&WorkDate=' + $scope.WorkDate).success(function (data) {

                            if (data.returnval == 1) {
                                alert("This Organization workday already exists, cannot duplicate");
                                return false;
                            }
                            else if (data.returnval == 3) {

                                alert("This date is already declared as Organization Holiday");
                                return false;
                            }
                            else {  
                                $scope.WorkDaysInsertAddEdit();
                            }
                            //return true;
                            //$scope.InsertLeavePolicy_AddEdit();
                        });
                        return true;
                    }
                };
            };
               

            /*THIS IS FOR ADD EDIT FUNCITON */
            $scope.loading = false;
            $scope.WorkDaysInsertAddEdit = function () {
                //$scope.Region = "";
                //$scope.LocationName = "";
                //$scope.CompanyName = "";

                var obj = {
                    Id: $scope.Id,
                    CompanyId: $scope.CompanyName == ""? null : $scope.CompanyName,
                    RegionId: $scope.Region == ""? null : $scope.Region,
                    LocationId: $scope.LocationName == ""? null : $scope.LocationName,
                    WorkDate: $scope.WorkDate == "" ? null : $scope.WorkDate,
                    Reason: $scope.Reason
                };
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 2000); // 3 seconds
          
           
                $http.get(baseUrl + '/api/OrganizationWorkDays/OrganizationWorkDay_AddEdit/?Id=' + $scope.PubId + '&CompanyId=' + $scope.CompanyName + '&RegionId=' + $scope.Region + '&LocationId=' + $scope.LocationName + '&WorkDate=' + $scope.WorkDate + '&Reason=' + $scope.Reason).success(function (data) {
                    /*$scope.CompanyId = data.CompanyId;
                    // $scope.WorkDate = $filter('date')(data.WorkDate, "dd-MMM-yyyy");
                    $scope.Id = data.Id;
                    var val = data.val;
                    */
              
                    var val = data;
                    if (val > 0) {
                        $scope.AddId = val;
                        $scope.ListWorkDaysPopUP($scope.AddId);
                        angular.element('#WDModal').modal('hide');
                        $scope.ClearWorkDaysPopup();
                    }
                        /*else if (val == 2) {
                            alert("Please enter a valid Organization details");
                        }*/
                    else if (val == -1) {
                        alert("This date is already a working day!");
                    }

                    //if (val == -1)
                    //{
                    //    alert("This date is already a working day!");
                    //}
                    //else {
                    //    $scope.AddId = val;
                    //    $scope.ListWorkDaysPopUP($scope.AddId);
                    //    angular.element('#WDModal').modal('hide');
                    //    $scope.ClearWorkDaysPopup();
                    //}

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
          
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Work Days details!" + data.ExceptionMessage;
                });
            
            };

          //  $scope.CompanyId = "0";
          //  $scope.CompanyName = "0";
          ////  $scope.RegionId = "0";
          //  $scope.Region = "0";
          //  $scope.Region_Name = "0";
          //  $scope.LocationId = "0";
          //  //  $scope.LocationName = "0";
          //  $scope.Location_Name = "0";
            $scope.WorkDate = "";
            $scope.Reason = "";
            $scope.PeriodFrom = "0";
            $scope.PeriodTo = "0";

            /*
           Calling the api method to list the organization work day details matching the specified filters comapany name,region,location
           showing the result in table.
           */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.loading = false;
            $scope.WorkDaysList = function () {
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 2000); // 3 seconds
                $http.get(baseUrl + 'api/OrganizationWorkDays/OrganizationWorkDayList/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&RegionId=' + $scope.Region_Name + '&LocationId=' + $scope.Location_Name + '&PeriodFrom=' + $scope.PeriodFrom + '&PeriodTo=' + $scope.PeriodTo).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };

            /* on click Go calling the list function.*/
            $scope.WorkDaysListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.ListWorkDaysPopUP(ListId);
            };
            $scope.ViewRedirect = function () {
                $location.path("/OrganizationWorkDaysEdit/" + $scope.Id);
            };

            $scope.ListRedirect = function () {
                $location.path("/OrganizationWorkDaysList/" + $scope.Id);
            };

            /* Close the pop up window for the edit pop up on click cancel button */
            $scope.CancelPopup = function () {
                angular.element('#WDModal').modal('hide');
                $scope.ClearWorkDaysPopup();
            }

            /* Close the pop up window for the view pop up on click cancel button */
            $scope.CancelViewPopup = function () {
                angular.element('#WDViewModal').modal('hide');
                $scope.ClearWorkDaysPopup();

            }
        }
    ]);

    //This is for Public Holiday Controller functions//
    EmpControllers.controller("PublicHolidayController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

            $scope.Id = "0";
            // List Page Pagination.
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.listdata = [];
            $scope.rowCollection = [];
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }


            /*THIS IS FOR VALIDATION FUNCTION */
            /* Validating the create page mandatory fields
              checking mandatory for the follwing fields
              company name,Region name,LocationName,work date,reason
              and showing alert message when it is null.
              */
            $scope.Validationcontrols = function () {
                //if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                //    alert("Please select Company");
                //    return false;
                //}
                //else if (typeof ($scope.Region) == "undefined" || $scope.Region == 0) {
                //    alert("Please select Region");
                //    return false;
                //}
                //else if (typeof ($scope.LocationName) == "undefined" || $scope.LocationName == 0) {
                //    alert("Please select Location");
                //    return false;
                //}
                if (typeof ($scope.HolidayDate) == "undefined" || $scope.HolidayDate == "") {
                    alert("Please select Holiday Date");
                    return false;
                }
                else if (typeof ($scope.HolidayName) == "undefined" || $scope.HolidayName == "") {
                    alert("Please enter Holiday Name");
                    return false;
                }
                else if (isDate($scope.HolidayDate) == false) {
                    alert("Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            };


            /* Validating the create page mandatory fields
      checking mandatory for the follwing fields
      CategoryName,CommunicationDate,EmailSubject
      and showing alert message when it is null.
      */
            $scope.ListValidation = function () {
                if (isDate($scope.Period_From) == false) {
                    alert("Period From is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Period_To) == false) {
                    alert("Period To is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (($scope.Period_From != "") && ($scope.Period_To != "")) {                   
                    if ((ParseDate($scope.Period_From) > ParseDate($scope.Period_To))) {
                        alert("From Date should not be greater than To Date");
                        return false;
                    }
                }
                return true;
            };

            /* THIS IS FOR VALIDATION FUNCTION */
            /* Showing alert when inactive record is try to edit in the list page */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }
            $scope.CompanyFilterList = [];
            $scope.CompanyNameList = [];

            $scope.LocationFilterList = [];
            $scope.LocationNameList = [];

            $scope.RegionList = [];
            $scope.RegionFilterList = [];
            /*  Calling api method for the dropdown list in the html page for the fields 
             Company, LocationName, Region, Department, Designation
             */
            /* COMPANY NAME */
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            });

            /* LOCATION NAME */
            $http.get('/api/Common/GetLocationList_FromEmployee/').success(function (data) {
                // all Location records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.LocationFilterList = data;
                // only active Location
                $scope.LocationNameList = $ff(data, { IsActive: 1 });
            });

            /* REGION NAME */
            $http.get(baseUrl + 'api/Common/GetRegionList/').success(function (data) {

                // all region records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.RegionFilterList = data;
                // only active region
                $scope.RegionList = $ff(data, { Active: 1 });
            });


            // Declaration and initialization of Scope Variables.
            $scope.CompanyName = "0";
            $scope.Company_Name = "0";
            $scope.LocationName = "0";
            $scope.Location_Name = "0";
            $scope.Region = "0";
            $scope.Region_Name = "0";


            $scope.CompanyId = "0";
            $scope.RegionId = "0";
            $scope.LocationId = "0";
            $scope.HolidayName = "";
            $scope.HolidayDate = "";
            $scope.Remarks = "";
            $scope.CompanyName = "";
            $scope.Region = "";
            $scope.LocationName = "";

            /* Open the create pop up window */
            $scope.AddPublicHolidayPopUP = function (LPH) {
                $scope.CancelPopup();
                $scope.Id = LPH;
                angular.element('#PHModal').modal('show');
            }

            /* Open the view pop up window and show the details for the 
               organization holiday matching the specified organization holiday Id */
            $scope.ViewPublicHolidayPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.ViewPublicHolidayDetails();
                angular.element('#PHViewModal').modal('show');
            }
            /* Open the edit pop up window and show the details for the 
              organization holiday matching the specified organization holiday Id */
            $scope.EditPublicHolidayPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.ViewPublicHolidayDetails();
                angular.element('#PHModal').modal('show');
            }
            /* List page pop up function */
            $scope.ListPublicHolidayPopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.PublicHolidayList();
            }

            //Delete popup function// 
            $scope.DeletePublicHoliday = function (LPH) {
                $scope.Id = LPH;
                $scope.DeletePublicHolidayDetails();
            };


            /* View the inserted values */
            $scope.ViewPublicHolidayDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;

                }
                $http.get(baseUrl + 'api/PublicHolidays/PublicHolidays_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.CompanyName = data.CompanyId.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Region = data.RegionId.toString();
                    $scope.ViewRegion = data.Region;
                    $scope.LocationName = data.LocationId.toString();
                    $scope.ViewLocationName = data.LocationName;
                    $scope.HolidayName = data.HolidayName;
                    $scope.HolidayDate = $filter('date')(data.HolidayDate, "dd-MMM-yyyy");
                    $scope.Remarks = data.Remarks;


                    $scope.CompanyInactiveFlag = 0;
                    $scope.LocationInactiveFlag = 0;
                    $scope.RegionInactiveFlag = 0;

                    if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                        $scope.CompanyInactiveFlag = 1;
                    }
                    if (($ff($scope.LocationFilterList, { Id: $scope.LocationName, LocationName: $scope.ViewLocationName, Active: 0 }).length) == 1) {
                        $scope.LocationInactiveFlag = 1;
                    }
                    if (($ff($scope.RegionFilterList, { Id: $scope.Region, Region: $scope.ViewRegion, Active: 0 }).length) == 1) {
                        $scope.RegionInactiveFlag = 1;
                    }

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Public Holiday details!" + data;
                });
            };


            /* Inactivate the active records in list page */
            $scope.DeletePublicHolidayDetails = function () {
                var del = confirm("Do you like to inactivate the selected organization holiday?");
                if (del == true) {
                    $http.get(baseUrl + 'api/PublicHolidays/PublicHolidays_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected organization holiday has been inactivated successfully");
                        $scope.PublicHolidayListGo();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Public Holidays Detail" + data;
                    });
                };
            };


            /*Activate the inactivated records in the list page */
            $scope.ReInsertOrganizationHolidayDetails = function () {
                var Ins = confirm("Do you like to activate the selected organization holiday?");
                if (Ins == true) {
                    $http.get(baseUrl + 'api/PublicHolidays/PublicHolidays_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected organization holiday has been activated successfully");
                        $scope.ListPublicHolidayPopUP($scope.Id = 0);
                        // $scope.CompanyBranchMaster_ListSearch();
                        //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while ReInserting Organization Holiday Detail" + data;
                    });
                };
            }

            //Activate record pop up function// 
            $scope.ReInsertOrganizationHoliday = function (OHD) {
                $scope.Id = OHD;
                $scope.ReInsertOrganizationHolidayDetails();
            };

            /* Clear the create page scope variable values. */
            $scope.ClearPublicHolidayPopup = function () {
                $scope.CompanyId = "0";
                $scope.CompanyName = "0";
                $scope.RegionId = "0";
                $scope.Region = "0";
                $scope.LocationId = "0";
                $scope.LocationName = "0";
                $scope.HolidayName = "";
                $scope.HolidayDate = "";
                $scope.Remarks = "";
                //$scope.Clearlist();
                $scope.CompanyInactiveFlag = 0;
                $scope.LocationInactiveFlag = 0;
                $scope.RegionInactiveFlag = 0;
            };

     

            $scope.DuplicateId = 0;
         
            $scope.PublicHolidayAddEdit = function () {
                //$scope.CompanyName = "";
                //$scope.Region = "";
                //$scope.LocationName="";

                // $http.get(baseUrl + '/api/PublicHolidays/OrganizationHoliday_DuplCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName + '&Region=' + $scope.Region + '&Location=' + $scope.LocationName + '&Holidaydate=' + $scope.HolidayDate).success(function (data) {
                if ($scope.Validationcontrols() == true) {
                //   $http.get(baseUrl + '/api/PublicHolidays/OrganizationHoliday_DuplCheck/?Id=0' + '&CompanyName=1' + '&Region=2' + '&Location=11' + '&Holidaydate=5-apr-2018').success(function (data) {
                $http.get(baseUrl + 'api/PublicHolidays/OrganizationHoliday_DuplCheck/?Id=' + $scope.DuplicateId + '&CompanyName=' + $scope.CompanyName + '&Region=' + $scope.Region + '&Location=' + $scope.LocationName + '&Holidaydate=' + $scope.HolidayDate).success(function (data) {
                            
                    var returnvalue = data.returnval;
                    if (returnvalue == 1) {

                        alert("This Organization Holiday already exists, cannot duplicate");
                        return false;
                    }
                    else if (returnvalue == 3) {

                        alert("This date is already declared as Organization working day");
                        return false;
                    }
                    else {
                        $scope.PublicHolidayAddEditInsert();
                    }
                    return true;
                });
                }
            }

            /*THIS IS FOR ADD EDIT FUNCITON */
            $scope.loading = false;
            $scope.PublicHolidayAddEditInsert = function () {     


                    var obj = {
                        Id: $scope.Id,
                        CompanyId: $scope.CompanyName== 0 ?null:$scope.CompanyName,
                        RegionId: $scope.Region == 0 ? null : $scope.Region,
                        LocationId: $scope.LocationName == 0 ? null : $scope.LocationName,
                        HolidayName: $scope.HolidayName,
                        HolidayDate: $scope.HolidayDate,
                        Remarks: $scope.Remarks
                    };
             
                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 seconds
                    $http.post(baseUrl + '/api/PublicHolidays/PublicHolidays_AddEdit/', obj).success(function (data) {
                        $scope.AddId = data;
                        $scope.ListPublicHolidayPopUP($scope.AddId);
                        angular.element('#PHModal').modal('hide');
                        $scope.ClearPublicHolidayPopup();

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Company update details!" + data.ExceptionMessage;

                        //}).error(function (response) {
                        //    $scope.Image = "";
                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding tableno!" + data.ExceptionMessage;
                    });
          

            };
          //  $scope.RegionName = 0;

            /*
          Calling the api method to list the organization holiday details matching the specified filters comapany name,region,location
          showing the result in table.
          */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.loading = false;
            $scope.PublicHolidayList = function () {
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 seconds
                $http.get(baseUrl + 'api/PublicHolidays/PublicHolidaysList/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&RegionId=' + $scope.Region_Name + '&LocationId=' + $scope.Location_Name + '&Period_From=' + $scope.Period_From + '&Period_To=' + $scope.Period_To).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });
            };


            /* on click Go calling the list function.*/
            $scope.PublicHolidayListGo = function () {
                if ($scope.ListValidation() == true) {
                    $scope.Id = 0;
                    var ListId = $scope.Id;
                    $scope.ListPublicHolidayPopUP(ListId);
                }
            };

            $scope.ViewRedirect = function () {
                $location.path("/OrganizationWorkDaysEdit/" + $scope.Id);
            };

            $scope.ListRedirect = function () {
                $location.path("/OrganizationWorkDaysList/" + $scope.Id);
            };

            /* Close the pop up window for the view pop up on click cancel button */
            $scope.CancelView = function () {
                angular.element('#PHViewModal').modal('hide');
                $scope.ClearPublicHolidayPopup();

            }
            /* Close the pop up window for the edit pop up on click cancel button */
            $scope.CancelPopup = function () {
                angular.element('#PHModal').modal('hide');
                $scope.ClearPublicHolidayPopup();

            }
        }
    ]);

    //This is for Attendance Cutoff Configuration Controller functions//
    EmpControllers.controller("AttendanceCutoffConfigurationController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $rootScope, $timeout) {

            $scope.Id = 0;
            /*THIS IS FOR VALIDATION FUNCTION */
            /* Validating the create page mandatory fields
               checking mandatory for the follwing fields
               Late Joining Allow Time,Late Joining Allow Days,Early Leave Allow Time,Early Leave Allow Days
               and showing alert message when it is null.
               */
            $scope.Validationcontrols = function () {
                if ((typeof ($scope.LateJoiningAllowTime) == "undefined" || $scope.LateJoiningAllowTime == "") && (typeof ($scope.LateJoiningAllowDays) == "undefined" || $scope.LateJoiningAllowDays == "") && (typeof ($scope.EarlyLeaveAllowTime) == "undefined" || $scope.EarlyLeaveAllowTime == "") && (typeof ($scope.EarlyLeaveAllowDays) == "undefined" || $scope.EarlyLeaveAllowDays == "")) {
                    alert("Please enter aleast one field");
                    return false;
                }
                else if (parseInt($scope.LateJoiningAllowDays) > 31) {
                    alert("Please enter Late Joining allowed days less than 31 days");
                    return false;
                }
                else if (parseInt($scope.EarlyLeaveAllowDays) > 31) {
                    alert("Please enter Early Leaving allowed days less than 31 days");
                    return false;
                }
                return true;
            };
            /* Clear the create page scope variable values. */
            $scope.ClearFields = function () {
                $scope.LateJoiningAllowTime = "";
                $scope.LateJoiningAllowDays = "";
                $scope.EarlyLeaveAllowTime = "";
                $scope.EarlyLeaveAllowDays = "";
            }

            /* View the inserted values */
            $scope.AttendanceConfiguration_ViewEdit = function () {
                $http.get(baseUrl + 'api/AttendanceCutoffConfiguration/ViewEditAttendanceConfiguration/?Id=' + $scope.Id).success(function (data) {
                    $scope.Id = data.Id;
                    $scope.LateJoiningAllowTime = data.LateJoiningAllowTime;
                    $scope.LateJoiningAllowDays = data.LateJoiningAllowDays;
                    $scope.EarlyLeaveAllowTime = data.EarlyLeaveAllowTime;
                    $scope.EarlyLeaveAllowDays = data.EarlyLeaveAllowDays;
                }).error(function (data) {
                    $scope.error = "An error has occcurred while editing Attendance Configuration Details!" + data;
                });

            };

            /* THIS IS THE FUNCTION FOR ADD/EDIT */
            $scope.loading = false;
            $scope.AttendanceConfiguration_AddEdit = function () {
                if ($scope.Validationcontrols() == true) {
                    var obj = {
                        Id: $scope.Id,
                        LateJoiningAllowTime: $scope.LateJoiningAllowTime == "" ? null : $scope.LateJoiningAllowTime,
                        LateJoiningAllowDays: $scope.LateJoiningAllowDays == "" ? null : $scope.LateJoiningAllowDays,
                        EarlyLeaveAllowTime: $scope.EarlyLeaveAllowTime == "" ? null : $scope.EarlyLeaveAllowTime,
                        EarlyLeaveAllowDays: $scope.EarlyLeaveAllowDays == "" ? null : $scope.EarlyLeaveAllowDays
                    };
                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 5 seconds
                    $http.post(baseUrl + '/api/AttendanceCutoffConfiguration/AttendanceConfiguration_AddEdit/', obj).success(function (data) {
                        alert("Saved Successfully");
                        $location.path("/EditAttendanceConfiguration/" + data);
                        $scope.loading = false;
                        $rootScope.$broadcast('hide');
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Attendance Configuration Details!" + data.ExceptionMessage;
                    });
                }
            };
            // Redirect to create
            $scope.ListRedirect = function () {
                $location.path("/CreateAttendanceConfiguration");
            }
        }
    ]);

    //This is for Employee Attendance Controller functions//
    EmpControllers.controller("EmployeeAttendanceController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

            $scope.listPage = $routeParams.view;

            $scope.Mode = $routeParams.Mode;

            $scope.EmployeeIdList = "";
            //$scope.IsActive = "1";
            $scope.IsActive = "1";
            $scope.Company_Name = "0";
            $scope.Id = "0";

            // List Page Pagination.
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }
            $scope.rowCollection = [];
            $scope.rowCollections = [];
            $scope.listdata = [];

            var columns1;
            var columns = columns1;
            //$scope.testevent = function (txtDate) {
            //    //$scope.EmployeeIdList = $('#selectedId').val();
            //    console.log(isDate($scope.Attendance_Date));
            //   (isDate($scope.Attendance_Date));

            //    //if(isDate ==true)
            //    //{
            //    //    (isDate($scope.Attendance_Date));
            //    //}
            //    //else {
            //    //    alert("invalid");
            //    //}
            //};


            /*THIS IS FOR VALIDATION FUNCTION */
            /* Validating the create page mandatory fields
              checking mandatory for the follwing fields
              employee name,Total Hours,Start Time,End Time,Attendance Date
              and showing alert message when it is null.
              */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.FullName) == "undefined" || $scope.Employee_Selected == undefined && $scope.listPage == 1) {
                    alert("Please select Employee Name");
                    return false;
                }
                else if ($scope.TotalHourse == "" || ((($scope.StartTime != "" || $scope.EndTime != "") && (typeof ($scope.EndTime) == "undefined" || $scope.EndTime == "" || typeof ($scope.StartTime) == "undefined" || $scope.StartTime == "")))) {
                    alert("Please enter StartTime and EndTime or Working Hours");
                    return false;
                }
                else if ((typeof ($scope.StartTime) == "undefined" && typeof ($scope.EndTime) == "undefined") && (typeof ($scope.TotalHourse) == "undefined" || $scope.TotalHourse == "")) {
                    alert("Please enter Working Hours");
                    return false;
                }
                else if ($scope.TotalHourse > 24) {
                    alert("Please enter valid Working Hours");
                    return TotalHourse;
                }
                else if (typeof ($scope.Attendance_Date) == "undefined" || $scope.Attendance_Date == 0) {
                    alert("Please select Attendance Date");
                    return false;
                }
                else if (isDate($scope.Attendance_Date) == false) {
                    alert("Attendance Date is in Invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                if (($scope.TotalHourse + "").split(".").length > 1) {
                    if (($scope.TotalHourse + "").split(".")[1] > 59) {
                        alert("Please enter valid Working Hours");
                        return false;
                    }
                }

                if ($scope.TotalHourse.split(".")) {
                    if (($scope.TotalHourse + "").split(".")[1] == "") {
                        alert("Please enter valid Working Hours");
                        return false;
                    }
                }
                //if($scope.listPage == 1){

                //    alert("Please select Employee Name");
                //    return false;
                //}
                return true;
            };

            /*THIS IS FOR VALIDATION FUNCTION */
            /* Validating the list page.
              check these field Attendance Date is invalid
              and showing alert message when it is null.
              */
            $scope.ListValidation = function () {
                var retFlag = true;
                if (isDate($scope.FromAttendance_Date) == false) {
                    alert("From Date is in Invalid format, please enter dd-mm-yyyy");
                    return FromAttendance_Date;
                }
                else if (isDate($scope.ToAttendance_Date) == false) {
                    alert("To Date is in Invalid format, please enter dd-mm-yyyy");
                    return ToAttendance_Date;
                }
                else if (($scope.ToAttendance_Date != "") && ($scope.FromAttendance_Date != "")) {
                    if ((ParseDate($scope.ToAttendance_Date) < ParseDate($scope.FromAttendance_Date))) {
                        alert("From Date should not be greater than To Date");
                        retFlag = false;
                    }
                }
                return retFlag;
            };

            /* Calling api method for the dropdown list in the html page for the fields 
               Company */

            /*Company Master dropdown*/
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                // all company records list including active and inactive 
                // used for list page DD and inactive records filtering
                $scope.CompanyFilterList = data;
                // only active company
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            });



            // Declaration and initialization of Scope Variables.
            $scope.Employee_ID = 0;
            $scope.CompanyName = "0";
            $scope.EmployeeId = "";
            $scope.FullName = "";
            $scope.Employee_No = "";
            $scope.Employee_Name = "";
            $scope.TotalHourse = "";
            $scope.EndTime = '';
            $scope.StartTime = '';
            $scope.Remarks = "";

            /* Open the create pop up window */
            $scope.AddAttendancePopUP = function (LPH) {
                $scope.ClearAttendancePopup();
                $scope.Id = LPH;
                angular.element('#AttendanceModal').modal('show');
            }
            /* Open the view pop up window and show the details for the 
              employee Aattendance matching the specified employee Aattendance Id */
            $scope.ViewAttendancePopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.ViewAttendanceDetails();
                angular.element('#AttendanceViewModal').modal('show');
            }
            /* Open the edit pop up window and show the details for the 
             employee Aattendance matching the specified employee Aattendance Id */
            $scope.EditAttendancePopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.ViewAttendanceDetails();
                angular.element('#AttendanceModal').modal('show');
            }

            /* List page pop up function */
            $scope.ListAttendancePopUP = function (LPH) {
                $scope.Id = LPH;
                $scope.AttendanceList();
            }

            //Delete popup function// 
            $scope.DeleteAttendance = function (LPHId) {
                $scope.Id = LPHId;
                $scope.DeleteAttendanceDetails();
            };

            /* View the inserted values */
            $scope.ViewAttendanceDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;

                }
                $http.get(baseUrl + 'api/EmployeeAttendance/EmployeeAttendance_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    //$scope.CompanyName = data.CompanyId.toString();
                    //$scope.ViewCompanyName = data.CompanyName;
                    $scope.EmployeeId = data.EmployeeId;
                    $scope.FullName = data.FullName;
                    $scope.FullNamelist = data.FullNamelist;
                    $scope.Employee_No = data.Employee_No;
                    $scope.Remarks = data.Remarks;
                    $scope.TotalHourse = data.TotalHourse.toFixed(2);
                    $scope.Attendance_Date = $filter('date')(data.Attendance_Date, "dd-MMM-yyyy");
                    $scope.StartTime = data.StartTime == "" && data.StartTime == null ? null : $scope.Convert24to12Timeformat(data.StartTime);
                    $scope.EndTime = data.EndTime == "" && data.EndTime == null ? null : $scope.Convert24to12Timeformat(data.EndTime);
             
                    var sel = {
                        Id: data.EmployeeId,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;

                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);

                    $scope.CompanyInactiveFlag = 0;
                    // if the current viewing company is inactive
                    // set the flag value to 1

                    if (($ff($scope.CompanyFilterList, { Id: $scope.Company_Name, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                        $scope.CompanyInactiveFlag = 1;
                    }

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Attendance details!" + data;
                });
            };

            /* To show the employee code at the time of employee selection */
            $scope.AttendanceEmployeeNameList = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                        $scope.Employee_No = data.Employee_No;

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };
            /*THIS IS FOR DELETE FUNCITON */
            $scope.DeleteAttendanceDetails = function () {
                var del = confirm("Do you like to inactivate the selected employee attendance details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EmployeeAttendance/EmployeeAttendance_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee attendance details has been inactivated successfully");
                        $scope.AttendanceListGo();
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Region Holidays Detail" + data;
                    });
                };
            }

            /*THIS IS FOR EDIT FUNCITON */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            $scope.autocompleteclear = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
                //$scope.CompanyName = "0";
                $scope.Autolist = [];
            };

            /* Clear the create page scope variable values. */
            $scope.ClearAttendancePopup = function () {
                //$scope.CompanyName = "0";
                $scope.Employee_Id = "";
                $scope.Name = "0";
                $scope.Employee_Id = 0;
                $scope.Employee_Name = ""
                $scope.FullName = "0";
                $scope.Employee_No = "";
                $scope.StartTime = '';
                $scope.EndTime = '';
                $scope.TotalHourse = "";
                $scope.Attendance_Date = "";
                $scope.NameList = [];
                $scope.CompanyInactiveFlag = 0;
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.CompanyInactiveFlag = 0;
                $scope.Remarks = "";
            };

            //determine time to be AM or PM
            $scope.Convert24to12Timeformat = function (inputTime) {
                var outputTime = null;
                if (inputTime != '' && inputTime != null) {
                    inputTime = inputTime.toString(); //value to string for splitting
                    var splitTime = inputTime.split(':');
                    splitTime.splice(2, 1);
                    var ampm = (splitTime[0] >= 12 ? ' PM' : ' AM'); //determine AM or PM
                    splitTime[0] = splitTime[0] % 12;
                    splitTime[0] = (splitTime[0] == 0 ? 12 : splitTime[0]); //adjust for 0 = 12
                    outputTime = splitTime.join(':') + ampm;
                }
                return outputTime;
            };
            $scope.Convert12To24Timeformat = function (timeval) {
                var outputTime = null;
                if (timeval != '' && timeval != null) {
                    var time = timeval;
                    var hours = Number(time.match(/^(\d+)/)[1]);
                    var minutes = Number(time.match(/:(\d+)/)[1]);
                    var AMPM = time.match(/\s(.*)$/)[1];
                    if (AMPM == "PM" && hours < 12) hours = hours + 12;
                    if (AMPM == "AM" && hours == 12) hours = hours - 12;
                    var sHours = hours.toString();
                    var sMinutes = minutes.toString();
                    if (hours < 10) sHours = "0" + sHours;
                    if (minutes < 10) sMinutes = "0" + sMinutes;
                    outputTime = sHours + ":" + sMinutes;
                }
                return outputTime;
            };


            //To calculate the Working hours        

            $scope.WorkingHRS = function () {

                if ($scope.EndTime == null && $scope.StartTime == null) {
                    $scope.EndTime = '';
                    $scope.StartTime = '';
                }
                if ($scope.EndTime != '' && $scope.StartTime != '') {
                    var currentTime = new Date("01/01/2007 " + $scope.StartTime);
                    var endTime = new Date("01/01/2007 " + $scope.EndTime);
                    if (endTime < currentTime) {
                        endTime = new Date("01/02/2007 " + $scope.EndTime);
                    }
                    var hourDiff = 0;
                    {
                        hourDiff = endTime - currentTime;
                        var difference = "";// hourDiff / 60 / 60 / 1000;

                        totalSeconds = hourDiff / 1000;
                        totalMinutes = totalSeconds / 60;
                        totalHours = totalMinutes / 60;

                        seconds = Math.floor(totalSeconds) % 60;
                        minutes = Math.floor(totalMinutes) % 60;
                        hours = Math.floor(totalHours) % 60;
                        if ((isNaN(minutes)) == false) {

                            if (hours !== 0) {
                                difference += hours + '.';
                                if (minutes.toString().length == 1) {
                                    minutes = '0' + minutes;
                                }
                            }

                            difference += minutes;
                        }
                        $scope.TotalHourse = difference;

                    }

                }

                else if (($scope.EndTime == '' || $scope.StartTime == '') && ($scope.EndTime + $scope.StartTime).length >= 1) {
                    $scope.TotalHourse = '';

                }
            };

            $scope.Id = "0";
            $scope.Company_Name = "0";

            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            $scope.NameList = [];
            $scope.NamefilterList = [];
            $scope.EmployeeAttendancelist = function () {
                // $scope.autocompleteclear();
                if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                    // $scope.NameList = [];
                    // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            }


            $scope.DuplicateId = 0;
            //$scope.EmployeeAttendancelist();
            $scope.loading = false;
            /*THIS IS FOR ADD EDIT FUNCITON */
            $scope.AttendanceAddEdit = function () {
                if ($scope.Validationcontrols() == true) {

                    if ($scope.listPage == 2) {
                        $scope.Employee_Id = $window.localStorage['UserId'];
                    }
                    else {
                        $scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;
                    }

                    //   $scope.Employee_Id = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + '/api/EmployeeAttendance/EmployeeAttendance_DuplicateCheck/?Id=' + $scope.DuplicateId + '&EmployeeId=' + $scope.Employee_Id + '&Attendance_Date=' + $scope.Attendance_Date).success(function (data) {

                        if (data == 1) {

                            alert("Employee Attendance is already exists, cannot duplicate");
                            return false;
                        }
                        else {


                            var obj = {
                                Id: $scope.Id,
                                //  CompanyId: $scope.CompanyName == 0 ? null : $scope.CompanyName,
                                EmployeeId: $scope.Employee_Id,
                                Attendance_Date: $scope.Attendance_Date,
                                TotalHourse: $scope.TotalHourse,
                                Remarks: $scope.Remarks,
                                StartTime: $scope.StartTime == '' ? null : $scope.Convert12To24Timeformat($scope.StartTime),
                                EndTime: $scope.EndTime == '' ? null : $scope.Convert12To24Timeformat($scope.EndTime),

                            };
                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            }, 3000); // 5 seconds
                            $http.post(baseUrl + '/api/EmployeeAttendance/EmployeeAttendance_AddEdit/', obj).success(function (data) {

                           
                                $scope.AddId = data;
                                var AddId = data;
                                $scope.ListAttendancePopUP(AddId);
                                angular.element('#AttendanceModal').modal('hide');
                                $scope.ClearAttendancePopup();
                                $scope.loading = false;
                                $rootScope.$broadcast('hide');
                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding Attendance details!" + data.ExceptionMessage;
                                $scope.loading = false;
                                $rootScope.$broadcast('hide');
                            }).error(function (response) {
                                $scope.Image = "";
                            });

                        }
                    })
                }
            }


            $scope.Employee_ID = 0;
            $scope.CompanyName = "0";

            $scope.flag = 0;
            $scope.Company_Name = "0";
            $scope.Employee_Name = "";
            $scope.emptydata = [];
            $scope.rowCollection = [];

            /*
            Calling the api method to list the  employee Aattendance details matching the specified filters company name, attendance from date, attendance to date,
            status, employee name.
            showing the result in table.
            */
            $scope.AttendanceList = function () {

                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.FullName;
                };

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 5 seconds

                $http.get(baseUrl + 'api/EmployeeAttendance/EmployeeAttendance_List/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&FromAttendance_Date=' + $scope.FromAttendance_Date + '&ToAttendance_Date=' + $scope.ToAttendance_Date + '&ListType=' + $scope.listPage + '&IsActive=' + $scope.IsActive + '&Full_Name=' + EmpName).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');

                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                });

            };


            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                $scope.Autofilterlist = data;
                $scope.Autolist = data;
            });

            /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
            $scope.Autocompletefilter = function () {
                if ($scope.IsActive == 1) {

                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                }
                else if ($scope.IsActive == 0) {
                    $scope.Autolist = [];
                    $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                }
                else if ($scope.IsActive == -1) {
                    $scope.Autolist = [];
                    $scope.Autolist = $scope.Autofilterlist;
                }
            };

            $scope.Id = 0;
            /* on click Go calling the list function.*/
            $scope.AttendanceListGo = function () {
                $scope.Id = 0;
                $scope.Mode = 1;
                $scope.ListAttendancePopUP($scope.Id, $scope.Mode);
            };

            $scope.ViewRedirect = function () {
                $location.path("/RegionHolidayEdit/" + $scope.Id);
            };

            $scope.ListRedirect = function () {
                $location.path("/RegionHolidayList/" + $scope.Id);
            };

            /* Close the pop up window for the view pop up on click cancel button */
            $scope.CancelView = function () {
                angular.element('#AttendanceViewModal').modal('hide');
                $scope.ClearAttendancePopup();
            }
            /* Close the pop up window for the edit pop up on click cancel button */
            $scope.CancelPopup = function () {
                angular.element('#AttendanceModal').modal('hide');
                $scope.ClearAttendancePopup();
            }

            /*Activate the inactivated records in the list page */
            $scope.ActiveEmployeeAttendance = function () {
                var del = confirm("Do you like to activate the selected employee attendance details?");
                if (del == true) {
                    $http.get(baseUrl + 'api/EmployeeAttendance/EmployeeAttendance_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected employee attedance details has been activated successfully");
                        $scope.AttendanceList();

                    }).error(function (data) {
                        $scope.error = "An error has occurred while Active Employee Details" + data;
                    });
                };
            };

            //Activate record pop up function// 
            $scope.ActiveEmployee_Attendance = function (comId) {
                $scope.Id = comId;
                $scope.ActiveEmployeeAttendance();
            };
        }
        //}
    ]);

    //this is for Employee Attendance Upload controller//
    EmpControllers.controller("AttendanceUploadController", ['$scope', '$http', '$filter', '$routeParams', '$rootScope', '$timeout',
        function ($scope, $http, $filter, $routeParams, $rootScope, $timeout) {
            $scope.EmployeeDetails = [];
            $scope.Message = [];

            $scope.downloadfile = function (url, defaultFileName) {
                var self = this;
                var deferred = $q.defer();
                $http.get(url, { responseType: "blob" }).then(
                   function (data) {
                       saveAs(data.data, defaultFileName)
                       deferred.resolve(defaultFileName);
                   }, function (data) {
                       var e = /* error */
                        deferred.reject(e);
                   });
                return deferred.promise;
            };


            $scope.dataURItoBlob = function (dataURI) {
                var binary = atob(dataURI.split(',')[1]);
                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                var array = [];
                for (var i = 0; i < binary.length; i++) {
                    array.push(binary.charCodeAt(i));
                }
                return new Blob([new Uint8Array(array)], {
                    type: mimeString
                });
            }

            $scope.doclogoChange = function () {

                if ($('#Attendance')[0].files[0] != undefined) {
                    $scope.LicenseFileName = $('#Attendance')[0].files[0]['name'];
                }
            }

            $scope.MasterId = 0;
            $scope.loading = false;
            $scope.Attendance_AddEdit = function () {

                if ($scope.LicenseFileName == '' || $scope.LicenseFileName == undefined) {
                    alert("Please Upload Employee Attendance");
                }
                else {

                    var filename = "";
                    var Licensefilename = "";

                    var fd = new FormData();
                    var imgBlob;
                    var imgBlobfile;
                    var itemIndexLogo = -1;
                    var itemIndexfile = -1;

                    var fd = new FormData();

                    if ($('#Attendance')[0].files[0] != undefined) {
                        Licensefilename = $('#Attendance')[0].files[0]['name'];
                        imgBlobfile = $scope.dataURItoBlob($scope.licedoc);
                        if (itemIndexLogo == -1) {
                            itemIndexfile = 0;
                        }
                        else {
                            itemIndexfile = 1;
                        }
                    }

                    if (itemIndexfile != -1) {
                        fd.append('file1', imgBlobfile);
                    }

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 5 seconds

                    $http.post(baseUrl + 'api/AttendanceUpload/AttachExcelFile',
                     fd,

                     {
                         withCredentials: false,
                         transformRequest: angular.identity,
                         headers: {
                             'Content-Type': undefined
                         },
                         params: {
                             fd
                         },

                     }
                     )
                    .success(function (response) {
                        $scope.EmployeeDetails = response;
                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                    }).error(function (response) {
                        $scope.Document_Upload = "";

                    });
                    $("#documentfile").val('');
                };            
            };



            $scope.CancelPopup = function () {
                //   alert("ss");
                $scope.licedoc = "";
                $scope.LicenseFileName = "";
                $('#Attendance').val('');
                $scope.EmployeeDetails = [];
            };

        }]);
    
    //This is for CompanyUpdate Controller functions//
    EmpControllers.controller("CompanyUpdateController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$rootScope', '$timeout',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

            // List Page Pagination.
            $scope.Id = "0";
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }
            $scope.listdata = [];

            /*
            Validating the create page mandatory fields
            checking mandatory for the follwing fields
            CompanyName,LabelName,Heading,PeriodFrom,PeriodTo,PeriodFrom and PeriodTo,Comments
            and showing alert message when it is null.
            */
            $scope.Validationcontrols = function () {

                if (typeof ($scope.CompanyName) == "undefined" || $scope.CompanyName == 0) {
                    alert("Please select Company");
                    return false;
                }
                    //else if (typeof ($scope.Branch_Name) == "undefined" || $scope.Branch_Name == 0) {
                    //    alert("Please select Branch ");
                    //    return Branch_Name;
                    //}
                else if (typeof ($scope.LabelName) == "undefined" || $scope.LabelName == 0) {
                    alert("Please select Label/Display Header ");
                    return false;
                }
                else if (typeof ($scope.Heading) == "undefined" || $scope.Heading == "") {
                    alert("Please enter Title");
                    return false;
                }
                else if (typeof ($scope.PeriodFrom) == "undefined" || $scope.PeriodFrom == "") {
                    alert("Please select Period From");
                    return false;
                }
                else if (typeof ($scope.PeriodTo) == "undefined" || $scope.PeriodTo == "") {
                    alert("Please select Period To");
                    return false;
                }

                else if ((ParseDate($scope.PeriodFrom) > ParseDate($scope.PeriodTo))) {
                    alert("From Date should not be greater than To Date");
                    return false;
                }

                else if (typeof ($scope.Comments) == "undefined" || $scope.Comments == "") {
                    alert("Please enter Comments");
                    return false;
                }

                else if (isDate($scope.PeriodFrom) == false) {
                    alert("Period From is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.PeriodTo) == false) {
                    alert("Period To is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                return true;
            };


            /*
            Validating the create page mandatory fields
            checking mandatory for the follwing fields
            PeriodFrom,PeriodTo,PeriodFrom 
            and showing alert message when it is null.
            */
            $scope.ListValidation = function () {

                if (isDate($scope.Period_From) == false) {

                    alert("Period From is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (isDate($scope.Period_To) == false) {
                    alert("Period To is in invalid format, please enter dd-mm-yyyy");
                    return false;
                }
                else if (($scope.Period_From != "") && ($scope.Period_To != "")) {
                    if ((ParseDate($scope.Period_From) > ParseDate($scope.Period_To))) {
                        alert("From Date should not be greater than To Date");
                        return false;
                    }
                }
                return true;
            };



            //$scope.Textareacount = function () {
            //    //   $scope.Remaining = '250 characters remaining';

            //    var text_max = 500;         
            
            //    $scope.getkeys = function (event) {

            //        $scope.keyval = event.length;
            //        var text_remaining = ($scope.keyval) - text_length;
            //        $scope.Remaining = (text_remaining + ' characters remaining');
            //    }
            //    var text_length = ('' + $scope.Comments).length;
            //    var text_remaining = text_max - text_length;

            //    $scope.Remaining = (text_remaining + ' characters remaining');
            //};

            //$scope.Textareacount();



            /* 
            Calling api method for the dropdown list in the html page for the fields 
            companyname,branchname,label
            */
            $scope.CompanyFilterList = [];
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                //$scope.CompanyNameList = data;
          
                $scope.CompanyFilterList = data;
                $scope.CompanyNameList = $ff(data, { Active: 1 });
                //$scope.CompanyNameList = $ff(data, { Active: 0 });

            });

            $scope.CompanyBranchList = [];
            $scope.CompanyBranchNameList = [];
            $scope.Company_Name = "0";

            $scope.CompanyName = "0";

            // populate branch for the selected company
            $scope.Branchlist = function (CompanyId) {

                if ($scope.CompanyBranchNameList != undefined) {  // to avoid going to DB each time when Search clicked
                    $scope.CompanyBranchNameList = [];
                    $http.get(baseUrl + 'api/CompanyBranchMaster/GetBranchList/?CompanyID=' + CompanyId).success(function (data) {
                        $scope.CompanyBranchList = data;
                        $scope.CompanyBranchNameList = $ff(data, { Active: 1 });

                    });
                }
            };
            // populate all branches for the Branch dropdown in list page
            $scope.Branchlist(0);

            $http.get(baseUrl + 'api/Common/GetLabelMaster/').success(function (data) {
                $scope.LabelDetailsList = data;
                $scope.LabelDetailsNameList = $ff(data, { Active: 1 });
            });


            $scope.Active_ErrorFunction = function ()
            {
                alert("Inactive companies update cannot be edited");
            };

            // Declaration and initialization of Scope Variables.
            $scope.CompanyName = "0";
            $scope.Company_Name = "0";
            $scope.Branch_Name = "0";
            $scope.BranchName = "0";
            $scope.LabelName = "0";
            $scope.Label_Name = "0";
            $scope.IsActive = "-1";
            $scope.IsActive = "1";

            /* Open the create pop up window */
            $scope.AddCompanyUpdatePopUP = function (CUId) {
             //   $scope.Textareacount();
                $scope.Id = CUId;
                // $scope.CompanyNameList = $ff($scope.CompanyFilterList, { Active: 1 });
                angular.element('#CUModal').modal('show');
            }

            /* Open the view pop up window and show the details for the company update for the  company update Id */
            $scope.ViewCompanyUpdatePopUP = function (CUId) {
                $scope.Id = CUId;
                $scope.ViewCompanyUpdateDetails();

                // $scope.CompanyNameList = $ff($scope.CompanyFilterList, { Active: 1 });
                //   console.log($ff($scope.CompanyFilterList, { Id: $scope.CompanyName }));
                angular.element('#CUViewModal').modal('show');
            }

            /* Open the edit pop up window and show the details for the company update for the  company update Id */
            $scope.EditCompanyPopUP = function (CMId) {
            }
                $scope.EditCompanyUpdatePopUP = function (CUId) {
                    $scope.Id = CUId;
                    $scope.ViewCompanyUpdateDetails();
                    angular.element('#CUModal').modal('show');
                }
     
                /*calling list function */
                $scope.ListCompanyUpdatePopUP = function (CUId) {
                    //$scope.Id = CUId;
                    //$scope.CompanyUpdatesList();

                    //if ($routeParams.Id == 0) {
                    //    $scope.rowCollection = [];
                    //}
                    //if ($scope.Id == 0 && $scope.Mode == 1) {

                    //    $scope.CompanyUpdatesList();
                    //}
                    //else if ($scope.Id > 0 && $scope.Mode == 1) {

                    //    $scope.CompanyUpdatesList();
                    //}
                    //if (CUId > 0) {
                        $scope.Id = CUId;
                        $scope.CompanyUpdatesList($scope.Id);
                    //}
                }


                //Delete popup function// 
                $scope.DeleteCompanyUpdate = function (comId) {
                    $scope.Id = comId;
                    $scope.DeleteCompanyUpdateDetails();
                };

                /*THIS IS FOR INACTIVE RECORD FUNCITON */
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }

                //ReInsert popup function// 
                $scope.ReInsertCompanyUpdate = function (comId) {
                    $scope.Id = comId;
                    $scope.ReInsertCompanyUpdateDetails();
                };

                /*
                Calling the api method to view the details of the company update
                for the company update Id 
                and display the details in the view pop up window.
                */
                $scope.ViewCompanyUpdateDetails = function () {
                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                    }
                    $http.get(baseUrl + 'api/CompanyUpdates/CompanyUpdatesDetail_View/?Id=' + $scope.Id).success(function (data) {
                        $scope.CompanyName = data.CompanyId.toString();
                        $scope.ViewCompanyName = data.CompanyName;
                        $scope.Branch_Name = data.CompanyBranchId.toString();
                        $scope.ViewBranch_Name = data.Branch_Name;
                        $scope.LabelName = data.LabelId.toString();
                        $scope.ViewLabelName = data.LabelName;
                        $scope.Heading = data.Heading;
                        $scope.Comments = data.Comments;
                        $scope.PeriodFrom = $filter('date')(data.PeriodFrom, "dd-MMM-yyyy");
                        $scope.PeriodTo = $filter('date')(data.PeriodTo, "dd-MMM-yyyy");
                        $scope.Image = data.Image;
                        $scope.uploadme = data.Image;
                        $scope.ImageFullPath = data.ImageFullPath;
                        $scope.ImageFileName = data.ImageFileName;

                        $scope.CompanyInactiveFlag = 0;
                        $scope.BranchInactiveFlag = 0;
                        $scope.LableInactiveFlag = 0;
                        // if the current viewing company is inactive
                        // set the flag value to 1
                        if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.ViewCompanyName, Active: 0 }).length) == 1) {
                            $scope.CompanyInactiveFlag = 1;
                        }
                        if (($ff($scope.CompanyBranchList, { Id: $scope.Branch_Name, Branch_Name: $scope.ViewBranch_Name, Active: 0 }).length) == 1) {
                            $scope.BranchInactiveFlag = 1;
                        }
                        if (($ff($scope.LabelDetailsList, { Id: $scope.LabelName, LabelName: $scope.ViewLabelName, Active: 0 }).length) == 1) {
                            $scope.LableInactiveFlag = 1;
                        }

                      //  $scope.Textareacount();

                    }).error(function (data) {
                        $scope.error = "An error has occcurred while viewing CompanyNewsList details!" + data;
                    });
                };


                /* 
                Calling the api method to detele the details of the company update
                for the  company update Id,
                and redirected to the list page.
                */
                $scope.DeleteCompanyUpdateDetails = function () {
                    var del = confirm("Do you like to inactivate the selected company update details?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/CompanyUpdates/CompanyUpdatesDetail_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected company update details has been inactivated successfully");
                            $scope.ListCompanyUpdatePopUP($scope.Id = 0);
                            //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Company Updates Detail" + data;
                        });
                    };
                }

                /* 
                 Calling the api method to inactived the details of the company update
                 for the  company update Id,
                 and redirected to the list page.
                 */
                $scope.ReInsertCompanyUpdateDetails = function () {
                    var Ins = confirm("Do you like to activate the selected company update details?");
                    if (Ins == true) {
                        $http.get(baseUrl + 'api/CompanyUpdates/CompanyUpdatesDetail_ReInsert/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected company update details has been activated successfully");
                            $scope.ListCompanyUpdatePopUP($scope.Id = 0);
                            //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Company Updates Detail" + data;
                        });
                    };
                }

                /* Clear popup function */
                $scope.ClearCompanyUpdatesPopup = function () {
                    $scope.CompanyName = "0";
                    $scope.Branch_Name = "0";
                    $scope.LabelName = "0";
                    $scope.Heading = "";
                    $scope.Comments = "";
                    $scope.PeriodFrom = "";
                    $scope.PeriodTo = "";
                    $scope.Image = "";
                    $scope.uploadme = "";
                    $scope.ImageFullPath = "";
                    $scope.ImageFileName = "";
                    // $scope.Clearfunction();
                    $scope.CompanyInactiveFlag = 0;
                    $scope.BranchInactiveFlag = 0;
                    $scope.LableInactiveFlag = 0;
                   // $scope.Remaining = "";

                };

                /* Clear popup function */
                $scope.Clearbranch = function () {
                    $scope.Branch_Name = "0";
                    $scope.BranchName = "0";
                }

                $scope.loading = false;
                /*
                Call the api method for insert and Update the record for a company update
                and display the record of selected company update when Id is greater than 0
                in edit.html and provide an option for create and modify the company update and save the company update record
                */
                $scope.CompanyUpdateDetailsAddEdit = function () {
              
                    if ($scope.Validationcontrols() == true) {
                        var obj = {
                            Id: $scope.Id,
                            CompanyId: $scope.CompanyName,
                            CompanyBranchId: $scope.Branch_Name == 0 ? null : $scope.Branch_Name,
                            LabelId: $scope.LabelName,
                            Heading: $scope.Heading,
                            Comments: $scope.Comments,
                            PeriodFrom: $scope.PeriodFrom,
                            PeriodTo: $scope.PeriodTo,
                        };

                        $scope.loading = true;
                        $timeout(function () {
                            if ($scope.loading == true) {
                                $rootScope.$broadcast('show');
                            }
                        },3000); // 3 second

                        $http.post(baseUrl + '/api/CompanyUpdates/CompanyUpdatesDetail_AddEdit/', obj).success(function (data) {
                            $scope.AddId = data;
                            var AddId = data;
                            $scope.ListCompanyUpdatePopUP(AddId);
                            // $scope.CancelPopup();
                            angular.element('#CUModal').modal('hide');
                            $scope.ClearCompanyUpdatesPopup();

                            $scope.loading = false;
                            $rootScope.$broadcast('hide');

                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Company update details!" + data.ExceptionMessage;
                        }).error(function (response) {

                        });
                    }
                };


                // Declaration and initialization of Scope Variables.
                $scope.Company_Name = "0";
                //$scope.Period_To = "";
                //$scope.Period_From = "";
                $scope.BranchName = "0";
                $scope.Label_Name = "0";
                $scope.Headings = "";




                /* Set the default month first date and curent date */
                var d = new Date();
                var currMonth = d.getMonth();
                var currYear = d.getFullYear();
                var startDate = $filter('date')(new Date(currYear, currMonth, "01"), 'dd-MMM-yyyy');
                $scope.Period_From = startDate;
                $scope.Period_To = $filter('date')(new Date(), 'dd-MMM-yyyy');

                /*
               Calling the api method to list the company details for the  filters  company name,branch name,label name,heading,period from,period to,status and
               showing the result in table.
               */
               // $scope.emptydata = [];
              //  $scope.rowCollection = [];
              //  $scope.flag = 0;
                $scope.CompanyUpdatesList = function () {

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    },3000); // 3 second

                    $http.get(baseUrl + 'api/CompanyUpdates/CompanyUpdatesDetailList/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&CompanyBranchId=' + $scope.BranchName + '&LabelId=' + $scope.Label_Name + '&Heading=' + $scope.Headings + '&PeriodFrom=' + $scope.Period_From + '&PeriodTo=' + $scope.Period_To + '&IsActive=' + $scope.IsActive).success(function (data) {
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                        //if ($scope.rowCollection.length > 0) {
                        //    $scope.flag = 1;
                        //}
                        //else {
                        //    $scope.flag = 0;
                        //}

                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });

                };


                $scope.loadData = function () {
                    $scope.students = [];
                    $http.get(baseUrl + 'api/CompanyUpdates/CompanyUpdatesDetailList/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name + '&CompanyBranchId=' + $scope.BranchName + '&LabelId=' + $scope.Label_Name + '&Heading=' + $scope.Headings + '&PeriodFrom=' + $scope.Period_From + '&PeriodTo=' + $scope.Period_To + '&IsActive=' + $scope.IsActive).success(function (data) {
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;
                    });
                };


                /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
                $scope.CompanyUpdateListGo = function () {
                    if ($scope.ListValidation() == true) {
                        $scope.Id = 0;
                      //  $scope.Mode = 1;
                        $scope.ListCompanyUpdatePopUP($scope.Id);
                    }
                };

                /*THIS IS FOR REDIRECT VIEW FUNCITON */
                $scope.ViewRedirect = function () {
                    $location.path("/CompanyNewsEdit/" + $scope.Id);
                };

                /*THIS IS FOR REDIRECT LIST FUNCITON */
                $scope.ListRedirect = function () {
                    $location.path("/CompanyNewsList/" + $scope.Id);
                };
                /*
                Close the pop up window for the view pop up on click cancel button 
                */
                $scope.CancelView = function () {
                    angular.element('#CUViewModal').modal('hide');
                    $scope.ClearCompanyUpdatesPopup();
                    // $scope.CompanyUpdateListGo();
                }

                /*
                Close the pop up window for the create and edit pop up on click cancel button 
                */
                $scope.CancelPopup = function () {
                    angular.element('#CUModal').modal('hide');
                    $scope.ClearCompanyUpdatesPopup();
                    // if ($scope.Id > 0) {
                    // angular.element('#CUModal').modal('hide');
                    // $scope.ClearCompanyUpdatesPopup();
                    // $scope.CompanyUpdateListGo();
                    //  }
                }       
           
        }   

    ]);

    //This is for Employee Leave Request controller functions//
    EmpControllers.controller("LeaveApprovalController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
        function ($scope, $http, $routeParams, $location, $filter, $window) {
            $scope.StatusList = "-1";
            $scope.emptydata = [];
            $scope.flag = 0;
            $scope.rowCollection = [];
            $scope.AddId = 0;
            $scope.Id = 0;
            $scope.Id = "0";
            $scope.AddToDropdown = "2";
            $scope.AddFromDropdown = "1";

            $scope.LeaveType = "0";
            $scope.Status = "0";
            $scope.From_Date = '';
            $scope.To_Date = '';
            $scope.Full_Name = '';
            $scope.Full_Name_list="";
            $scope.ChangeStatus = "0";
            // $scope.NoOfDays =0;
            $scope.EmployeeId = $window.localStorage['UserId'];
            $scope.Period = new Date();
            $scope.LeaveRequestId = 0;
            $scope.WorkFlow_Status = [];
            $scope.Transaction = 'Leave Request';
            $scope.listPage = $routeParams.view;
            //This is function for Pagination 
            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            //This is for Leave Type list
            $http.get(baseUrl + 'api/Common/CommonTransaction/?Transaction=' + $scope.Transaction).success(function (data) {
                // console.log(data);
                $scope.TransactionId = data.Id;
                $http.get(baseUrl + 'api/Common/WorkFlowStatus/?Id=' + $scope.TransactionId).success(function (data) {
                    $scope.WorkFlow_Status = data;
                });
                // console.log($scope.TransactionId);
            });
            //This is for Leave Type list

            $http.get(baseUrl + 'api/Common/WorkFlow_ChangeStatus/?Id=' + $scope.EmployeeId).success(function (data) {
                $scope.WorkFlow_ChangeStatus = data;
               // console.log($scope.WorkFlow_ChangeStatus);
            });



            $scope.ListValidation = function () {
                if (($scope.From_Date != "") && ($scope.To_Date != "")) {
                    if ((parseInt($scope.From_Date) > parseInt($scope.To_Date))) {
                        alert("From Date should not be greater than To Date");
                        return To_Date;
                    }
                }
            };
            $scope.Validation = function () {
                if (typeof ($scope.ChangeStatus) == "undefined" || $scope.ChangeStatus == 0) {
                    alert("Please select Change Status");
                    return ChangeStatus;
                }
                angular.forEach($scope.WorkFlow_ChangeStatus, function (value, index) {
                    if (($scope.ChangeStatus == value.Id) && (value.Status == 'Canceled' || 'Rejected')) {

                        if (typeof ($scope.Remarks) == "undefined" || $scope.Remarks == "") {
                            alert("Please enter Remarks");
                            return RemarksStatus;
                        }
                    }
                });
            };


            $scope.Full_Name ="";
            //This is function for List page 

            $scope.LeaveApproval_ListSearch = function () {
           
                $http.get(baseUrl + '/api/Common/LeaveApproval_List/?Id=' + $scope.Id + '&FullName=' + $scope.Full_Name_list + '&FromDate=' + $scope.From_Date + '&ToDate=' + $scope.To_Date + '&UserId=' + $scope.EmployeeId + '&Status=' + $scope.StatusList).success(function (data) {
                    //$http.get('/api/LeaveRequest/LeaveRequest_List/?Id=' + $scope.Id).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "An error has occurred while Listing IT Declaration Lock Period Details!" + data;
                });
            };

            //This is function for List page 
            $scope.LeaveApproval_ListGo = function () {
                $scope.Id = 0;          
                $scope.LeaveApproval_ListSearch();
            };

            //This is for clear the contents in the popup
            $scope.ClearLeaveApprovalPopup = function () {
                //$scope.ChangeStatus = "0";
                $scope.ChangeToStatus = "0";
                $scope.Remarks = "";
                $scope.flagstatus = false;
            };

            //This is function for View & Edit POP UP
            $scope.AddLeaveRequestPopUP = function (CatId) {
                $scope.CancelPopup();
                $scope.Id = CatId;
                angular.element('#LeaveRequestCreateModal').modal('show');
            };
            $scope.ViewLeaveApprovalPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewLeaveRequestDetails();
                angular.element('#LeaveRequestViewModal').modal('show');
            };
            $scope.EditLeaveRequestPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewLeaveRequestDetails();
                angular.element('#LeaveRequestCreateModal').modal('show');
            };
            $scope.ListLeaveRequestPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.LeaveApproval_ListGo();
            };


            //This is function for View page 
            $scope.ViewLeaveRequestDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }
               // console.log($scope.Id);
                $http.get(baseUrl + 'api/LeaveRequest/GetLeaveRequest_ById/?Id=' + $scope.Id).success(function (data) {

                    $scope.LeaveRequestId = data.Id;
                    $scope.EmployeeRequestId = data.EmployeeId;
                    $scope.FullName = data.EmployeeId.toString();
                    $scope.ViewFullName = data.FullName;
                    $scope.LeaveType = data.LeaveTypeId.toString();
                    $scope.ViewLeaveType = data.LeaveType;
                    $scope.FromDate = $filter('date')(data.FromDate, "dd-MMM-yyyy");
                    $scope.ToDate = $filter('date')(data.ToDate, "dd-MMM-yyyy");
                    $scope.NoOfDays = data.NoOfDays;
                    $scope.Status = data.CommonStatusId.toString();
                    $scope.ViewStatus = data.Status;
                    $scope.Reason = data.Reason;
                    $scope.Comments = data.Comments;
                    $scope.AddFromDropdown = data.FromDropdown.toString();
                    $scope.ForFromDropDown(data.FromDropdown);
                    $scope.AddToDropdown = data.ToDropdown.toString();
                    $scope.ForToDropDown(data.ToDropdown);


                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Leave Request Details!" + data;
                });

            };

            //This is for dynamic dropdown
            $scope.ForFromDropDown = function (FromDropdown) {
                $scope.FromDropdown = FromDropdown;
                if ($scope.FromDropdown == 1) {
                    $scope.ViewFromDropDown = '1st Half';
                }
                else if ($scope.FromDropdown == 2) {
                    $scope.ViewFromDropDown = '2nd Half';
                }
            };

            $scope.ForToDropDown = function (ToDropdown) {
                $scope.ToDropdown = ToDropdown;
                if ($scope.ToDropdown == 1) {
                    $scope.ViewToDropDown = '1st Half';
                }
                else if ($scope.ToDropdown == 2) {
                    $scope.ViewToDropDown = '2nd Half';
                }
            };

            $scope.status = function () {
                $scope.flagstatus = true;
                return flagstatus;
            }


            $scope.UpdateStatus = function () {

                var obj = {
                    Id: $scope.AddId,
                    TransactionId: $scope.TransactionId,
                    PKId: $scope.LeaveRequestId,
                    EmployeeId: $scope.EmployeeRequestId,
                    StatusId: $scope.ChangeStatus,
                    Remarks: $scope.Remarks
                };

                $http.post(baseUrl + '/api/Common/StatusAudit_AddEdit/', obj).success(function (data) {
                    $scope.LeaveApproval_ListGo();
                    $scope.ClearLeaveApprovalPopup();
                    angular.element('#LeaveRequestViewModal').modal('hide');
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Leave Request Details!" + data.ExceptionMessage;
                });
            }
            $scope.CancelView = function () {
                angular.element('#LeaveRequestViewModal').modal('hide');
                $scope.ClearLeaveApprovalPopup();
            }

            //This is for cancel the popup
            $scope.CancelPopup = function () {
                angular.element('#LeaveRequestViewModal').modal('hide');
            }


        }
    ]);

    //This is for Requirement controller functions//
    EmpControllers.controller("JobRequirementApprovalController", ['$scope', '$http', '$filter', '$routeParams', '$location', '$window',
    function ($scope, $http, $filter, $routeParams, $location, $window) {
        $scope.Statusflag = 0;
        /* THIS IS FOR VALUE INITIALIZATION */
        $scope.MasterId = 0;
        $scope.Id = 0;
        var TransactionId = 0;
        $scope.AddQualification = [];
        $scope.AddTechnical_Skill = [];
        $scope.AddTools = [];
        $scope.QualificaitonRow = -1;
        $scope.SkillRow = -1;
        $scope.ToolsRow = -1;
        $scope.Citizenship = "0";
        $scope.Add_Citizenship = "0";
        $scope.GenderName = "0";
        $scope.Position = "0";
        $scope.IsActive = 1;
        $scope.IsActive = "-1";
        $scope.Name = "0";
        $scope.listPage = $routeParams.view;
        $scope.Gender_Name = "0";
        $scope.PositionName = "0";
        $scope.Common_Status_Id = "0";
        $scope.Status_List = "-1";
        $scope.Mode = $routeParams.Mode;
        $scope.Transaction = 'Resource Requirement';
        /* THIS IS FOR PAGINATION FUNCTION */
        $scope.listdata = [];
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }
        $scope.EmployeeId = $window.localStorage['UserId'];
        $scope.ChangeStatus = "0";

        //$http.get(baseUrl + 'api/Common/CommonTransaction/?Transaction=' + $scope.Transaction).success(function (data) {
        //    // console.log(data);
        //    $scope.TransactionId = data.Id;
        //    $http.get(baseUrl + 'api/Common/WorkFlowStatus/?Id=' + $scope.TransactionId).success(function (data) {
        //        $scope.WorkFlow_Status = data;
        //    });
        //});


        $scope.CommonList = [];
        $http.get(baseUrl + 'api/Common/WorkFlowStatus/?TransactionName=' + $scope.Transaction).success(function (data) {
            $scope.CommonList = data;
        });
        //This is for work flow initial status list
        $http.get(baseUrl + 'api/Common/WorkFlow_InitialStatus/?Transaction=' + $scope.Transaction).success(function (data) {

            $scope.WorkFlowInitialStatus = data;

        });
        $http.get(baseUrl + 'api/Common/RecruitmentWorkFlow_ChangeStatus/?Id=' + $scope.EmployeeId).success(function (data) {
            $scope.WorkFlow_ChangeStatus = data;
        });

        $scope.ListReq = function (CatId) {

            $scope.RequirementListSearch();


        };

        /* THIS IS FOR VALIDATION FUNCTION */
        $scope.Validationcontrols = function () {
            if (typeof ($scope.ChangeStatus) == "undefined" || $scope.ChangeStatus == 0) {
                alert("Please select Change Status");
                return ChangeStatus;
            }


            angular.forEach($scope.WorkFlow_ChangeStatus, function (value, index) {
                if (($scope.ChangeStatus == value.Id) && (value.Name == 'Closed')) {

                    if (typeof ($scope.RemarksStatus) == "undefined" || $scope.RemarksStatus == "") {
                        alert("Please enter Remarks");
                        return RemarksStatus;
                    }
                }
            });
        };



        /* THIS IS FOR DROPDOWN FUNCTION */
        /* COMMON STATUS */
        $http.get(baseUrl + '/api/Common/GetCommonStatusList/').success(function (data) {
            $scope.CommonList = data;
        });
        /* GENDER NAME */
        $http.get(baseUrl + '/api/RequirementMaster/GetGenderList/').success(function (data) {
            $scope.getGender = data;
        });
        /* DESIGNATION */
        $http.get(baseUrl + '/api/RequirementMaster/GetDesignationList/').success(function (data) {
            $scope.getDesignation = data;
        });
        /* CITIZENSHIP */
        $http.get(baseUrl + '/api/RequirementMaster/GetCitizenshipList/').success(function (data) {
            $scope.getCitizenship = data;
        });
        /* QUALIFICATION */
        $http.get(baseUrl + '/api/RequirementMaster/GetQualificationList/').success(function (data) {
            $scope.getQualification = data;
        });

        /* THIS IS FOR DROPDOWN FUNCTION */
        $scope.GetQualificationName = function (qualification) {
            var qualificationId = qualification;
            var qualification_Name = "";
            if (qualification > 0) {
                var qualification_Name = $.grep($scope.getQualification, function (qualification) {
                    return qualification.Id == qualificationId;
                })[0].Course_Name;
            }
            return qualification_Name;
        }
        $http.get(baseUrl + '/api/RequirementMaster/GetSkillsList/').success(function (data) {
            $scope.getSkill = data;
        });
        $scope.GetSkillName = function (skill) {
            var skillId = skill;
            var skill_Name = "";
            skill_Name = $.grep($scope.getSkill, function (skill) {
                return skill.Id == skillId;
            })[0].Technical_Skill;

            return skill_Name;
        }
        $http.get(baseUrl + '/api/RequirementMaster/GetToolsList/').success(function (data) {
            $scope.getTool = data;
        });
        $scope.GetToolName = function (tool) {
            var toolId = tool;
            var tool_Name = "";
            if (tool > 0) {
                tool_Name = $.grep($scope.getBed, function (tool) {
                    return tool.Id == toolId;
                })[0].Tools_Name;
            }
            return tool_Name;
        };

        /* THIS IS FOR LIST FUNCTION */
        $scope.emptydata = [];
        $scope.rowCollection = [];
        $scope.flag = 0;
        $scope.RequirementListSearch = function () {

            $http.get(baseUrl + '/api/Common/RequirementApprovalList/?&UserId=' + $scope.EmployeeId + '&Id=' + $scope.Id + '&Position_Id=' + $scope.PositionName + '&Gender_Id=' + $scope.Gender_Name + '&IsActive=' + $scope.IsActive + '&Status=' + $scope.Status_List).success(function (data) {
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.rowCollection = data;
                if ($scope.rowCollection.length > 0) {
                    $scope.flag = 1;
                }
                else {
                    $scope.flag = 0;
                }
            }).error(function (data) {
                $scope.error = "AN error has occured while Listing the records!" + data;
            })

        };
        $scope.statusfunction = function () {
            $scope.flagstatus = true;
            return flagstatus;
        };

        $scope.ViewReq = function (CatId) {
            $scope.Id = CatId;
            $scope.ViewRequirement();
            $location.path("/JobRequirementApprovalView/" + $scope.Id);
        };

        /* THIS IS FOR VIEW FUNCTION */
        $scope.ViewRequirement = function () {
            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id;
                $scope.MasterId = $routeParams.Id;
                $scope.DuplicateId = $routeParams.Id;

                $http.get(baseUrl + '/api/RequirementMaster/RequirementDetails_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.RequirementId = data.Id;
                    $scope.DuplicateId = data.Id;
                    $scope.Reference_No = data.Reference_No;
                    $scope.Citizenship = data.Citizenship_Id.toString();
                    $scope.ViewCitizenship = data.Citizenship;
                    $scope.Add_Citizenship = data.AddCitizenship_Id.toString();
                    $scope.ViewAdd_Citizenship = data.Add_Citizenship;
                    $scope.Year_of_Experience = data.Year_of_Experience;
                    $scope.Position = data.Position_Id.toString();;
                    $scope.ViewPosition = data.Position;
                    $scope.GenderName = data.Gender_Id.toString();
                    $scope.ViewGenderName = data.GenderName;
                    $scope.No_Of_Position = data.No_Of_Position;
                    $scope.CTC_Range_From = data.CTC_Range_From;
                    $scope.CTC_Range_Upto = data.CTC_Range_Upto;
                    $scope.Joining_Days = data.Joining_Days;
                    $scope.Job_Description = data.Job_Description;
                    $scope.Name = data.Common_Status_Id.toString();
                    $scope.ViewName = data.Name;
                    $scope.Remarks = data.Remarks;
                    $http.get(baseUrl + '/api/RequirementMaster/Qualification_View/?Id=' + $scope.Id).success(function (Qualificationdata) {
                        $scope.AddQualification = Qualificationdata;
                        $http.get(baseUrl + '/api/RequirementMaster/Requirement_Skills_View/?Id=' + $scope.Id).success(function (Technical_Skilldata) {
                            $scope.AddTechnical_Skill = Technical_Skilldata;
                            $http.get(baseUrl + '/api/RequirementMaster/Requirement_Tools_View/?Id=' + $scope.Id).success(function (Toolsdata) {
                                $scope.AddTools = Toolsdata;
                            }).error(function (Toolsdata) {
                                $scope.error = "AN error has occured while view" + Toolsdata;
                            });
                        }).error(function (Technical_Skilldata) {
                            $scope.error = "AN error has occured while view" + Technical_Skilldata;
                        });
                    }).error(function (Qualificationdata) {
                        $scope.error = "AN error has occured while view" + Qualificaitondata;
                    });
                }).error(function (data) {
                    $scope.error = "AN error has occured while view" + data;
                });
            }
        };


        /* THIS IS FOR EDIT PROCEDURE */
        $scope.ViewRedirect = function () {

            $location.path("/JobRequirementEdit/" + $scope.MasterId);
        }

        /* THIS IS FOR LIST PROCEDURE */
        $scope.ListRedirect = function () {

            $location.path("/JobRequirementApproval/2/0/0");

        }

        $scope.UpdateStatus = function () {

            var obj = {
                Id: $scope.AddId,
                TransactionId: $scope.TransactionId,
                PkId: $scope.RequirementId,
                EmployeeId: $scope.EmployeeId,
                StatusId: $scope.ChangeStatus,
                Remarks: $scope.RemarksStatus
            };

            $http.post(baseUrl + '/api/Common/StatusAudit_AddEdit/', obj).success(function (data) {
                $scope.ClearRequirementApprovalPopup();
                $location.path("/JobRequirementApproval/2/0/0");
            }).error(function (data) {
                $scope.error = "An error has occurred while adding Leave Request Details!" + data.ExceptionMessage;
            });
        }

        //This is for clear the contents in the popup
        $scope.ClearRequirementApprovalPopup = function () {
            $scope.ChangeStatus = "0";
            $scope.Remarks = "";
            $scope.flagstatus = false;
        };
    }
    ]);

    //This is for Employee controller functions//
    EmpControllers.controller("EmployeeProfileController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff) {


            // Declaration and initialization of Scope Variables.//

            // if ($routeParams.ModeType == undefined) {

            //  }

            $scope.ModeType = "2";
            //$scope.EditEmployeeProfile = function (CatId) {
            //    $scope.Id = $window.localStorage['UserId'];
            //    $scope.ViewEmployeeDetails();
            //    $location.path("/EditEmployee/" + $scope.ModeType + "/" + $scope.Id);
            //    // window.location.href = baseUrl + "/Home/Index#/EditEmployee/" + $scope.Id;
            //};


            $scope.EmployeeId = $window.localStorage['UserId'];


            /* This is for calling View/Edit page redirect Method */
            $scope.ViewRedirect = function () {
          
                if($scope.EmployeeId ==-1)
                    {
                        $scope.errorlist = "Admin profile cannot viewed";
              
                        return false;
               
                    }
                else{
                    //$location.path("/EmployeeView/" + "2/" + $scope.EmployeeId);
                        $location.path("/ViewEmployee/" + "2/" + $scope.EmployeeId);
                    //$scope.ViewEmployeeDetails();
                    }
            };

            //$scope.ViewRedirect();
            // $scope.MasterId = 0;

        }
    ]);

    //This is for Userrole controller functions//
    EmpControllers.controller("UserroleController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter','$timeout','$rootScope',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $timeout, $rootScope) {


            // List Page Pagination.
            $scope.Id = "0";
            $scope.listdata = [];
            $scope.current_pages = 1;
            $scope.page_sizes = 30;
            $scope.rembemberCurrentPages = function (p) {
                $scope.current_pages = p
            }

            // Declaration and initialization of Scope Variables.
            $scope.UserRole_Id = "0";
            $scope.UserRoleList = [];
            $scope.SystemRole_Id = [];
            $scope.EmployeeNameList = [];
            $scope.SystemRole = [];
            $scope.SystemRoles_Id = "0";
            $scope.UserRole_Name = "";
            // $scope.Id = "0";

            // Declaration and initialization of row collection Variables.
            $scope.Initial = function () {
                $scope.rowCollection = [];
                $scope.rowCollections = [];
                $scope.flag = 0;
                $scope.flags = 0;
            }

            /* Validating the create page mandatory fields
            checking mandatory for the follwing fields
            UserRoleName,SystemRole
            and showing alert message when it is null.
            */
            $scope.Validationcontrols = function () {

                if (typeof ($scope.UserRoleName) == "undefined" || $scope.UserRoleName == "") {
                    alert("Please enter User Role Name");
                    return false;
                }
                else if (typeof ($scope.SystemRole.length) == "undefined" || $scope.SystemRole.length == "0") {
                    alert("Please select System role");
                    return false;
                }
                return true;
            };



            $scope.Tabpage = $routeParams.view;
            $scope.List = $routeParams.view;


            /* THIS IS FOR ROLE MAPPING REDIRECT FUNCTION */
            $scope.ListRedirect = function () {
                if ($scope.Tabpage == 1) {
                    $location.path("/Userrolemapping/1/0/1");
                }
                else {
                    $location.path("/Userrolemapping/3/0/1");
                }

            };



            /*calling Use rname policy function */
            $scope.CallEmployeerolemapping = function () {
                $location.path("/EmployeeMapping");
            }

            /*calling Use rname policy function */
            $scope.CallApplicationrolemapping = function () {
                $location.path("/ApplicationMapping");
            }



            /* THIS IS FOR ROLE MAPPING DELETE FUNCTION */
            $scope.SysIdList = "";
            $scope.SystemDeleteItemslist = function () {
                for (i = 0; i < $scope.SystemRole.length; i++) {

                    if ($scope.SysIdList != "") {
                        $scope.SysIdList = $scope.SysIdList + ",";
                    }
                    $scope.SysIdList = $scope.SysIdList + $scope.SystemRole[i].Id.toString();
                };
            };

            /* 
          Calling the api method to detele the details of the system role 
          for the  system role Id,
          and redirected to the list page.
          */
            $scope.SystemRoleDetailsDelete = function () {
                $scope.UserRole_Id = $scope.UserroleId;
                $http.get(baseUrl + 'api/RoleMapping/Systemapplication_Delete/?UserRole_Id=' + $scope.UserRole_Id + '&Systemstring=' + $scope.SysIdList).success(function (data) {


                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Application details" + data;
                });
            };


        //    $scope.DuplicatedId =0;

            /* 
       Calling the api method to detele the details of the User role 
       for the  system role Id,
       and redirected to the list page.
       */
            $scope.AppRoleDetailsDelete = function () {

                $http.get(baseUrl + '/api/RoleMapping/RoleMapping_RolesCheck/?Id=' + $scope.Id).success(function (data) {
               
                    if (data == 2) {
                        alert("UserRole Name already assigned to employee, cannot delete");
                        return false;
                    }
                    else {

                        var del = confirm("Do you like to delete the selected user roles?");
                        if (del == true) {
                            $http.get(baseUrl + 'api/RoleMapping/RoleAccess_Delete/?Id=' + $scope.Id).success(function (data) {

                                $scope.EmployeeMappingListGo();
                           
                                alert("Selected user roles has been delete successfully");

                            }).error(function (data) {
                                $scope.error = "An error has occurred while deleting Application details" + data;
                            });
                        };
                    }
                });
            };
              
        
            /* UserRoles Delete popup list function*/
            $scope.UserRoleInactive = function (comId) {
                $scope.Id = comId;
                $scope.AppRoleDetailsDelete();
            };

            /*
            Calling the api method to view the details of the system role 
            for the system role  Id 
            and display the details in the view pop up window.
            */
            $scope.ViewSystemDetails = function (Id) {
                $scope.SystemRoles_Id = Id;

                $http.get(baseUrl + 'api/RoleMapping/GetUserrolelist/?Id=' + $scope.SystemRoles_Id).success(function (data) {

                    $scope.SystemRole = [];
                    angular.forEach(data, function (Item, Index) {
                        var locObj = { Id: Item.SystemRoles_Id }
                        $scope.SystemRole.push(locObj);
                    });

                    // console.log($scope.SystemRole);
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
                });
            };

            /*
        Calling the api method to view the details of the User Role
        for the company Id 
        and display the details in the view page.
        */
            $scope.ViewDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/RoleMapping/Application_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.DuplicateId = data.Id;
                    $scope.UserroleId = data.Id;
                    $scope.UserRoleName = data.UserRole_Name;
                    $scope.ViewSystemDetails($scope.Id);

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Employee details!" + data;
                });

            };



            /* THIS IS FOR ROLE MAPPING USER ROLE NAME FUNCTION */
            //$http.get(baseUrl + 'api/RoleMapping/ApplicationRole_List/').success(function (data) {
            //    $scope.UserRoleList = data;
            //}).error(function (data) {
            //    $scope.error = "AN error has occured while listing User Roles !" + data;
            //})


            /* 
            Calling api method for the dropdown list in the html page for the fields 
            SystemRole
            */
            $http.get(baseUrl + 'api/UserMenu/Get_SystemRole/').success(function (data) {
                $scope.SystemRoleList = data;
            }).error(function (data) {
                $scope.error = "AN error has occured while listing System Roles !" + data;
            })


            /* THIS IS FOR ROLE MAPPING CLEARE FUNCTION */
            $scope.ClearPopuprole = function () {
                $scope.flag = "";
                $scope.UserRoleName = "";
                $scope.SysIdList = "";
                $scope.SystemRole = "";
                //$scope.SystemRole_Id = [];
            }

            /* Open the create pop up window */
            $scope.AddUser = function (ESId) {
                $scope.Id = ESId;
                //$scope.ViewEmployeeSkill();
                angular.element('#MapView').modal('show');
                //$scope.ClearPopuprole();
                //$scope.EmployeeMappingList();
            }

            /* THIS IS FOR ROLE MAPPING CANCEL POPUP FUNCTION */
            $scope.CancellPopup = function () {
                $scope.flag = "";
                angular.element('#MapView').modal('hide');
                $scope.ClearPopuprole();
            }

            /* THIS IS FOR ROLE MAPPING VIEW POPUP FUNCTION */
            $scope.ViewEmployee = function (EMId) {
                $scope.Id = EMId;
                $scope.ViewDetails();
                angular.element('#MapView').modal('show');
            };

            /* THIS IS FOR ROLE MAPPING EDIT POPUP FUNCTION */
            $scope.EdiPopUP = function (EMId) {
                $scope.Id = EMId;
                $scope.ViewDetails();
                angular.element('#MapView').modal('hide');
                //window.location.href = "/Home/Index#/UserrolemappingEdit/" + $scope.Id;
            }


            /* THIS IS FOR USER ROLE MAPPING ARRAY LIST FUNCTION */
            $scope.UserRoleChange = function () {

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 second

                $http.get(baseUrl + 'api/UserMenu/Get_UserSystemRoleMapping/?UserRole_Id=' + $scope.UserRole_Id).success(function (data) {
                    $scope.SystemRole_Id = [];
                    angular.forEach(data, function (value, index) {
                        var objresult = {
                            Id: value.SystemRoles_Id
                        };

                        $scope.SystemRole_Id.push(objresult);
                    })

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "AN error has occured while listing System Roles !" + data;
                })
            }

            $scope.Id = 0;
            $scope.DuplicateId = 0;

            $scope.loading = false;
            /*
            Call the api method for insert and Update the record for a system role
            and display the record of selected system role when Id is greater than 0
            in edit.html and provide an option for create and modify the system role and save the system role record
            */
            $scope.SaveMapping = function () {
                if ($scope.Validationcontrols() == true) {

                    $scope.SystemDeleteItemslist($scope.SystemRole);
                    $scope.SystemRoleDetailsDelete($scope.SystemRoles_Id);
                    //  console.log($scope.SystemRoleDetailsDelete);
                    $http.get(baseUrl + '/api/RoleMapping/RoleMappingDuplicateCheck/?Id=' + $scope.DuplicateId + '&UserRole_Name=' + $scope.UserRoleName).success(function (data) {
                        // console.log(data);
                        if (data == 1) {
                            alert("User Role Name already exists, cannot duplicate");
                            return false;
                        }
                        else {
                            // angular.forEach($scope.SystemRole, function (value, index) {
                            var obj = {
                                Id: $scope.Id,
                                UserRole_Name: $scope.UserRoleName,
                                //SystemRoles_Id: value.Id
                            };


                            $scope.loading = true;
                            $timeout(function () {
                                if ($scope.loading == true) {
                                    $rootScope.$broadcast('show');
                                }
                            }, 3000); // 3 second

                            $http.post(baseUrl + '/api/RoleMapping/UserRoleMapping_AddEdit/', obj).success(function (data) {

                                $scope.URId = data;
                                $scope.MasterId = data;

                                angular.forEach($scope.SystemRole, function (value, index) {
                                    value.URId = $scope.URId
                                    var objchild = {
                                        Id: $scope.Id,
                                        UserRole_Id: $scope.URId,
                                        SystemRoles_Id: value.Id
                                    };

                                    $scope.loading = true;
                                    $timeout(function () {
                                        if ($scope.loading == true) {
                                            $rootScope.$broadcast('show');
                                        }
                                    }, 3000); // 3 second
                                    $http.post(baseUrl + '/api/RoleMapping/UserRoleSystemRoleMapping_AddEdit/', objchild).success(function (data) {

                                        $scope.flag = 'Role';

                                        $scope.loading = false;
                                        $rootScope.$broadcast('hide');
                                       // $location.path("/UserMapping/" + data);
                                       // $scope.ListPopUP($scope.Id);

                                    }).error(function (data) {
                                        $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                                    });
                                });
                               // $scope.ListPopUP($scope.URId);
                                $scope.EmployeeMappingListGo();
                                $scope.CancellPopup();

                            }).error(function (data) {
                                $scope.error = "An error has occurred while adding PT!" + data.ExceptionMessage;
                            });
                        }
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Fyconfiguration details!" + data.ExceptionMessage;
                    });
                };
            };


            /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
            $scope.EmployeeMappingListGo = function () {
                $scope.Id = 0;
                var ListsId = $scope.Id;
                $scope.ListPopUP(ListsId);
            };

            /*calling list function */
            $scope.ListPopUP = function (RMsId) {
                $scope.Id = RMsId;
                $scope.EmployeeMappingList();
            }
        
            $scope.EmployeeMappingList = function () {

                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 second
                $http.get(baseUrl + 'api/RoleMapping/ApplicationList/?Id=' + $scope.Id + '&UserRole_Name=' + $scope.UserRole_Name).success(function (data) {
                    $scope.emptydatas = [];
                    $scope.rowCollections = [];
                    $scope.Empemptydatas = [];
                    $scope.EmprowCollections = [];
                    $scope.rowCollections = data;
                    $scope.EmprowCollections = data;
                    //if ($scope.rowCollections.length > 0) {
                    //    $scope.flags = 1;
                    //    $scope.Empflags = 1;
                    //}
                    //else {
                    //    $scope.flags = 0;
                    //    $scope.Empflags = 0;
                    //}

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');

                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };




            /* THIS IS FOR ROLE MAPPING RESET FUNCTION */
            $scope.ResetMapping = function () {
                $scope.flag = "";
                $scope.UserRole_Name = "";
                $scope.SysIdList = "";
                $scope.UserRole_Id = "";
            };   

        }
    ]);

    //This is for Systemrole controller functions//
    EmpControllers.controller("EmployeeroleController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter','$timeout','$rootScope',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $timeout, $rootScope) {

            // List Page Pagination.
            $scope.Id = "0";
            $scope.listdata = [];
            $scope.current_pages = 1;
            $scope.page_sizes = 30;
            $scope.rembemberCurrentPages = function (p) {
                $scope.current_pages = p
            }

            // Declaration and initialization of Scope Variables.
            $scope.UserRole_Id = "0";
            $scope.UserRoleList = [];
            $scope.SystemRole_Id = [];
            $scope.EmployeeNameList = [];
            $scope.SystemRole = [];
            $scope.SystemRoles_Id = "0";
            $scope.UserRole_Name = "";
            // $scope.Id = "0";

            // Declaration and initialization of row collection Variables.
            $scope.Initial = function () {
                $scope.rowCollection = [];
                $scope.rowCollections = [];
                $scope.flag = 0;
                $scope.flags = 0;
            }


            /*
            Validating the create page mandatory fields
            checking mandatory for the follwing fields
            Employee
            and showing alert message when it is null.
            */
            $scope.ValidationcontrolsEmp = function () {
                if (typeof ($scope.EmployeeNameList.length) == "undefined" || $scope.EmployeeNameList.length == "0") {
                    alert("Please select Employee ");
                    return false;
                }
                return true;
            };


            /* 
               Calling api method for the dropdown list in the html page for the fields 
               Employee
               */
            $scope.EmployeeList = [];
            $http.get(baseUrl + 'api/RoleMapping/Employee_List/').success(function (data) {
                $scope.EmployeeList = data;
            });



            /*calling Use rname policy function */
            $scope.CallUserrolemapping = function () {
                $location.path("/Userrolemapping");
            }

            /*calling Use rname policy function */
            $scope.CallApplicationrolemapping = function () {
                $location.path("/ApplicationMapping");
            }


            /*THIS IS FOR POPUP FUNCITON */
            $scope.ClearsPopup = function () {

                $scope.UserRole_Name = "";
                $scope.EMPIdList = "";
                // $scope.EmployeeList = [];
            }

            /*THIS IS FOR CANCEL POPUP FUNCITON */
            $scope.CancelsPopup = function () {
                $scope.flag = "";
                angular.element('#EmployeeMapView').modal('hide');
          
                $scope.EmployeeMappingListGo();
                $scope.ClearsPopup();
            }

            /* Open the edit pop up window and show the details for the employee for the  employee Id */
            $scope.EditPopUP = function (RMsId) {
                $scope.Id = RMsId;
                $scope.ViewApplicationDetails();
                angular.element('#User').modal('hide');
            }

            /*calling list function */
            $scope.ListPopUP = function (RMsId) {
                $scope.Id = RMsId;
                $scope.EmployeeMappingList();
            }

            /* Open the view pop up window and show the details for the Employee for the  employee Id */
            $scope.ViewopUP = function (RMsId) {
                $scope.Id = RMsId;
                $scope.ViewApplicationDetails();
                angular.element('#EmployeeMapView').modal('show');
            };


            /*THIS IS FOR DELETE IN ARRAY LIST FUNCITON */
            $scope.EMPIdList = "";
            $scope.DeleteItemslist = function () {
                for (i = 0; i < $scope.EmployeeNameList.length; i++) {
                    if ($scope.EMPIdList != "") {
                        $scope.EMPIdList = $scope.EMPIdList + ",";
                    }
                    $scope.EMPIdList = $scope.EMPIdList + $scope.EmployeeNameList[i].Id.toString();
                };
            };


            $scope.UserRole_Name = [];

            /*
            Call the api method for insert and Update the record for a employee
            and display the record of selected employee when Id is greater than 0
            in edit.html and provide an option for create and modify the employee and save the employee record
            */
            $scope.EmployeeMappingAddEdit = function () {

                if ($scope.ValidationcontrolsEmp() == true) {

                    $scope.DeleteItemslist($scope.EmployeeNameList);
                    $scope.EmployeeListDelete($scope.ApplicationRoleId);
                    angular.forEach($scope.EmployeeNameList, function (value, index) {
                        var obj = {
                            Id: $scope.Id,
                            UserId: value.Id,
                            ApplicationRoleId: $scope.Id
                        };

                        $scope.loading = true;
                        $timeout(function () {
                            if ($scope.loading == true) {
                                $rootScope.$broadcast('show');
                            }
                        }, 3000); // 3 second
                        $http.post(baseUrl + '/api/RoleMapping/RoleMapping_AddEdit/', obj).success(function (data) {
                            $scope.flag = 'Emp';
                            // close the popup and move to List page only after updating all employee mapping list
                            if ($scope.EmployeeNameList.length - 1 == index) {
                                $scope.EmployeeMappingListGo();
                               // $location.path("/EmployeeMapping/" + data);
                                $scope.CancelsPopup();
                            }

                            $scope.loading = false;
                            $rootScope.$broadcast('hide');
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                        });
                    });
                   // $scope.ListPopUP($scope.Id);
                   // $scope.EmployeeMappingListGo();
                    $scope.CancelsPopup();
                };

            };

            /*
            Calling the api method to view the details of the employee
            for the employee Id 
            and display the details in the view pop up window.
            */
            //$scope.EmployeId = 0;
            $scope.ViewEmpDetails = function (Id) {
                $scope.ApplicationRoleId = Id;
                $http.get(baseUrl + 'api/RoleMapping/ViewApplicationRole/?Id=' + $scope.Id).success(function (data) {
                    $scope.EmployeeNameList = [];
                    angular.forEach(data, function (Item, Index) {
                        var localObj = { Id: Item.UserId }

                        $scope.EmployeeNameList.push(localObj);
                    });
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
                });
            };

            /*
            Calling the api method to view the details of the employee
            for the employee Id 
            and display the details in the view pop up window.
            */
            $scope.Id = 0;
            $scope.ViewApplicationDetails = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }
                $http.get(baseUrl + 'api/RoleMapping/Application_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.Id = data.Id;
                    $scope.UserRole_Name = data.UserRole_Name;
                    $scope.ViewEmpDetails($scope.Id);

                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Employee details!" + data;
                });
            };

            /* 
            Calling the api method to detele the details of the application 
            for the  application Id,
            and redirected to the list page.
            */
            $scope.EmployeeListDelete = function () {
                $http.get(baseUrl + 'api/RoleMapping/EmployeeDetails_Delete/?ApplicationRoleId=' + $scope.ApplicationRoleId + '&Userstring=' + $scope.EMPIdList).success(function (data) {
                    // alert("Application Details deleted Successfully");
                    // window.location.href = "/Home/Index#/rolemapping/" + $scope.Id;
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Application details" + data;
                });
            };

            $scope.UserRole_Name = "";


            /* THIS IS FOR LIST FUNCTION */
            //$scope.emptydatas = [];
            //$scope.rowCollections = [];
            //$scope.flags = 0;
            //$scope.Empemptydatas = [];
            //$scope.EmprowCollections = [];
            //$scope.Empflags = 0;

            /*
            Calling the api method to list the company details for the  filters  user name and
            showing the result in table.
            */
            $scope.EmployeeMappingList = function () {


                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 second
                $http.get(baseUrl + 'api/RoleMapping/ApplicationList/?Id=' + $scope.Id + '&UserRole_Name=' + $scope.UserRole_Name).success(function (data) {
                    $scope.emptydatas = [];
                    $scope.rowCollections = [];
                    $scope.Empemptydatas = [];
                    $scope.EmprowCollections = [];
                    $scope.rowCollections = data;
                    $scope.EmprowCollections = data;
                    //if ($scope.rowCollections.length > 0) {
                    //    $scope.flags = 1;
                    //    $scope.Empflags = 1;
                    //}
                    //else {
                    //    $scope.flags = 0;
                    //    $scope.Empflags = 0;
                    //}

                    $scope.loading = false;
                    $rootScope.$broadcast('hide');

                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };


            /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
            $scope.EmployeeMappingListGo = function () {
                $scope.Id = 0;
                var ListsId = $scope.Id;
                $scope.ListPopUP(ListsId);
            };
        }
    ]);

    //This is for Applicationrole controller functions//
    EmpControllers.controller("ApplicationroleController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter', '$timeout', '$rootScope',
        function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $timeout, $rootScope) {



                   // List Page Pagination.
            $scope.Id = "0";
            $scope.listdata = [];
            $scope.current_pages = 1;
            $scope.page_sizes = 30;
            $scope.rembemberCurrentPages = function (p) {
                $scope.current_pages = p
            }

            // Declaration and initialization of Scope Variables.
            $scope.UserRole_Id = "0";
            $scope.UserRoleList = [];
            $scope.SystemRole_Id = [];
            $scope.EmployeeNameList = [];
            $scope.SystemRole = [];
            $scope.SystemRoles_Id = "0";
            $scope.UserRole_Name = "";
            // $scope.Id = "0";

            // Declaration and initialization of row collection Variables.
            $scope.Initial = function () {
                $scope.rowCollection = [];
                $scope.rowCollections = [];
                $scope.flag = 0;
                $scope.flags = 0;
            }


            // THIS IS FOR APPLICATION MAPPING CONTROLLER FUNCTION */

            /* List Page Pagination*/
            $scope.Id = "0";
            $scope.current_page = 1;
            $scope.getUserRole = [];
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }
            $scope.listdata = [];
            $scope.UserRole_Name = [];




            /*
            Validating the create page mandatory fields
            checking mandatory for the follwing fields
            ApplicationRole
            and showing alert message when it is null.
            */
            $scope.ValidationcontrolsApp = function () {
                if (typeof ($scope.ApplicationRole.length) == "undefined" || $scope.ApplicationRole.length == "0") {
                    alert("Please select Application Role");
                    return false;
                }
                return true;
            };

            /* Validating the create page mandatory fields
               checking mandatory for the follwing fields
               Department Name,User Role
               and showing alert message when it is null.
           */
            $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {
                $scope.DepartmentNameList = data;
            });
            $scope.getUserRole = [];
            $scope.UserRoleListFn = function () {

                $http.get(baseUrl + 'api/RoleMapping/ApplicationRole_List/').success(function (data) {
                    $scope.getUserRole = data;
                });
            };
            $scope.UserRoleListFn();
            //console.log($scope.getUserRole);

            /*THIS IS FOR CLEAR FUNCITON */
            $scope.ClearPopup = function () {
                $scope.AppIdList = "";
                $scope.UserId = "0";
                $scope.UserRole_Name = [];
                // $scope.ApplicationRole = "";
            }

            /* THIS IS FOR APPLICATION MAPPING CANCEL POPUP FUNCTION */
            $scope.CancelPopup = function () {
                angular.element('#RoleMapView').modal('hide');
                $scope.ClearPopup();
            }

            /* THIS IS FOR APPLICATION MAPPING EDIT POPUP FUNCTION */
            $scope.EditRolePopUP = function (RMId) {
                $scope.Id = RMId;
                $scope.ViewEmployeeDetails();
                angular.element('#MapView').modal('hide');
                //window.location.href = "/Home/Index#/UserrolemappingEdit/" + $scope.Id;
            }

            /* THIS IS FOR APPLICATION MAPPING LIST POPUP FUNCTION */
            $scope.ListRolePopUP = function (RMId) {
                $scope.Id = RMId;
                $scope.RoleMappingList($scope.Id);
            }


            /* THIS IS FOR APPLICATION MAPPING VIEW POPUP FUNCTION */
            $scope.ViewRMPopUP = function (RMId) {
                $scope.Id = RMId;
                $scope.ViewEmployeeDetails();
                angular.element('#RoleMapView').modal('show');
            };

            /*calling Username policy function */
            $scope.CallUserrolemapping = function () {
                $location.path("/Userrolemapping");
            }

            /*calling Username policy function */
            $scope.CallEmployeerolemapping = function () {
                $location.path("/EmployeeMapping");
            }

            /* 
             Calling the api method to detele the details of the Application Role 
             for the  Application Role  Id,
             and redirected to the list page.
             */
            $scope.DeleteRoleMappingDetails = function () {
                $http.get(baseUrl + 'api/RoleMapping/RoleMapping_Delete/?Id=' + $scope.Id).success(function (data) {
                    //      alert("Role Mapping Details deleted Successfully");
                    window.location.href = "/Home/Index#/rolemapping";
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Role Mapping details" + data;
                });
            };

            /* THIS IS FOR APPLICATION MAPPING DELETE FUNCTION */
            $scope.AppIdList = "";
            $scope.GetDeleteItemslist = function () {
                for (i = 0; i < $scope.ApplicationRole.length; i++) {
                    if ($scope.AppIdList != "") {
                        $scope.AppIdList = $scope.AppIdList + ",";
                    }
                    $scope.AppIdList = $scope.AppIdList + $scope.ApplicationRole[i].Id.toString();

                };
            };
            $scope.UserRole_Name = [];

            $scope.loading = false;
            /*
           Call the api method for insert and Update the record for a Application Role
           and display the record of selected Application Role when Id is greater than 0
           in edit.html and provide an option for create and modify the Application Role and save the Application Role record
           */
            $scope.RoleMapAddEdit = function () {
                if ($scope.ValidationcontrolsApp() == true) {
                    $scope.GetDeleteItemslist($scope.ApplicationRole);
                    $scope.ApplicationRoleDetailsDelete($scope.EmployeeId);
                    angular.forEach($scope.ApplicationRole, function (value, index) {
                        var obj = {
                            Id: $scope.Id,
                            UserId: $scope.EmployeeId,
                            ApplicationRoleId: value.Id
                        };
                        // console.log(obj);

                        $scope.loading = true;
                        $timeout(function () {
                            if ($scope.loading == true) {
                                $rootScope.$broadcast('show');
                            }
                        }, 3000); // 3 second
                        $http.post(baseUrl + '/api/RoleMapping/RoleMapping_AddEdit/', obj).success(function (data) {

                            $scope.loading = false;
                            $rootScope.$broadcast('hide');
                           // $location.path("/ApplicationMapping/" + data);

                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Role Mapping details!" + data.ExceptionMessage;
                        });

                    });

                    //$scope.RoleMappingListGo();-
                    $scope.ListRolePopUP($scope.EmployeeId);
                    $scope.CancelPopup();
                };
            };


            /*
            Calling the api method to view the details of the Application Mapping
            for the Application Id 
            and display the details in the view pop up window.
            */
            $scope.ViewRoleMappingDetails = function (Id) {
                $scope.Id = Id;
                $http.get(baseUrl + 'api/RoleMapping/ViewRoleMapping/?Id=' + $scope.EmployeeId).success(function (data) {
                    $scope.ApplicationRole = [];
                    angular.forEach(data, function (Item, Index) {
                        var locObj = { Id: Item.ApplicationRoleId }
                        $scope.ApplicationRole.push(locObj);

                    });
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Role Mapping details!" + data;
                });
            };


            /*
            Calling the api method to view the details of the Application Mapping
            for the Application Id 
            and display the details in the view pop up window.
            */
            //$scope.Id = 0;     
            $scope.ViewEmployeeDetails = function () {
                // console.log('ViewEmployeeDetails');
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                }

                $http.get(baseUrl + 'api/RoleMapping/EmployeeDetails_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.EmployeeId = data.Id;
                    $scope.Employee_No = data.Employee_No;
                    $scope.FullName = data.FullName;
                    $scope.Designation_Name = data.Designation_Id.toString();
                    $scope.ViewDesignation_Name = data.Designation_Name;
                    $scope.Department_Name = data.Department_Id.toString();
                    $scope.ViewDepartment_Name = data.Department_Name;
                    $scope.ViewRoleMappingDetails($scope.Id);
                }).error(function (data) {
                    $scope.error = "An error has occcurred while viewing Employee details!" + data;
                });

            };

            /* FUNCTION IS LIST THE EMPLOYEES  */
            $scope.EmployeeMappingTabClick = function () {
                $scope.UserRoleListFn();
                //$scope.ViewEmployeeDetails();
            };

            /* THIS IS FOR APPLICATION MAPPING DELETE FUNCTION */
            $scope.ApplicationRoleDetailsDelete = function () {
                $scope.UserId = $scope.EmployeeId;
                $http.get(baseUrl + 'api/RoleMapping/ApplicationRoleDetails_Delete/?UserId=' + $scope.UserId + '&Applicationstring=' + $scope.AppIdList).success(function (data) {

                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting Application details" + data;
                });
            };

            $scope.Full_Name = '';
            $scope.EmployeeNo = '';
            $scope.Department_Name = "0";


            /*
            Calling the api method to list the company details for the  filters  Employee No,Employee Name,Department Name and
            showing the result in table.
            */
            //$scope.emptydata = [];
            //$scope.rowCollection = [];
            //$scope.flag = 0;
            $scope.RoleMappingList = function () {

                var EmpName = '';
                if ($scope.Employee_Selected != undefined) {
                    EmpName = $scope.Employee_Selected.originalObject.FullName;
                };
                $scope.loading = true;
                $timeout(function () {
                    if ($scope.loading == true) {
                        $rootScope.$broadcast('show');
                    }
                }, 3000); // 3 second
                $http.get(baseUrl + 'api/RoleMapping/EmployeeList/?Id=' + $scope.Id + '&FullName=' + EmpName + '&Department_Id=' + $scope.Department_Name).success(function (data) {
                    // $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    //if ($scope.rowCollection.length > 0) {
                    //    $scope.flag = 1;
                    //}
                    //else {
                    //    $scope.flag = 0;
                    //}
                    $scope.loading = false;
                    $rootScope.$broadcast('hide');
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };

            $scope.EmployeeDepartmentList = function()
            {
                if ($scope.Department_Name == 0) {
                    var Name = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.Name = $scope.Employee_Selected.originalObject.Id;

                        $http.get(baseUrl + '/api/Common/EmployeeSelectionDetailsList/?Id=' + $scope.Name).success(function (data) {
                            $scope.Employee_No = data.Employee_No;
                            $scope.Company_Name = data.Company_Name;
                            $scope.Location_Name = data.Location_Name;
                            $scope.Department_Name = data.Department_Name;
                            $scope.Designation_Name = data.Designation_Name;                   
                    
                            $scope.DepartmentFilterList1 = [];
                            $scope.DepartmentList1 = [];
                            $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                                // all department records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.DepartmentFilterList1 = data;
                                // only active department
                                $scope.DepartmentList1 = $ff(data, { Active: 0 });
                                //  console.log($scope.DepartmentList1);
                                angular.forEach($scope.DepartmentList1, function (value, index) {
                                    if (($scope.DepartmentList1 == value.Id)) {
                                        $scope.Department_Name = "0";                                   
                                    }
                                });
                            });                       

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    }
                    else {
                        $scope.AttendanceEmployeeNameList();
                    }         

                }
            };

      
            /* To show the employee code at the time of employee selection */
            $scope.AttendanceEmployeeNameList = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                        $scope.Employee_No = data.Employee_No;
                        $scope.Department_Name = data.Department_Id;

                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };



            /* THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION */
            $scope.NameList = [];
            $scope.NamefilterList = [];
            $scope.EmployeeAttendancelist = function () {
                // $scope.autocompleteclear();
                if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                    // $scope.NameList = [];
                    // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0'+ '&LocationId=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });

                    });
                }
            }

            $scope.ClearDepartment = function()
            {           
                $scope.Department_Name ="0";
               // $scope.Employee_No = "";                   
            }

            /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
            $scope.NameList = [];
            $scope.NamefilterList = [];
            $scope.Employeelist = function () {
                if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                    $scope.NameList = [];
                    $scope.NamefilterList = [];
                
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0'+ '&Department_Id=0'+ '&LocationId=0'+ '&Designation_Id=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });
                                         
                    });
                }
            }

            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                $scope.Autofilterlist = data;
                $scope.Autolist = data;            
            });


            /*THIS IS FOR LIST FUNCITON FOR GO BUTTON*/
            $scope.RoleMappingListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.ListRolePopUP(ListId);
            };
            $scope.ListRedirect = function (RMId) {
                window.location.href = "/Home/Index#/Userrolemapping/";
            };


        }
    ]);


    //this is for Employee Attendance Upload controller//
    EmpControllers.controller("OvertimeUploadController", ['$scope', '$http', '$filter', '$routeParams', '$rootScope', '$timeout','filterFilter',
        function ($scope, $http, $filter, $routeParams, $rootScope, $timeout, $ff) {       

        }]);


    //This is for Paystructure Employee Association controller functions//
    EmpControllers.controller("PayStructureEmployeeController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window', 'filterFilter','$rootScope', '$timeout',
            function ($scope, $http, $routeParams, $location, $filter, $window, $ff, $rootScope, $timeout) {

                //This is for Value Initialization //
                $scope.Id = "0";
                $scope.Company_Name ="0";
                $scope.Location_Name ="0";
                $scope.Department_Name ="0";
                $scope.Designation_Name ="0";
                $scope.Paystructure_Name ="0";

                //This is function for Pagination //
                $scope.current_page = 1;
                $scope.page_size = 30;
                $scope.rembemberCurrentPage = function (p) {
                    $scope.current_page = p
                }
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $scope.flag = 0;

                //$scope.DepartmentName =0;
                //$scope.DesignationName =0;
                //$scope.PeriodToMonth =0;
                //$scope.PeriodToYear =0;   

                /* DEPARTMENT NAME */
                $scope.DepartmentFilterList = [];
                $scope.DepartmentList = [];
                $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                    // all department records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.DepartmentFilterList = data;
                    // only active department
                    $scope.DepartmentList = $ff(data, { Active: 1 });
                });


                /* DESIGNATION NAME */
                $scope.DesignationFilterList = [];
                $scope.DesignationList = [];
                $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {
                    // all designation records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.DesignationFilterList = data;
                    // only active designation
                    $scope.DesignationList = $ff(data, { Active: 1 });
                });


                /* LOCATION NAME */
                $scope.LocationFilterList = [];
                $scope.LocationNameList = [];
                $http.get('/api/Common/GetLocationList_FromEmployee/').success(function (data) {
                    // all location records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.LocationFilterList = data;
                    // only active location
                    $scope.LocationNameList = $ff(data, { IsActive: 1 });
                });


            
                $scope.PaystructureFilterList = [];
                $scope.PaystructureList = [];
                $http.get(baseUrl + 'api/PaystructureEmployee/Paystructure_List/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.PaystructureFilterList = data;
                    // only active company
                    $scope.PaystructureList = $ff(data, { IsActive: 1 });
                });
         

                $scope.EmployeeFilterList = function()
                {
                    $scope.NameList =[];
                    $scope.NamefilterList =[];
                
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=0' + '&LocationId=0'+ '&Designation_Id=0').success(function (data) {
                        $scope.NameList = data;
                        $scope.NamefilterList = $ff(data, { IsActive: 1 });                    
                    });
                };


                $scope.Id =0;
                $scope.EmployeemappingList = function()
                {
                    $scope.NameMappingList =[];
                    $scope.NameMappingfilterList =[];
                
                    $http.get(baseUrl + '/api/PaystructureEmployee/PaystructureEmployeeMapping_List/?Company_Id=' + $scope.Company_Name + '&Paystructure_Id=' + $scope.Paystructure_Name ).success(function (data) {
                        $scope.NameMappingList = data;
                        $scope.NameMappingfilterList = $ff(data, { IsActive: 1 });     
                     
                    });
                };

              

                $scope.LocationName ="0";
                $scope.PayStructure ="0";
                $scope.CompanyName ="0";
                    
                /* THIS IS FOR LIST FUNCTION */
                $scope.PaystructureEmployee_List = function () {

                    var EmpNames = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpNames = $scope.Employee_Selected.originalObject.Id;
                    };
                    $http.get(baseUrl + '/api/PaystructureEmployee/PaystructureEmployee_List/?Id=0'+ '&Company_Id=' + $scope.CompanyName + '&Employee_Id=' + EmpNames 
                        + '&Paystructure_Id=' + $scope.PayStructure+ '&Location_Id=' + $scope.LocationName).success(function (data) {
                   
                            $scope.emptydata = [];
                            $scope.rowCollection = [];
                            $scope.rowCollection = data;
                            if ($scope.rowCollection.length > 0) {
                                $scope.flag = 1;
                            }
                            else {
                                $scope.flag = 0;
                            }

                        }).error(function (data) {
                            $scope.error = "AN error has occured while deleting OverTime" + data;
                        });
                };

                /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
                $scope.Paystructure_Listsearchgo = function () {                
                    $scope.Id = 0;
                    var ListId = $scope.Id;
                    $scope.Mode = 1;
                    $scope.PaystructureEmployee_List($scope.Id, $scope.Mode);
                
                    // $scope.ListOverTimePopUP(ListId);
                };



                var flag1 = 0;
                /* THIS IS FOR LIST FUNCTION */
                $scope.PayEmployee_List = function () {
                    var EmpNames = '';
                    if ($scope.Employee_Selected != undefined) {
                        EmpNames = $scope.Employee_Selected.originalObject.Id;
                    };
                    console.log($scope.Paystructure_Name);
                    $http.get(baseUrl + '/api/PaystructureEmployee/PaystructureEmployeeType_List/?Id=' + $scope.Id + '&Company_Id=' + $scope.Company_Name 
                        + '&Department_Id=' + $scope.Department_Name+ '&Designation_Id=' + $scope.Designation_Name+ '&Location_Id=' + $scope.Location_Name
                        + '&Paystructure_Id=' + $scope.Paystructure_Name + '&Employee_Id=' + EmpNames).success(function (data) {
                   
                            $scope.emptydatalist = [];
                            $scope.rowCollectionlist = [];
                            $scope.emptydatalist = data;
                            $scope.rowCollectionlist = data;
                     
                            if ($scope.rowCollectionlist.length > 0) {
                                $scope.flag1 = 1;
                            }
                            else {
                           
                                $scope.flag1 = 0;
                            }

                        }).error(function (data) {
                            $scope.error = "AN error has occured while deleting OverTime" + data;
                        });
                };

                /* THIS IS FOR LIST FUNCTION FOR GO BUTTON */
                $scope.PaystructureEmp_Listsearchgo = function () {
                    // if ($scope.Validationcontrols() == true) {
                    $scope.Id = 0;
                    var ListId = $scope.Id;
                    $scope.Mode = 1;
                    $scope.PayEmployee_List($scope.Id, $scope.Mode);
                    //}
                    // $scope.ListOverTimePopUP(ListId);
                };




                /* THIS IS FOR VALIDATION FUNCTION */
                $scope.Validationcontrols = function () {
                 
                    if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0) {
                        alert("Please select Company");
                        return false;
                    }
                    else if (typeof ($scope.Paystructure_Name) == "undefined" || $scope.Paystructure_Name == 0) {
                        alert("Please select Pay Structure");
                        return false;
                    }
                    return true;

                };
          

                /* THIS IS FOR VALIDATION FUNCTION */
                /* Showing alert when inactive record is try to edit in the list page */
                $scope.ErrorFunction = function () {
                    alert("Inactive record cannot be edited");
                }

                $scope.Active_ErrorFunction = function () {
                    alert("Inactive companies Overtime Details cannot be edited");
                };

                // $scope.rowCollectionlist=[];

            
                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.Employeelist = function () {
                    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.CompanyName + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                        });
                    }
                };

                /* To show the employee code at the time of employee selection */
                $scope.EmployeeNameList = function () {
                    var EmployeeNo = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                            $scope.Employee_No = data.Employee_No;

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    };
                };

                $scope.Autolist = [];
                $scope.Autofilterlist = [];
                $scope.Employeefilteredlist = function () {
                    // $scope.autocompleteclear();
                    if ($scope.Autolist != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.Autolist = [];
                        $scope.Autofilterlist = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.CompanyName + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.Autofilterlist = data;
                            $scope.Autolist = data;
                        });
                    }
                }
                /*THIS IS EMPLOYEENAME DROPDOWN LIST*/
                $scope.Autocompletefilter = function () {
                    if ($scope.IsActive == 1) {

                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 1 });

                    }
                    else if ($scope.IsActive == 0) {
                        $scope.Autolist = [];
                        $scope.Autolist = $ff($scope.Autofilterlist, { IsActive: 0 });

                    }
                    else if ($scope.IsActive == -1) {
                        $scope.Autolist = [];
                        $scope.Autolist = $scope.Autofilterlist;
                    }
                };
                /* THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION */
                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.Employeelist = function () {
                    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.CompanyName + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                        });
                    }
                }


                /* THIS IS FOR DROPDOWN FUNCTION */
                $scope.MonthList = [];
                $scope.OvertimeTypelist =[];
                /* COMPANY NAME */
                $scope.CompanyFilterList = [];
                $scope.CompanyNameList = [];
                $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                    // all company records list including active and inactive 
                    // used for list page DD and inactive records filtering
                    $scope.CompanyFilterList = data;
                    // only active company
                    $scope.CompanyNameList = $ff(data, { Active: 1 });
                });
                  

                // This is function for View & Edit POP UP //
                $scope.AddPaystructurePopUP = function (OTId) {
                    $scope.Id = OTId;
                    //  $scope.ViewOverTime();
                    angular.element('#PaystructureModel').modal('show');
                }
                $scope.ViewPaystructurePopUP = function (OTId) {
                    $scope.Id = OTId;
                    $scope.ViewPaystructure();
                    angular.element('#PaystructureView').modal('show');
                }
                $scope.EditPaystructurePopUP = function (OTId) {
                    $scope.Id = OTId;
                    $scope.ViewPaystructure();
                    angular.element('#PaystructureModel').modal('show');
                    flag1 = 1;
                }

        
                $scope.ListPaystructurePopUP = function (OTId) {

                    if ($routeParams.Id == 0) {
                        $scope.rowCollection = [];
                    }
                    if ($scope.Id == 0 && $scope.Mode == 1) {

                        $scope.PaystructureEmployee_List();
                    }
                    else if ($scope.Id > 0 && $scope.Mode == 1) {

                        $scope.PaystructureEmployee_List();
                    }
                    if (OTId > 0) {
                        $scope.Id = OTId;
                        $scope.PaystructureEmployee_List();
                    }
                }


                $scope.rowCollectionlistview =[];
                $scope.empId =0;
                $scope.changeBackColor = [];

                /* THIS IS FOR VIEW FUNCTION */
                $scope.ViewPaystructure = function (rowId,catId){
                    $scope.changeBackColor = [];

                    if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                        $scope.Id = $routeParams.Id;
                        $scope.MasterId = $routeParams.Id;
                        $scope.DuplicateId = $routeParams.Id;
                    }
                    $http.get(baseUrl + 'api/PaystructureEmployee/PaystructureEmployee_View/?Id=' + $scope.Id).success(function (data) {
                    
                        $scope.DuplicateId = data.Id;
                        $scope.MasterId=data.Id;
                        $scope.Company_Name = data.Company_Id.toString();
                        $scope.listCompanyName = data.CompanyName;
                  
                        $scope.Department_Name = data.Department_Id.toString();
                        $scope.listDepartment_Name = data.Department_Name;
                        $scope.Name = data.Designation_Id.toString();
                        $scope.listName = data.Name;
                        $scope.Location_Name = data.Location_Id.toString();
                        $scope.listLocationName = data.LocationName;
                        $scope.Paystructure_Name = data.Paystructure_Id.toString();
                        $scope.listPayStructure = data.PayStructure;
                        //$scope.Employee_Name = data.Paystructure_Emp_Id.toString();
                        //$scope.listEmployee_Name = data.Employee_Name;
                        $scope.Employee_Name = data.Employee_Name;
                        $scope.Paystructure_Emp_Id = data.Paystructure_Emp_Id;
                        
                        var sel = {
                            Id: data.Paystructure_Emp_Id,
                            FullName: data.Employee_Name,
                            FullNamelist: data.FullNamelist
                        };
                        $scope.DisplayFullName = sel;

                        $scope.$broadcast('angucomplete-alt:changeInput', 'Div1', sel);



                        if (($ff($scope.CompanyFilterList, { Id: $scope.CompanyName, CompanyName: $scope.listCompanyName, Active: 0 }).length) == 1) {
                            $scope.CompanyInactiveFlag = 1;
                        }                   
               

                        $http.get(baseUrl + '/api/PaystructureEmployee/PaystructureEmployeeDetails_View/?Id=' + $scope.Id).success(function (OTdata) {                       
                            $scope.rowCollectionlistview = OTdata;                                                    
                                    
                            angular.forEach($scope.rowCollectionlistview, function (value, index) {  
                                //console.log(value);
                                $http.get(baseUrl + '/api/PaystructureEmployee/PaystructureEmployeeAssociationType_List/?Id=' + $scope.empId + '&Company_Id=' + $scope.Company_Name 
                                + '&Department_Id=' + $scope.Department_Name+ '&Designation_Id=' + $scope.Name+ '&Location_Id=' + $scope.Location_Name
                                + '&Paystructure_Id=' + $scope.Paystructure_Name +'&Employee_Id=' + value.FullName).success(function (data1) {
                                    $scope.rowCollectionlist =data1;
                                });    
                            });
                        });
                    }).error(function (data) {
                        $scope.error = "AN error has occured while list Pay structure!" + data;
                    });
                    $scope.changeBackColor[rowId] = "tdBackColor";
                };

                $scope.Deletepaystructure = function (LRId) {
                    $scope.Id = LRId;
                    $scope.Paystructure_Delete();
                };
                /* THIS IS FOR DELETE FUNCTION */
                $scope.Paystructure_Delete = function () {
                    var del = confirm("Do you like to inactivate the selected Pay structure Employee detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/PaystructureEmployee/PaystructureEmployee_Delete/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Paystructure Employee has been inactivated successfully");
                            $scope.Paystructure_Listsearchgo();
                            //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Paystructure Employee" + data;
                        });
                    }
                };


                $scope.ActivatePaystructure = function (LRId) {
                    $scope.Id = LRId;
                    $scope.Paystructure_Activate();
                };
                /* THIS IS FOR DELETE FUNCTION */
                $scope.Paystructure_Activate = function () {
                    var del = confirm("Do you like to activate the selected Pay structure detail?");
                    if (del == true) {
                        $http.get(baseUrl + 'api/PaystructureEmployee/PaystructureEmployee_Activate/?Id=' + $scope.Id).success(function (data) {
                            alert("Selected Paystructure detail has been activated successfully");
                            $scope.Paystructure_Listsearchgo();
                            //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                        }).error(function (data) {
                            $scope.error = "An error has occurred while deleting Paystructure Employee " + data;
                        });
                    }
                };

                $scope.changeBackColor = [];
                $scope.isEmployeeSelected = function(row)
                {    
                    $scope.changeBackColor = [];
                    angular.forEach($scope.rowCollectionlist, function (value1, index1) {
                     
                        angular.forEach($scope.rowCollectionlistview, function (value, index) {         
                           
                            if(value1.Id== value.Employee_Id)
                            {
                                value1.selectedemployee = true; 
                                $scope.changeBackColor[index1] = "tdBackColor";
                            }
                           
                        });      
                    });
                };


                /* THIS IS FOR CLEAR POPUP FUNCTION */
                $scope.ClearPaystructurePopup = function () {
                    $scope.Company_Name = "0";
                    $scope.CompanyName = "0";
                    $scope.Id = "0";           
                    $scope.Location_Name ="0";
                    $scope.Department_Name ="0";
                    $scope.Designation_Name ="0";
                    $scope.Paystructure=0;
                    $scope.Paystructure_Name ="0";
                    $scope.flag1 =0;
                    $scope.rowCollectionlistview = [];
                    $scope.Paystructurelistdata1 = [];
                    $scope.Paystructure_Emp_Id =0;
                    $scope.Employee_Name = "";
                    $scope.FullNamelist = "";

                    $scope.rowCollectionlist =[];
                   
                    $scope.payRow = -1;
                    $scope.$broadcast('angucomplete-alt:clearInput', 'Div1');
                };
     
                /* Clear the create page scope Employee variable values. */
                $scope.ClearEmployee = function () {
                    $scope.$broadcast('angucomplete-alt:clearInput', 'Div1');
                    $scope.Employee_No = "";
                };

                $scope.rowCollectionlist =[];
                $scope.DuplicateId =0;
                //  $scope.Company_Name =0;
                $scope.Employee_Id ="";
                $scope.Period_Month =0;
                $scope.Period_Year =0;
                $scope.Period_ToMonth =0;
                $scope.Period_ToYear =0;
                $scope.Paystructure_Emp_Id =0;
                $scope.Name =0;
                $scope.No_of_days ="";
                $scope.Paystructurelistdata1 = [];
                //  $scope.Location_Name =0;




                $scope.Paystructure_AddEdit = function () { 
                    if($scope.Validationcontrols() ==true)  {                   
                        var val = 0;
                        if($scope.Id == 0)
                        {
                          
                            angular.forEach($scope.rowCollectionlist, function (value, index) {
                                var val = 0;
                                if(value.selectedemployee ==true)
                                {
                                                          
                                    $http.get(baseUrl + '/api/PaystructureEmployee/PaystructureEmployeeDetails_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Employee_Id=' + value.empId + '&Paystructure_Id=' + $scope.Paystructure_Name + '&Validity_FromMonthId=0' + '&Validity_FromYearId=0'+ '&Validity_ToMonthId=0'+ '&Validity_ToYearId=0').success(function (data) {
                                        val = data;                          
                                    
                                        if (val == 1) {
                                            alert("Pay structure for this Company already exists, cannot duplicate");
                                            return false;
                                        }
                                        else{
                                            $scope.Paystructure_AddEditcontrolls();
                                        }
                                
                                    });   
                                }                    
                            })
                        
                        }
                        else{
                        
                            angular.forEach($scope.rowCollectionlistview, function (value1, index) {
                                var val1 = 0;                               
                                $http.get(baseUrl + '/api/PaystructureEmployee/PaystructureEmployeeDetails_DuplicateCheck/?Id=' + $scope.DuplicateId + '&Employee_Id=' + value1.Employee_Id + '&Paystructure_Id=' + $scope.Paystructure_Name + '&Validity_FromMonthId=0' + '&Validity_FromYearId=0'+ '&Validity_ToMonthId=0'+ '&Validity_ToYearId=0').success(function (data) {
                                    val1 = data;                           
                               
                                    if (val1 == 1) {
                                        alert("Pay structure for this Company already exists, cannot duplicate");
                                        return false;
                                    }
                                    else{
                                        $scope.Paystructure_AddEditcontrolls();
                                    }
                                });                            
                            })
                        }                   
                    }
                };




                /* THIS IS FOR ADD EDIT FUNCTION */
            
                $scope.Paystructure_AddEditcontrolls = function () {   
                  
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id; 
                    }
                    else {
                        $scope.EmployeeId = null;
                    }
                               
                    var obj = {
                        Id: $scope.Id,
                        Company_Id: $scope.Company_Name == "0" ? null : $scope.Company_Name,
                        Location_Id: $scope.Location_Name == "0" ? null : $scope.Location_Name,
                        Department_Id: $scope.Department_Name == "0" ? null : $scope.Department_Name,
                        Designation_Id: $scope.Designation_Name == "0" ? null : $scope.Designation_Name,
                        Paystructure_Id: $scope.Paystructure_Name== "0" ? null : $scope.Paystructure_Name,
                        Paystructure_Emp_Id: $scope.Employee_Id== "0" ? null : $scope.Employee_Id
                    };                  
                  
                    $http.post(baseUrl + '/api/PaystructureEmployee/PaystructureEmployee_AddEdit/', obj).success(function (data) {
                        $scope.AddId = data;
                        var AddId = data;
                        $scope.Paystructurelist_Id = data; 
                        $scope.MasterId = data;                                  
                                
                        //   angular.forEach($scope.Paystructurelistdata, function (value, index) { 
                            
                        angular.forEach($scope.rowCollectionlist, function (selectedEmployee, index) {                                   
                                       
                            if (selectedEmployee.selectedemployee ==true) {                                      

                                //  value.Paystructure_Employee_Id= $scope.Paystructurelist_Id,                                            
                                //value.Employee_Id= selectedEmployee.empId  
                                console.log(selectedEmployee);
                                var obj1 = {
                                    Id:$scope.ChildId,
                                    Paystructure_Employee_Id:$scope.Paystructurelist_Id,
                                    Employee_Id: selectedEmployee.Id
                                };
                                $scope.Paystructurelistdata1.push(obj1);
                            }
                        })                                       
                        console.log($scope.Paystructurelistdata1);       
                        $http.post(baseUrl + '/api/PaystructureEmployee/PaystructureEmployeeDetails_AddEdit/', $scope.Paystructurelistdata1).success(function (data) {
                                                                           
                            $scope.ListPaystructurePopUP();                                  
                            angular.element('#PaystructureModel').modal('hide');                                    
                            $scope.ClearPaystructurePopup();                                            
                            // });                                        
                                              
                        });  
                        //   });
                        // }
                           
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                    });  
                };


                /* To show the employee code at the time of employee selection */
                $scope.AttendanceEmployeeNameList = function () {
                    var EmployeeNo = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                        $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {

                            $scope.Employee_No = data.Employee_No;

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    };
                };


                $scope.Id = "0";
                $scope.Company_Name = "0";

                /*THIS IS FOR LIST FUNCITON EMPLOYEE SELECTION*/
                $scope.NameList = [];
                $scope.NamefilterList = [];
                $scope.EmployeeAttendancelist = function () {
                    // $scope.autocompleteclear();
                    if ($scope.NamefilterList != undefined) {  // to avoid going to DB each time when Employee Search clicked
                        $scope.NameList = [];
                        $scope.NamefilterList = [];
                        // $scope.NameList = [];
                        // $http.get(baseUrl + 'api/EmployeeAttendance/GetEmployeeNameList/').success(function (data) {
                        $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=0' + '&Department_Id=0' + '&LocationId=0').success(function (data) {
                            $scope.NameList = data;
                            $scope.NamefilterList = $ff(data, { IsActive: 1 });

                        });
                    }
                };

                $scope.model = {
                    selectedLabelList: []
                };

                $scope.isSelectAll = function () {
                    $scope.model.selectedLabelList = [];
                    if ($scope.master) {
                
                        $scope.master = true;
                        for (var i = 0; i < $scope.rowCollectionlist.length; i++) {
                            $scope.model.selectedLabelList.push($scope.rowCollectionlist[i].Id);
                        }
                    } else {
                        $scope.master = false;
                    }
                    angular.forEach($scope.rowCollectionlist, function (item) {
                        item.selectedemployee = $scope.master;
                    });
                }



                $scope.NameListfilter = [];
                $scope.NamefilterListfilter = [];
                $scope.Employeelistfilter = function () {                  
                    $scope.NameListfilter = [];
                    $scope.NamefilterListfilter = [];
                    // $scope.NameList = [];
                    $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name='+ $scope.Company_Name + '&Department_Id=0'+ '&LocationId=0'+ '&Designation_Id=0').success(function (data) {
                        // $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' + $scope.Company_Name + '&Department_Id=0').success(function (data) {
                        $scope.NameListfilter = data;
                        $scope.NamefilterListfilter = $ff(data, { IsActive: 1 });                           
                    });                 
                };

                $scope.ViewRedirect = function () {
                    $location.path("/PaystructureEmployee/" + $scope.Id);
                }
                $scope.ListRedirect = function () {
                    $location.path("/PaystructureEmployee" + $scope.Id);
                }
                //$scope.CancelPopup = function () {
                //    angular.element('#OvertimeModel').modal('hide');
                //    angular.element('#OvertimeModelView').modal('hide');
                //    $scope.ClearOverTimePopup();
                //}
                //$scope.rowCollection = [];
                $scope.CancelView = function () {
                    angular.element('#PaystructureView').modal('hide');
                    $scope.ClearPaystructurePopup();
                }
                $scope.CancelPopuplist = function () {              
                    angular.element('#PaystructureModel').modal('hide');
                    $scope.ClearPaystructurePopup();
                }              
            } 
    ]);


    //This is for CTC controller functions//
    EmpControllers.controller("CTCController", ['$scope', '$http', '$filter', '$routeParams', '$location', '$window','filterFilter','$rootScope', '$timeout',
        function ($scope, $http, $filter, $routeParams, $location, $window, $ff, $rootScope, $timeout) {

            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {
                $scope.current_page = p
            }

            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.bool = function (IsAttribute) {
                if (IsAttribute == true) {
                    $scope.IsAttribute = 'Yes';
                } else if (IsAttribute == false) {
                    $scope.IsAttribute = 'No';
                }
            };
            /* THIS IS FOR VALIDATION*/
            $scope.Validationcontrols = function () {
                if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0) {
                    alert("Please select Company");
                    return false;
                }

                else if (typeof ( $scope.Employee_Selected) == "undefined" || $scope.Name==0) {
                    alert("Please enter Employee Name");
                    return false;
                }
                else if (typeof ($scope.ValidFrom_Dt) == "undefined" || $scope.ValidFrom_Dt == "") {
                    alert("Please select Valid From Date");
                    return false;
                }

                else if (typeof ($scope.CTC) == "undefined" || $scope.CTC == 0) {
                    alert("Please enter CTC");
                    return false;
                }
            
                return true;
            };
            //$scope.Active_ErrorFunction = function () {
            //    alert("Inactive companies payroll configurations cannot be edited");
            //};

            $scope.MasterId = 0;
            $scope.Id = 0;
            $scope.Company_Name = "0";
            $scope.Designation_Name = "0";
            $scope.Department_Name = "0";
            $scope.Employee_Id = "0";
            $scope.Valid_From = "";
            $scope.CTC = "";
            $scope.Employee_Name = '';
            $scope.Employee_Id = "";
            $scope.Employee_No = "";
            $scope.EmployeeList = [];
            /* THIS IS FOR DROP DOWN LIST CHANGE ID VALUE TO NAME*/
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                $scope.CompanyNameList = data;
                $scope.CompanyNameList = $ff(data, { Active: 1 });
            
            });

            $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {         
                $scope.DesignationNameList = data;
                $scope.DesignationNameList = $ff(data, { Active: 1 });
            });
       
            $http.get(baseUrl + 'api/Common/GetDepartmentList/').success(function (data) {         
                $scope.DepartmentNameList = data;
                //$scope.DepartmentNameList = $ff(data, { Active: 1 });
           
            });

            $scope.Autolist = [];
            $scope.Autofilterlist = [];
            $http.get(baseUrl + 'api/Common/CommonEmployeeList/?Id=0' + '&Company_Name=' +$scope.Company_Name + '&Department_Id=' +$scope.Department_Name  + '&LocationId=0' + '&Designation_Id=' +$scope.Designation_Name).success(function (data) {
                $scope.Autofilterlist = data;
                $scope.Autolist = data;
            });
  
            /* THIS IS FOR VIEW PROCEDURE */
            $scope.AddCTCPopUP = function (CatId) {
                $scope.Id = CatId;
                // $scope.ClearCTCPopup();
                angular.element('#CTCAddModal').modal('show');
            }

            $scope.ViewCTCPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewCTC();
                angular.element('#CTCViewModal').modal('show');
          
            }

            $scope.EditCTCPopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewCTC();
                angular.element('#CTCAddModal').modal('show');
            }

            $scope.ListCTCPopUP = function (CTCId) {
           
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.CTCDetails_List();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.CTCDetails_List();
                }
                if (CTCId > 0) {
                    $scope.Id = CTCId;
                    $scope.CTCDetails_List($scope.Id);
                    //angular.element('#CTCAddModal').modal('hide');
                }
            }
            $scope.UploadCTCPopUP = function (CatId) {
                $scope.Id = CatId;
            
                angular.element('#CTCUploadModal').modal('show');
            }
            $scope.ViewCTC = function () {

                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }

                $http.get(baseUrl + '/api/CTCDetails/CTCDetails_View/?Id=' + $scope.Id).success(function (data) {
                    $scope.Id = data.Id;
                    $scope.DuplicateId = data.Id;
                    $scope.Company_Name = data.CompanyId.toString();
                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Designation_Name = data.Designation_Id.toString();
                    $scope.ViewDesignationName = data.Name;
                    $scope.Department_Name = data.Department_Id.toString();
                    $scope.ViewDepartmentName = data.Department_Name;
                    $scope.EmployeeId = data.Employee_Id;
                    $scope.FullNamelist = data.FullNamelist;
                    $scope.EmployeeName = data.EmployeeName;
                    $scope.ValidFrom_Dt = $filter('date')(data.ValidFrom_Dt, "dd-MMM-yyyy");
                    $scope.ValidTo = $filter('date')(data.ValidTo, "dd-MMM-yyyy");
                    $scope.CTC = data.CTC;
                    var sel = {
                        Id: data.Employee_Id,
                        FullName: data.FullName,
                        FullNamelist: data.FullNamelist
                    };
                    $scope.DisplayFullName = sel;

                    $scope.$broadcast('angucomplete-alt:changeInput', 'ex1', sel);
                    console.log(data);
                }).error(function (data) {
                    $scope.error = "AN error has occured while view" + data;
                });

            };  
            /* THIS IS FOR ADD PROCEDURE */                                      

            $scope.DuplicateId = 0;
            $scope.Id=0;
            /*THIS IS FOR ADD FUNCTION */
            $scope.DuplicatId = 0;
            /*THIS IS FOR ADD FUNCTION */
            $scope.CTC_AddEdit = function () {
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeId = $scope.Employee_Selected.originalObject.Id;
                }
                else {
                    $scope.Employee_Id = null;
                }
                if ($scope.Validationcontrols() == true) {
                    var obj = {
                        Id: $scope.Id,
                        CompanyId : $scope.Company_Name,
                        Designation_Id : $scope.Designation_Name == 0 ? null :$scope.Designation_Name,
                        Department_Id : $scope.Department_Name == 0 ? null : $scope.Department_Name,
                        Employee_Id  :$scope.EmployeeId,
                        ValidFrom_Dt: $scope.ValidFrom_Dt == 0 ? null : $scope.ValidFrom_Dt,
                       
                        //ValidTo_Dt: $scope.ValidTo_Dt == 0 ? null : $scope.ValidTo_Dt,
                        CTC : $scope.CTC                 
                    };
                    //console.log(obj);
                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 3 seconds

          
                    $http.post(baseUrl + '/api/CTCDetails/CTCDetails_AddEdit/', obj).success(function (data) {
                    
                        $scope.AddId = data;
                        var AddId = data;
                        $scope.ListCTCPopUP($scope.AddId);
                        angular.element('#CTCAddModal').modal('hide');
                        $scope.ClearCTCPopup();
               
                   
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Tableno!" + data.ExceptionMessage;
                    });
                }
            };
    
            /* THIS IS FOR DELETE PROCEDURE */

            //Delete popup function//
            $scope.DeleteCTC = function (comId) {
                $scope.Id = comId;
                $scope.CTC_Delete();
            };
            $scope.CTC_Delete = function () {
                var del = confirm("Do you like to inactivate the selected CTC details?");
                if (del == true) {
                    $http.get(baseUrl + '/api/CTCDetails/CTCDetails_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("CTC Details has been inactivated Successfully");
                        $scope.ListCTCPopUP($scope.Id = 0);
                    

                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting records" + data;
                    });
                }
            };

           

            
            $scope.CompanyName = 0;
            /*THIS IS FOR LIST FUNCTION*/
            $scope.CTCDetails_List = function () {
                $http.get(baseUrl + 'api/CTCDetails/CTCDetails_List/?Id=' + $scope.Id + '&CompanyId=' + $scope.Company_Name +'&Department_Id=' + $scope.Department_Name + '&Designation_Id=' + $scope.Name +'&Employee_Id=' + $scope.EmployeeId ).success(function (data) {
                    $scope.emptydata = [];
                    $scope.rowCollection = [];
                    $scope.rowCollection = data;
                    if ($scope.rowCollection.length > 0) {
                        $scope.flag = 1;
                    }
                    else {
                        $scope.flag = 0;
                    }
                }).error(function (data) {
                    $scope.error = "AN error has occured while Listing the records!" + data;
                })
            };

            //This is function for List page (For List page Go button)
            $scope.CTCListGo = function () {      
                $scope.Id = 0;
                var ListId = $scope.Id;
                $scope.Mode = 1;
                $scope.CTCDetails_List($scope.Id, $scope.Mode);
            
            };

            /*calling Alert message for cannot edit inactive record function */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }


            //on click active tool tip calling ReInsert function//
            $scope.ActiveCTC = function (canId) {
                $scope.Id = canId;
                $scope.CTC_Active();
            };


            /* 
             This is for Active function
            */
            $scope.CTC_Active = function () {
                var Ins = confirm("Do you like to activate the selected CTC details?");
                if (Ins == true) {
                    $http.get(baseUrl + '/api/CTCDetails/CTCDetails_Active/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected CTC details has been activated successfully");
                        $scope.ListCTCPopUP($scope.Id = 0);
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting CTC Details records" + data;
                    });
                }
            };

            $scope.Listrec = function () {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
            };


            $scope.RegionCTCEmployee = function () {
                if ($scope.Company_Name == 0  && $scope.Department_Name == 0 && $scope.Designation_Name == 0) {
                    var Name = '';
                    if ($scope.Employee_Selected != undefined) {
                        $scope.Name = $scope.Employee_Selected.originalObject.Id;

                        $http.get(baseUrl + '/api/CTCDetails/CTCEmployeeSelectionDetailsList/?Id=' + $scope.Name).success(function (data) {
                        
                            $scope.Employee_Id = data.Name;
                            $scope.Company_Name = data.Company_Name;
                            //$scope.Location_Name = data.Location_Name;
                            $scope.Department_Name = data.Department_Id;
                            $scope.Designation_Name = data.Designation_Id;

                            $scope.CompanyFilterList1 = [];
                            $scope.CompanyNameList1 = [];
                            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                                // all company records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.CompanyFilterList1 = data;
                                // only active company
                                $scope.CompanyNameList1 = $ff(data, { Active: 0 });
                                angular.forEach($scope.CompanyNameList1, function (value, index) {
                                    if (($scope.Company_Name == value.Id)) {
                                        $scope.Company_Name = "0";
                                    }
                                });
                            });
                           
                            $scope.DepartmentFilterList1 = [];
                            $scope.DepartmentList1 = [];
                            $http.get(baseUrl + 'api/Common/GetDepartment/').success(function (data) {
                                // all department records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.DepartmentFilterList1 = data;
                                // only active department
                                $scope.DepartmentList1 = $ff(data, { Active: 0 });
                                //  console.log($scope.DepartmentList1);
                                angular.forEach($scope.DepartmentList1, function (value, index) {
                                    if (($scope.DepartmentList1 == value.Id)) {
                                        $scope.Department_Name = "0";
                                    }
                                });
                            });


                            /* DESIGNATION NAME */
                            $scope.DesignationFilterList1 = [];
                            $scope.DesignationList1 = [];
                            $http.get(baseUrl + 'api/Common/GetDesignation/').success(function (data) {
                                // all designation records list including active and inactive 
                                // used for list page DD and inactive records filtering
                                $scope.DesignationFilterList1 = data;
                                // only active designation
                                $scope.DesignationList1 = $ff(data, { Active: 0 });
                                //   console.log($scope.DesignationList1);
                                angular.forEach($scope.DesignationList1, function (value, index) {
                                    if (($scope.DesignationList1 == value.Id)) {

                                        $scope.Designation_Name = "0";
                                    }
                                });
                            });

                        }).error(function (data) {
                            $scope.error = "AN error has occured while Listing the records!" + data;
                        });
                    }
                    else {
                        $scope.EmployeeNameListfunction();
                    }
                }
            };

            //List page filters
            $scope.EmployeeNameListfunction = function () {
                var EmployeeNo = '';
                if ($scope.Employee_Selected != undefined) {
                    $scope.EmployeeNo = $scope.Employee_Selected.originalObject.Id;

                    $http.get(baseUrl + 'api/Common/CommonEmployeeView/?Id=' + $scope.EmployeeNo).success(function (data) {
                      
                        $scope.Employee_Id = data.EmployeeNo;
                        $scope.Company_Name = data.Company_Name;
                        $scope.Department_Name =data.Department_Id;
                 
                        $scope.Designation_Name =data.Designation_Id;
                  
                        if(data.Company_Name == null)
                        {
                            $scope.Company_Name ="0";
                        }
                        else{
                            $scope.Company_Name = data.Company_Name;
                        }
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing the records!" + data;
                    });
                };
            };


            /* THIS IS FOR EDIT PROCEDURE */

            $scope.ViewRedirect = function () {

                $location.path("/CTCList/" + $scope.Id);

            }
            ///* THIS IS FOR LIST PROCEDURE */
            //$scope.ListRedirect = function () {

            //    $location.path("/ITSectionCategoryList/" + $scope.Id);

            //}

            $scope.CancelView = function () {
                angular.element('#CTCViewModal').modal('hide');
                $scope.ClearCTCPopup();
                $scope.CTCListGo();
            }

            $scope.CancelPopup = function () {
                if ($scope.Id > 0) {
                    angular.element('#CTCAddModal').modal('hide');
                    $scope.ClearCTCPopup();
                    $scope.CTCListGo();
                }

                angular.element('#CTCAddModal').modal('hide');
                $scope.ClearCTCPopup();
                //$scope.CTCListGo();
            }
            $scope.CancelPopupButton = function () {
                angular.element('#CTCAddModal').modal('hide');
                $scope.ClearCTCPopup();
                $scope.CTCListGo();
            }

            /*THIS IS FOR CLEAR POPUP FUNCTION*/
            $scope.ClearCTCPopup = function () {
                $scope.Company_Name = "0";
                $scope.Designation_Name = "0";
                $scope.Department_Name = "0";
                $scope.ValidFrom_Dt = "";
                $scope.CTC = "";
                       
            };

            $scope.ClearEmployee = function () {
                $scope.$broadcast('angucomplete-alt:clearInput', 'ex1');
                $scope.Employee_No = "";
                $scope.EmployeeId = "";
                $scope.FullNamelist = "";
                $scope.EmployeeName = "";
            };

            //$scope.CancelPopup = function () {

            //    angular.element('#CTCAddModal').modal('hide');
            //    angular.element('#CTCViewModal').modal('hide');
            //    $scope.ClearCTCPopup();
            //}

            $scope.CTCDetails = [];
            $scope.Message = [];

            $scope.downloadfile = function (url, defaultFileName) {
                var self = this;
                var deferred = $q.defer();
                $http.get(url, { responseType: "blob" }).then(
                   function (data) {
                       saveAs(data.data, defaultFileName)
                       deferred.resolve(defaultFileName);
                   }, function (data) {
                       var e = /* error */
                        deferred.reject(e);
                   });
                return deferred.promise;
            };


            $scope.dataURItoBlob = function (dataURI) {
                var binary = atob(dataURI.split(',')[1]);
                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
                var array = [];
                for (var i = 0; i < binary.length; i++) {
                    array.push(binary.charCodeAt(i));
                }
                return new Blob([new Uint8Array(array)], {
                    type: mimeString
                });
            }

            $scope.doclogoChange = function () {

                if ($('#CTC')[0].files[0] != undefined) {
                    $scope.LicenseFileName = $('#CTC')[0].files[0]['name'];
                }
            }

            $scope.MasterId = 0;
            $scope.loading = false;
            $scope.CTCDetailsUpload_AddEdit = function () {

                if ($scope.LicenseFileName == '' || $scope.LicenseFileName == undefined) {
                    alert("Please Upload Employee CTC Details");
                }
                else {

                    var filename = "";
                    var Licensefilename = "";

                    var fd = new FormData();
                    var imgBlob;
                    var imgBlobfile;
                    var itemIndexLogo = -1;
                    var itemIndexfile = -1;

                    var fd = new FormData();

                    if ($('#CTC')[0].files[0] != undefined) {
                        Licensefilename = $('#CTC')[0].files[0]['name'];
                        imgBlobfile = $scope.dataURItoBlob($scope.licedoc);
                        if (itemIndexLogo == -1) {
                            itemIndexfile = 0;
                        }
                        else {
                            itemIndexfile = 1;
                        }
                    }

                    if (itemIndexfile != -1) {
                        fd.append('file1', imgBlobfile);
                    }

                    $scope.loading = true;
                    $timeout(function () {
                        if ($scope.loading == true) {
                            $rootScope.$broadcast('show');
                        }
                    }, 3000); // 5 seconds

                    $http.post(baseUrl + 'api/CTCDetails/AttachExcelFile',
                     fd,

                     {
                         withCredentials: false,
                         transformRequest: angular.identity,
                         headers: {
                             'Content-Type': undefined
                         },
                         params: {
                             fd
                             },

                     }
                     )
                    .success(function (response) {
                        $scope.CTCDetails = response;
                      
                        $scope.loading = false;
                        $rootScope.$broadcast('hide');

                    }).error(function (response) {
                        $scope.Document_Upload = "";

                    });
                    $("#documentfile").val('');
               
                };            
            };

            $scope.fileclear = function () {
                $scope.licedoc = "";
                $scope.Document_Upload = "";       
                $scope.LicenseFileName = "";
                $('#CTC').val('');
                $scope.CTCDetails=[];
            };

            $scope.loading = false;

            $scope.CancelPopup = function () {
                $scope.licedoc = "";
                $scope.LicenseFileName = "";
                $('#CTC').val('');
                $scope.CTCDetails = [];
            };

        }
    ]);



    //This is for Pay Components controller functions//
    EmpControllers.controller("PayComponentsController", ['$scope', '$http', '$routeParams', '$location', '$filter', '$window',
    function ($scope, $http, $routeParams, $location, $filter, $window) {

        ///This is Declaration of variables//
        $scope.Id = 0;
        $scope.Id = "0";
        $scope.Company="0";
        $scope.Location="0";
        $scope.Company_Name = "0";
        $scope.Location_Name="0";
        $scope.PayComponentType="0";
        $scope.PayComponent_Type="0";
        $scope.Pay_component="";
        $scope.RoundOffFrequency = "0";
        $scope.FormulaTypeId="0";
        $scope.Is_Taxable="0";
        $scope.Is_Override="0";

        $scope.ChildId=0;
        $scope.ChildId="0";

        $scope.FormulaId=0;
        $scope.FormulaId="0";
        $scope.PayComponentMaster_Id="0";
        $scope.PayrollEntities_Id="0";
        $scope.Formularow="1";

        $scope.listdata = [];
        $scope.PayComponentTypeList=[];
        $scope.CompanyLocationList =[];
        $scope.CompanyLocation_ArrayList=[];
        $scope.FormulaTypeList = [];
        $scope.CompanyLocationDetails=  [];
        $scope.ConditionTypeList=[];
        $scope.FormulaDetailsArray=[];
        $scope.PayComponentList=[];
        $scope.OperatorTypeList=[];
        $scope.Mode = $routeParams.Mode;

    
        $scope.current_page = 1;
        $scope.page_size = 30;
        $scope.rembemberCurrentPage = function (p) {
            $scope.current_page = p
        }



        /* THIS IS FOR LIST FUNCTION */
        $scope.PayComponent_Listsearch = function () { 
       
            $scope.emptydata = [];
            $scope.rowCollection = [];

            if ($routeParams.Id != undefined) {
                $scope.Id = $routeParams.Id;

                //int Id,int CompanyId,int LocationId,int TaxTypeId, string TaxName
                $http.get(baseUrl + '/api/PayComponent/PayComponent_List/?Id=' + $scope.Id 
                    + '&CompanyId=' + $scope.Company +
                    '&ComponentType=' + $scope.PayComponent_Type + '&ComponentName=' + $scope.Pay_component + '&IsTaxable=' + $scope.Is_Taxable+ '&Override=' + $scope.Is_Override).success(function (data) {
                
                        $scope.emptydata = [];
                        $scope.rowCollection = [];
                        $scope.rowCollection = data;

                        //console.log($scope.rowCollection);
          
                    }).error(function (data) {
                        $scope.error = "AN error has occured while Listing IT Configuration" + data;
                    });
            }
        };

   
   
        /* THIS IS FOR VALIDATION FUNCTION */

        $scope.Validationcontrols = function () {
      
            if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0) {
                alert("Please select Company");
                return false;
            }      
            else if (typeof ($scope.PayComponent) == "undefined" || $scope.PayComponent == "") {
                alert("Please enter Pay Component");
                return false;
            }
            else if (typeof ($scope.PayComponentDisplay) == "undefined" || $scope.PayComponentDisplay == "") {
                alert("Please enter Pay Component Display");
                return false;
            }
            else if (typeof ($scope.PayComponentType) == "undefined" || $scope.PayComponentType == 0) {
                alert("Please select Pay Component Type");
                return false;
            }
            
            angular.forEach($scope.CompanyLocation_ArrayList, function (value1, index1) {
                console.log(value1.FormulaTypeId);

                if (value1.FormulaTypeId == 0)
                {
                    alert("Please select Formula Type");
                    return FormulaTypeId;
                }
            
                else if (value1.FormulaTypeId==0 && value1.FixedAmount == null) 
                {
                    alert("Please enter Fixed Amount");
                    return FixedAmount;

                }
           
            });
           
            return true;
        
        };

        /* THIS IS FOR DROPDOWN FUNCTION */
        /*COMPANY*/
        $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
            $scope.CompanyNameList = data;
        });
    
        /*ROUND OFF*/
        $http.get(baseUrl + 'api/Common/GetRoundOffList/').success(function (data) {
            $scope.GetRoundOff = data;
        });

        /*Pay Component Type List*/
        $http.get(baseUrl + 'api/PayComponent/GetPayComponentType/').success(function (data) {
            // console.log(data);
            $scope.PayComponentTypeList = data;
       
        });

   

        /*Getlocation by company*/

        $scope.GetLocationName_ByCompany=function(){
            if($scope.Company_Name==-1){

                $http.get('/api/Common/GetLocationList/').success(function (data) {
                    $scope.CompanyLocation_ArrayList=[];
                    $scope.CompanyLocation_ArrayList=data;
                });

            }
            else
            {

                $http.get(baseUrl + 'api/Common/GetLocationName_ByCompany/?CompanyId=' + $scope.Company_Name).success(function (data) {

                    $scope.CompanyLocation_ArrayList=[];
                    $scope.CompanyLocation_ArrayList = data;

                    angular.forEach($scope.CompanyLocation_ArrayList,function(locationvalue,index){
                        $scope.LocationId = locationvalue.LId;
                        $scope.LocationName=locationvalue.LocationName;
                  
                        angular.forEach($scope.CompanyLocation_ArrayList, function(valuedata,index){

                            valuedata.Location_Id=$scope.LocationId;
                            valuedata.LocationName=$scope.LocationName
                        });

                    });
                    console.log($scope.CompanyLocation_ArrayList);
                });
            }
        }

    
    



        $scope.GetLocationNameList=function(){

            $http.get(baseUrl + 'api/Common/GetLocationName_ByCompany/?CompanyId=' + $scope.Company).success(function (data) {
                // console.log(data);
                $scope.CompanyLocationDetails = data;
            });
        }


        /*Formula TYPE*/
        $http.get(baseUrl + 'api/PayComponent/GetFormulaType/').success(function (data) {
            $scope.FormulaTypeList = data;
        });

        $scope.GetFormulaTypeList = function (FTId) {

            var FT_Id = FTId;
            var FT_Name = "";
            if (FTId > 0) {

                FT_Name = $.grep($scope.FormulaTypeList, function (FTId) {
                    return FTId.Id == FT_Id;

                })[0].FormulaType_Name;
            }

            return FT_Name;

        }

        $scope.GetLocationTypeList = function (LTId) {

            var LT_Id = LTId;
            var LT_Name = "";
            if (LTId > 0) {

                LT_Name = $.grep($scope.CompanyLocationList, function (LTId) {
                    return LTId.Id == LT_Id;

                })[0].LocationName;
            }

            return LT_Name;

        }


        /*Condition Type*/
        $http.get(baseUrl + 'api/PayComponent/GetConditionType/').success(function (data) {
            $scope.ConditionTypeList = data;
        });
        $scope.GetConditionTypeList = function (condition) {
            var CT_Id = condition;
            var CT_Name = "";
            if (condition > 0) {
                CT_Name = $.grep($scope.ConditionTypeList, function (condition) {
                    return condition.Id == CT_Id;
                })[0].ConditionType;
            }
            return CT_Name;
        }

   
        /*Pay Component Type*/
        $http.get(baseUrl + 'api/PayComponent/GetPayComponents/').success(function (data) {
            $scope.PayComponentList = data;
        });

 

        //$scope.startsWith = function (actual, expected) {
        //    var lowerStr = (actual + "").toLowerCase();
        //    return lowerStr.indexOf(expected.toLowerCase()) === 0;
        //}

        $scope.GetPayComponentList = function (components) {
            var CT_Id = components;
            var CT_Name = "";
            if (components != "") {
                CT_Name = $.grep($scope.PayComponentList, function (components) {         
                    return components.PR_ID == CT_Id;                
                })[0].Component_Name;
            }
            return CT_Name;
        }

      

        $scope.GetPayComponentId_List=function(row)
        {
            if(row.Component_Name.substr(0,2)=="FC"){
                
                row.PayrollEntities_Id=row.Component_Name.substr(2);
                console.log(row.PayComponentMaster_Id);
            }

            else
            {

                row.PayComponentMaster_Id = row.Component_Name.substr(2);
                console.log(row.PayrollEntities_Id);
            }
           
           
        }

        
    


        //$scope.GetPayComponentList();

        /*Pay Component Type*/
        $http.get(baseUrl + 'api/PayComponent/GetOperatorType/').success(function (data) {
            $scope.OperatorTypeList = data;
        });
        $scope.GetOperatorTypeList = function (operator) {
            var OT_Id = operator;
            var OT_Name = "";
            if (operator > 0) {
                OT_Name = $.grep($scope.OperatorTypeList, function (operator) {
                    return operator.Id == OT_Id;
                })[0].OperatorType;
            }
            return OT_Name;
        };

        // $scope.PayCompo
   



    

        /*ARRAY LIST FOR THE CHILD TABLE CUSTOMER DETAILS */
        $scope.ClearPayComponent=function(){
       
            $scope.Company_Name="0";
            $scope.Location_Name="0";
            $scope.PayComponent="";
            $scope.PayComponentDisplay="";
            $scope.Description="";
            $scope.PayComponentType="0";
            $scope.CompanyLocationRow=-1;

            $scope.CompanyLocation_ArrayList = [{

                'Id': $scope.ChildId,
                'Location_Id': $scope.Location_Id == 0 ? null : $scope.Location_Id,
                'LocationName':$scope.LocationName,
                'FormulaType_Id': $scope.FormulaType_Id == 0 ? null : $scope.FormulaType_Id,
                'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount 
           
            }];
        }

        $scope.ClearPayComponentFormula_details=function(){
            $scope.FormulaDetailsRow=-1;
            $scope.FormulaDetailsArray = [{

                'Id': $scope.FormulaId,
                'ConditionType_Id': $scope.ConditionType_Id == 0 ? null : $scope.ConditionType_Id,
                'PayComponentMaster_Id': $scope.Component_Name == 0 ? null : $scope.Component_Name,
                'PayrollEntities_Id': $scope.Component_Name == 0 ? null : $scope.Component_Name,
                'Operators_Id':$scope.Operators_Id == 0 ? null : $scope.Operators_Id,
                'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount
           
            }];
        }


    
        //$scope.CompanyLocation_ArrayList = [{

        //    'Id': $scope.ChildId,
        //    'Location_Id': $scope.Location_Id == 0 ? null : $scope.Location_Id,
        //    'LocationName':$scope.LocationName,
        //    'FormulaType_Id': $scope.FormulaType_Id == 0 ? null : $scope.FormulaType_Id,
        //    'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount 
           
        //}];
   

        /* SAVE FUNCTION FOR THE CHILD TABLE CUSTOMER DETAILS */
        $scope.PayComponentDetails_save = function () {

            if ($scope.CompanyLocation_ArrayList > 0) {
                var obj = {
                    'Id':$scope.ChildId,
                    'Location_Id': $scope.Location_Id == 0 ? null : $scope.Location_Id,
                    'LocationName': $scope.LocationName,
                    'FormulaType_Id': $scope.FormulaType_Id == 0 ? null : $scope.FormulaType_Id,
                    'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount 
                
                }

                $scope.CompanyLocation_ArrayList[$scope.CompanyLocationRow] = obj;

            }
            else {
                $scope.CompanyLocation_ArrayList.push
                    ({
                        'Id': $scope.ChildId,
                        'Location_Id': $scope.Location_Id == 0 ? null : $scope.Location_Id,
                        'LocationName': $scope.LocationName,
                        'FormulaType_Id': $scope.FormulaType_Id == 0 ? null : $scope.FormulaType_Id,
                        'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount 
                    })
            }

        };


        $scope.FormulaDetailsArray = [{

            'Id': $scope.FormulaId,
            'ConditionType_Id': $scope.ConditionType_Id == 0 ? null : $scope.ConditionType_Id,
            'PayComponentMaster_Id': $scope.PayComponentMaster_Id == 0 ? null : $scope.PayComponentMaster_Id,
            'PayrollEntities_Id': $scope.PayrollEntities_Id == 0 ? null : $scope.PayrollEntities_Id,
            'Operators_Id':$scope.Operators_Id == 0 ? null : $scope.Operators_Id,
            'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount
           
        }];

        
        
       

        $scope.FormulaDetails_save = function () {
          
            if ($scope.FormulaDetailsRow > 0) {
                var obj = {
                    'Id': $scope.FormulaId,
                    'ConditionType_Id': $scope.ConditionType_Id == 0 ? null : $scope.ConditionType_Id,
                    'PayComponentMaster_Id':  $scope.GetPayComponentId_List($scope.PayComponentMaster_Id),
                    'PayrollEntities_Id': $scope.PayrollEntities_Id == 0 ? null : $scope.PayrollEntities_Id,
                    'Operators_Id':$scope.Operators_Id == 0 ? null : $scope.Operators_Id,
                    'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount
                
                }

                $scope.FormulaDetailsArray[$scope.FormulaDetailsRow] = obj;

            }
            else {
                $scope.FormulaDetailsArray.push
                    ({
                        'Id': $scope.FormulaId,
                        'ConditionType_Id': $scope.ConditionType_Id == 0 ? null : $scope.ConditionType_Id,
                        'PayComponentMaster_Id': $scope.PayComponentMaster_Id == 0 ? null : $scope.PayComponentMaster_Id,
                        'PayrollEntities_Id': $scope.PayrollEntities_Id == 0 ? null : $scope.PayrollEntities_Id,
                        'Operators_Id':$scope.Operators_Id == 0 ? null : $scope.Operators_Id,
                        'FixedAmount':$scope.FixedAmount == "" ? null : $scope.FixedAmount
                    })
            }
           
        };

        $scope.addFormulaFields = function() {

            for (i ="0"; i < $scope.Formularow; i++) {
                $scope.tempobj = {};
                $scope.tempobj.Id = i;
                $scope.tempobj.ConditionType_Id = $scope.ConditionType_Id == 0 ? null : $scope.ConditionType_Id;
                $scope.tempobj.PayComponentMaster_Id = $scope.PayComponentMaster_Id == 0 ? null : $scope.PayComponentMaster_Id;
                $scope.tempobj.PayrollEntities_Id= $scope.PayrollEntities_Id == 0 ? null : $scope.PayrollEntities_Id;
                $scope.tempobj.Operators_Id= $scope.Operators_Id == 0 ? null : $scope.Operators_Id;
                $scope.tempobj.FixedAmount=$scope.FixedAmount == "" ? null : $scope.FixedAmount;
                $scope.FormulaDetailsArray.push($scope.tempobj);
            }
        }


        /* THIS IS OPENING POP WINDOW FORM LIST FOR ADD,VIEW AND EDIT */
        $scope.AddPayComponent_Popup = function (ITId) {
            $scope.Id = ITId;
            // $scope.ViewIncomeTax();
            angular.element('#PaycomponentsAddModel').modal('show');
            $scope.ClearPayComponent();

        }

    
    

        $scope.FormulalistFillFunction = function () {

            $scope.FormulaPreview="";
            var Formulalist = "";
            for (count = 0; count < $scope.FormulaDetailsArray.length; count++) {

                Formulalist +=($scope.GetConditionTypeList($scope.FormulaDetailsArray[count].ConditionType_Id)+ " " + $scope.GetPayComponentList($scope.FormulaDetailsArray[count].Component_Name)+ " " + $scope.GetOperatorTypeList($scope.FormulaDetailsArray[count].Operators_Id)+ " " + ($scope.FormulaDetailsArray[count].FixedAmount)) +  " ";
                $scope.FormulaPreview=Formulalist;
            }

            return Formulalist;
        
        };

    
    
        $scope.Formulaviewlist="";

        $scope.getformulalist = function () {

            angular.element('#PayComponentFormula_AddModel').modal('hide');

            var Formulalist = "";

            for (count = 0; count < $scope.FormulaDetailsArray.length; count++) {

                Formulalist +=($scope.GetConditionTypeList($scope.FormulaDetailsArray[count].ConditionType_Id)+ " " + $scope.GetPayComponentList($scope.FormulaDetailsArray[count].Component_Name)+ " " + $scope.GetOperatorTypeList($scope.FormulaDetailsArray[count].Operators_Id)+ " " + ($scope.FormulaDetailsArray[count].FixedAmount)) +  " ";
                $scope.Formulaviewlist=Formulalist;   
            }
        
            return Formulalist;

        
        };





        $scope.AddPayComponents = function (CatId) {
            $scope.Id = CatId;
            $location.path("/PayComponentDetails/");
        };

        //This is for List page Redirect Function
        $scope.ListRedirect = function () {
            $location.path("/PayComponents/0/0");

        }

        $scope.PayComponentView=function(CatId){
            $scope.Id = CatId;
            $scope.ViewPayComponents();
            $location.path("/ViewPayComponentDetails/" + $scope.Id);
        }

        /* on click Edit tool tip in list page calling the Edit method and Open the PayComponents Details Edit 
        page show the Paycomponent details for edit process */
        $scope.PaycomponentEdit = function (CatId) {
            $scope.Id = CatId;
            $scope.ViewPayComponents();
            $location.path("/EditPayComponentDetails/" + $scope.Id);
       
        };



        $scope.PayComponentFormula_Popup = function (ITId) {
            $scope.Id = ITId;
            if($scope.Id>0){
                $scope.ViewPayComponents();
                angular.element('#PayComponentFormula_AddModel').modal('show');
            }
            else{
                angular.element('#PayComponentFormula_AddModel').modal('show');
                $scope.ClearPayComponentFormula_details();
            }

        }

        $scope.CancelPayComponent_FormulaPopup=function(){
            angular.element('#PayComponentFormula_AddModel').modal('hide');
        }


        /* on calling the list function.*/
        $scope.ListPaycomponents = function (CatId) {
            if ($routeParams.Mode == 0) {
                $scope.Id = CatId;
                $scope.rowCollection = [];
                //  $scope.EmployeeList_Search();
            }
            else if ($routeParams.Mode == 1) {

                $scope.PayComponent_Listsearch();
            }
        };

   
        /* THIS IS VIEW FUNCTION */
        $scope.ViewPayComponents = function () {

            if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                $scope.Id = $routeParams.Id
                $scope.MasterId = $routeParams.Id;
            }
            $http.get(baseUrl + 'api/PayComponent/PayComponents_View/?Id=' + $scope.Id).success(function (data) {
           

                $scope.Id=data.Id;
                $scope.MasterId=data.Id;
                $scope.Company_Name = data.Company_Id.toString();
                $scope.ViewCompanyName = data.CompanyName;
                $scope.Location_Name=data.Location_Id.toString();
                $scope.ViewLocationName=data.LocationName;
                $scope.PayComponent = data.PayComponent;
                $scope.PayComponentDisplay = data.Paycomponent_DisplayName;
                $scope.Description = data.Description;
                $scope.PayComponentType=data.PayComponentType_Id.toString();
                $scope.ViewLocationName=data.PayComponentTypeName;            
                $scope.Override  = data.Override;
                $scope.IsTaxable = data.IsTaxable;
                $scope.Arrears_Applicable = data.Arrears_Applicable;
                $scope.Reimbursement = data.Reimbursement;
                $scope.PF_Applicable = data.PF_Applicable;
                $scope.ESI_Applicable = data.ESI_Applicable;
                $scope.PT_Applicable = data.PT_Applicable;
                $scope.LWF_Applicable = data.LWF_Applicable;
                // $scope.RoundOff_Required=data.RoundOff_Required;
                //$scope.RoundOff_Frequency = data.RoundOffFrequency_Id.toString();
                //$scope.listRoundOff_Frequency = data.RoundoffFrequency;

                console.log($scope.Id);
                $http.get(baseUrl + '/api/PayComponent/PayComponentDetails_View/?Id=' + $scope.Id).success(function (PCdata) {
                   
                    console.log(PCdata);
                    $scope.CompanyLocation_ArrayList = PCdata;
                    angular.forEach($scope.CompanyLocation_ArrayList, function (value,index) {

                              
                        $http.get(baseUrl + '/api/PayComponent/PayComponentFormulaDetails_View/?Id=' + value.Id).success(function (FCdata) {
                   
                            // console.log(FCdata);
                            $scope.FormulaDetailsArray = FCdata;
                    
                        }).error(function (ITdata) {
                            $scope.error = "AN error has occured while list Income Tax!" + ITdata;
                        });
                    });
                }).error(function (ITdata) {
                    $scope.error = "AN error has occured while list Income Tax!" + ITdata;
                });
            }).error(function (ITdata) {
                $scope.error = "AN error has occured while list Income Tax!" + ITdata;
            });

        };

        $scope.DeletePayComponents = function(LRId) {
            $scope.Id = LRId;
            $scope.PayComponent_Delete();
        };

        /* THIS IS FOR DELETE FUNCTION */
        $scope.PayComponent_Delete = function () {
            var del = confirm("Do you like to activate the selected it configuration details?");
            if (del == true) {
                $http.get(baseUrl + 'api/PayComponent/PayComponentDelete/?Id=' + $scope.Id).success(function (data) {
                    alert("Pay Component Details deleted Successfully");
                    $scope.IT_Listsearchgo();
                    // window.location.href = baseUrl + "/Home/Index#/IncomeTaxList";
                }).error(function (data) {
                    $scope.error = "An error has occurred while deleting IncomeTax" + data;
                });
            }
        };


        /* 
          Calling the api method to inactived the details of the company branch
          for the  branch Id,
          and redirected to the list page.
          */
        $scope.ReInsert_PayComponentDetails = function () {
            var Ins = confirm("Do you like to activate the selected it configuration details?");
            if (Ins == true) {
                $http.get(baseUrl + 'api/PayComponent/PayComponent_Active/?Id=' + $scope.Id).success(function (data) {
                    alert("Selected Pay Component details has been activated successfully");
                    $scope.IT_Listsearchgo($scope.Id = 0);
                    //$scope.CompanyBranchMaster_ListSearch();
                    //window.location.href = baseUrl + "/Home/Index#/CompanyNewsList/0";
                }).error(function (data) {
                    $scope.error = "An error has occurred while ReInserting Pay Component Detail" + data;
                });
            };
        };

        //ReInsert popup function//
        $scope.ReInsertIt = function (comId) {
            $scope.Id = comId;
            $scope.ReInsert_PayComponentDetails();
        };



        /*calling Alert function for cannot edit inactive record */
        $scope.ErrorFunction = function () {
            alert("Inactive record cannot be edited");
        }

        $scope.PayComponents_AddEdit = function () {
            if($scope.Validationcontrols()==true){        
                var obj = {
                    Id: $scope.Id,
                    Company_Id:$scope.Company_Name,
                    Location_Id:$scope.Location_Name== 0 ? null : $scope.Location_Name,
                    PayComponent:$scope.PayComponent,
                    Paycomponent_DisplayName:$scope.PayComponentDisplay,
                    Description: $scope.Description,
                    PayComponentType_Id: $scope.PayComponentType,
                    Override: $scope.Override== 0 ? null : $scope.Override,
                    IsTaxable: $scope.IsTaxable == 0 ? null : $scope.IsTaxable,
                    Arrears_Applicable: $scope.Arrears_Applicable == 0 ? null : $scope.Arrears_Applicable,
                    Reimbursement: $scope.Reimbursement == 0 ? null : $scope.Reimbursement,
                    PF_Applicable: $scope.PF_Applicable == 0 ? null : $scope.PF_Applicable,
                    ESI_Applicable: $scope.ESI_Applicable == 0 ? null : $scope.ESI_Applicable,
                    IsTaxable: $scope.IsTaxable == 0 ? null : $scope.IsTaxable,
                    LWF_Applicable: $scope.LWF_Applicable == 0 ? null : $scope.LWF_Applicable,
                    RoundOff_Required: $scope.RoundOff_Required == 0 ? null : $scope.RoundOff_Required,
                    RoundOffFrequency_Id: $scope.RoundOffFrequency == 0 ? null : $scope.RoundOffFrequency
                };
                //console.log(obj);
                $http.post(baseUrl + '/api/PayComponent/PayComponent_AddEdit/', obj).success(function (data) {
                    console.log(data);

                    $scope.PayComponent_Id = data;
                    $scope.MasterId = data;
                    // $scope.CompanyLocation_ArrayList=[];
                    angular.forEach($scope.CompanyLocation_ArrayList, function (value, index) {
                        value.PayComponent_Id = $scope.PayComponent_Id;
                    });
              
                    console.log($scope.CompanyLocation_ArrayList);
                    $http.post(baseUrl + '/api/PayComponent/PayComponentDetails_AddEdit/', $scope.CompanyLocation_ArrayList).success(function (data1) {
                        console.log(data1);
                        $scope.PayComponentDetails_Id=data1;

                        angular.forEach($scope.FormulaDetailsArray, function (value, index) {

                            value.PayComponentDetails_Id = $scope.PayComponentDetails_Id

                        });
                        console.log($scope.FormulaDetailsArray);
                        $http.post(baseUrl + '/api/PayComponent/PayComponentFormulaDetails_AddEdit/', $scope.FormulaDetailsArray).success(function (data) {
                            //console.log(data);
                            // $scope.AddId = data;    
                        
                            $location.path("/PayComponents/" + $scope.MasterId + "/1");
                            //$scope.ListPaycomponentsPopUP($scope.MasterId);
                            //angular.element('#PaycomponentsAddModel').modal('hide');
                            //$scope.CancelPopup();
                            //$scope.AddITCustomer = [];
                            //$scope.ClearIncomeTaxPopup();
                        }).error(function (data) {
                            $scope.error = "An error has occurred while adding Formula!" + data.ExceptionMessage;
                        });
                   
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding Pay Components Details!" + data.ExceptionMessage;
                    });
          
                }).error(function (data) {
                    $scope.error = "An error has occurred while adding Pay Components!" + data.ExceptionMessage;
                });
            }
        };



        /* THIS IS FUNCTION FOR REMOVE ROW  */
        $scope.RemoveItem = function () {

            var AddLWFCustomer_Item = [];
            if ($scope.Id == undefined) {
                angular.forEach($scope.AddITCustomer, function (selectedQual) {
                    if (!selectedQual.selectedQual) {
                        AddLWFCustomer_Item.push(selectedQual);
                    }

                    $scope.AddITCustomer = AddLWFCustomer_Item;
                });
            }
            if ($scope.Id > 0) {
                angular.forEach($scope.AddITCustomer, function (selectedQual, index) {
                    if (selectedQual.selectedQual) {
                        $scope.RemoveItId = selectedQual.Id;
                        $scope.IncomeTaxCustomerDelete();
                    }
                    if (!selectedQual.selectedQual) {
                        AddLWFCustomer_Item.push(selectedQual);
                    }
                    $scope.AddITCustomer = AddLWFCustomer_Item;

                });

            }

        };


        /* THIS IS FOR DELETE FUNCTION */
        $scope.IncomeTaxCustomerDelete = function () {

            $http.get(baseUrl + 'api/IncomeTaxConfiguration/IncomeTaxCustomer_Delete/?Id=' + $scope.RemoveItId).success(function (data) {
                //   alert("Do You Want To Delete?");
                //   window.location.href = "/Home/Index#/IncomeTaxList";
            }).error(function (data) {
                $scope.error = "An error has occurred while deleting IncomeTax" + data;
            });

        };


      



        /*on click Remove IncomeTax Customer Filed its calling the 
            IncomeTax Customer delete funtion */
        $scope.RemoveIncomeTax_Item = function (rowIndex) {
            var del = confirm("Do you like to delete this Income tax Item?");
            if (del == true) {
                var IncomeTax_Item = [];

                if ($scope.Id == undefined) {
                    alert("aa");
                    //alert('Are you sure to delete this record?');
                    angular.forEach($scope.AddITCustomer, function (SelectedIt, index) {
                        if(index!=rowIndex)                        
                            IncomeTax_Item.push(SelectedIt);
                        

                    });
                    $scope.AddITCustomer = IncomeTax_Item;
                }
                else if ($scope.Id > 0) {
                    angular.forEach($scope.AddITCustomer, function (SelectedIt, index) {
                        if (index==rowIndex)  {
                            $scope.RemoveItId = SelectedIt.Id;
                            $scope.IncomeTaxCustomerDelete();

                        }
                        else 
                        {
                            IncomeTax_Item.push(SelectedIt);
                        }
                    });
                
                    $scope.AddITCustomer = IncomeTax_Item;
                }
            }
        };

   


        /* THIS IS FUNCTION FOR SELECTED ALL THE ROW TO REMOVE  */
        $scope.checkAll = function () {
            if (!$scope.selectedallQual) {
                $scope.selectedallQual = true;
            } else {
                $scope.selectedallQual = false;
            }
            angular.forEach($scope.AddITCustomer, function (row) {
                row.selectedQual = $scope.selectedallQual;
            });
        };

        /*TAX TYPE*/
        $http.get(baseUrl + 'api/Common/TaxTypeList/').success(function (data) {
            $scope.TaxTypeList = data;
        });


        $scope.GetDispalyName = function (NameId) {

            $scope.Name_Id = NameId;
            $http.get(baseUrl + 'api/Common/GetDispalyNameList/?Id=' + $scope.Name_Id).success(function (data) {
                $scope.Name_Id = data.Id;
                $scope.Name = data.Name;
                $scope.DisplayName = data.DisplayName;

            }).error(function (data) {
                $scope.error = "an error has occurred while Viewing Display Name list" + data;
            });
        };

    }
    ]);

    // This is for Pay Structure controller functions //
    EmpControllers.controller("PayStructureController", ['$scope', '$http', '$filter', '$routeParams', '$location', '$window',
        function ($scope, $http, $filter, $routeParams, $location, $window) {

            $scope.listdata = [];
            $scope.current_page = 1;
            $scope.page_size = 30;
            $scope.rembemberCurrentPage = function (p) {

                $scope.current_page = p

            }


            /* THIS IS FOR VALIDATION CONTROL */
            $scope.Validationcontrols = function () {
                if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0) {
                    alert("Please select Company");
                    return false;
                }
                else if (typeof ($scope.Paystructure) == "undefined" || $scope.Paystructure == "") {
                    alert("Please enter PayStructure");
                    return false;
                }
            
                else if (typeof ($scope.Validity_From_Month) == "undefined" || $scope.Validity_From_Month == 0) {
                    alert("Please select Validity From Month");
                    return false;
                }
                else if (typeof ($scope.Validity_From_Year) == "undefined" || $scope.Validity_From_Year == 0) {
                    alert("Please select Validity From Year");
                    return false;
                }
                else if (typeof ($scope.Validity_To_Month) == "undefined" || $scope.Validity_To_Month == 0) {
                    alert("Please select Validity To Month");
                    return false;
                }
                else if (typeof ($scope.Validity_To_Year) == "undefined" || $scope.Validity_To_Year == 0) {
                    alert("Please select Validity To Year");
                    return false;
                }
                else if (parseInt($scope.Validity_To_Year) < parseInt($scope.Validity_From_Year)) {
                    alert("Please select Validity to year greater than Validity From Year");
                    return false;
                }
            
                return true;
            };

            $scope.Id = 0;
            $scope.Company_Name = "0";
            $scope.Location_Name = "0";
      
            $scope.IsActive="1";

            $scope.Validity_FromMonthId="0",
            $scope.Validity_FromYearId="0",
            $scope.Validity_ToMonthId="0",
            $scope.Validity_ToYearId="0",
            $scope.DisplayOrder="0";
     
            $scope.Company="0";
            $scope.Location="0";
            $scope.Company_PaycomponentsList=[];
            $scope.Paycomponent_Orderlist=[];

            /* THIS IS FOR DROP DOWN LIST CHANGE ID VALUE TO NAME*/
            /*MONTH*/
            $http.get(baseUrl + '/api/Common/GetMonthList/').success(function (data) {
                $scope.getMonth = data;
            });
            /*ITSECTION CATEGORY*/
            $http.get(baseUrl + '/api/ITSection/GetITCategory/').success(function (data) {
                $scope.getITCategory = data;
            });
            /*YEAR*/
            $http.get(baseUrl + '/api/Common/GetYearList/').success(function (data) {
                $scope.getYear = data;
            });
            /*FINANCIAL FROM YEAR*/
            $http.get(baseUrl + 'api/Common/GetFYYearList/').success(function (data) {
                $scope.getFyYear = data;
            });
            /*FINANCIAL TO YEAR*/
            $http.get(baseUrl + 'api/Common/GetFYToYearList/').success(function (data) {
                $scope.getFyToYear = data;
            });
            /*FINANCIAL GROUP BY FROM YEAR*/
            $http.get(baseUrl + 'api/Common/GroupBy_FromYear/').success(function (data) {
                $scope.GroupFromYear = data;
            });
            /*FINANCIAL GROUP BY TO YEAR*/
            $http.get(baseUrl + 'api/Common/GroupBy_ToYear/').success(function (data) {
                $scope.GroupToYear = data;
            });

            /*COMPANY*/
            $http.get(baseUrl + 'api/Common/CompanyList/').success(function (data) {
                $scope.CompanyNameList = data;
            });  
        

            $scope.GetLocationName_ByCompany=function(){

                $http.get(baseUrl + 'api/Common/GetLocationName_ByCompany/?CompanyId=' + $scope.Company_Name).success(function (data) {
                    console.log(data);
                    $scope.CompanyLocationList = data;
                });
            
            }


            /*Getlocation by company*/
            $scope.GetPayComponents_List=function(){
                //alert("list");
                $http.get(baseUrl + 'api/PayStructure/GetPayComponentsList_ByCompany/?Company_Id=' + $scope.Company_Name + '&Location_Id=' + $scope.Location_Name).success(function (data) {
                    console.log(data);
                    $scope.Paycomponent_Orderlist=data;
                    $scope.Company_PaycomponentsList = data;
            
                });
            }

            $scope.GetPaycomponent_OrderList = function (component) {
                var component_Id = component;
                var Processorder_Number = 0;
                if (component > 0) {
                    Processorder_Number = $.grep($scope.Paycomponent_Orderlist, function (component) {
                        return component.Id == component_Id;
                    })[0].Processorder;
                }
                return Processorder_Number;
            };

            //$scope.GetPayComponents_List();
        




            /* THIS IS OPENING POP WINDOW FORM LIST FOR ADD,VIEW AND EDIT */

            $scope.AddPayStructurePopUP = function (CatId) {
                $scope.Id = CatId;
                //  $scope.ViewITSection();
                angular.element('#PayStructure_AddModal').modal('show');
            }
            $scope.ViewPayStructurePopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewPayStructure();
                angular.element('#PayStructure_ViewModal').modal('show');
            }
            $scope.EditPayStructurePopUP = function (CatId) {
                $scope.Id = CatId;
                $scope.ViewPayStructure();
                angular.element('#PayStructure_AddModal').modal('show');
            }
            $scope.ListPayStructurePopUP = function (CatId) {
                if ($routeParams.Id == 0) {
                    $scope.rowCollection = [];
                }
                if ($scope.Id == 0 && $scope.Mode == 1) {

                    $scope.PayStructureList();
                }
                else if ($scope.Id > 0 && $scope.Mode == 1) {

                    $scope.PayStructureList();
                }
                if (CatId > 0) {
                    $scope.Id = CatId;
                    $scope.PayStructureList();
                }
            }

            /* THIS IS FOR VIEW PROCEDURE */

            $scope.ViewPayStructure = function () {
                if ($routeParams.Id != undefined && $routeParams.Id > 0) {
                    $scope.Id = $routeParams.Id;
                    $scope.DuplicateId = $routeParams.Id;
                }

                $http.get(baseUrl + '/api/PayStructure/PayStructure_View/?Id=' + $scope.Id).success(function (data) {
                    console.log(data);
                    $scope.Id=data.Id;
                    $scope.DuplicateId = data.Id;
                    $scope.Company_Name = data.Company_Id.toString();

                    $scope.ViewCompanyName = data.CompanyName;
                    $scope.Location_Name = data.Location_Id.toString();

                    $scope.ViewLocationName = data.LocationName;

                    $scope.PayStructure=data.PayStructure;

                    $scope.Validity_FromMonthId = data.Validity_FromMonthId.toString();
                    $scope.ViewValidity_From_Month = data.FromMonthName;

                    $scope.Validity_FromYearId = data.Validity_FromYearId.toString();
                    $scope.ViewValidity_From_Year = data.FromYearName;

                    $scope.Validity_ToMonthId = data.Validity_ToMonthId.toString();
                    $scope.ViewValidity_To_Month = data.ToMonthName;

                    $scope.Validity_ToYearId = data.Validity_ToYearId.toString();
                    $scope.ViewValidity_To_Year = data.ToYearName;

                    $scope.Remarks = data.Remarks;

                    $scope.PF_Applicable = data.PF_Applicable;
                    $scope.ESI_Applicable = data.ESI_Applicable;
                    $http.get(baseUrl + '/api/PayStructure/PayStructureDetails_View/?Id=' + $scope.Id).success(function (data1) {
                        console.log(data1);
                        $scope.Company_PaycomponentsList=data1;
                    }).error(function (data) {
                        $scope.error = "AN error has occured while view" + data;
                    });

                }).error(function (data) {
                    $scope.error = "AN error has occured while view" + data;
                });
            };

            /* THIS IS FOR CLEAR FUNCTION */

            $scope.ClearPayStructurePopup = function () {
                $scope.Company_Name = "0";
                $scope.Location_Name = "0";
                $scope.PayStructure="",
                $scope.Validity_FromMonthId="0",
                $scope.Validity_FromYearId="0",
                $scope.Validity_ToMonthId="0",
                $scope.Validity_ToYearId = "0";
                $scope.Remarks = "";
                $scope.Company_PaycomponentsList = [];
            };

            $scope.PaycomponentAddList=[];

            $scope.PaycomponentAddList=[{

                Id:$scope.ChildId,
                PayStructure_Id:$scope.PayStructure_Id,
                PayComponents_Id:$scope.PayComponents_Id,
                Payslip_DisplayOrder:$scope.Payslip_DisplayOrder
            }]

            /* THIS IS FOR VALIDATION FUNCTION */
            /* Showing alert when inactive record is try to edit in the list page */
            $scope.ErrorFunction = function () {
                alert("Inactive record cannot be edited");
            }

            //This is for Add/Edit Validation fuction

            $scope.Paystructure_ValidationControls = function () {
       
                if (typeof ($scope.Company_Name) == "undefined" || $scope.Company_Name == 0) {
                    alert("Please select Company");
                    return false;
                }
                
                else if (typeof ($scope.PayStructure) == "undefined" || $scope.PayStructure =="") {
                    alert("Please enter Pay Structure");
                    return false;
                }
            
                else if (typeof ($scope.Validity_FromMonthId) == "undefined" || $scope.Validity_FromMonthId == 0) {
                    alert("Please select Validity From Month");
                    return false;
                }
                else if (typeof ($scope.Validity_FromYearId) == "undefined" || $scope.Validity_FromYearId == 0) {
                    alert("Please select Validity From Year");
                    return false;
                }
                else if (typeof ($scope.Validity_ToMonthId) == "undefined" || $scope.Validity_ToMonthId == 0) {
                    alert("Please select Validity To Month");
                    return false;
                }
                else if (typeof ($scope.Validity_ToYearId) == "undefined" || $scope.Validity_ToYearId == 0) {
                    alert("Please select Validity To Year");
                    return false;
                }
                else if (parseInt($scope.Validity_ToYearId) < parseInt($scope.Validity_FromYearId)) {
                    alert("Please enter Pay Structure Validity To Year greater than Pay Structure From Year");
                    return false;
                }

                //angular.forEach($scope.AddITCustomer, function (value1, index1) {
           
                //});
           
                return true;
        
            };


            /* THIS IS FOR ADD/EDIT PROCEDURE */
            $scope.DuplicateId = 0;
            $scope.PayStructureAddEdit = function () {
            
                if($scope.Paystructure_ValidationControls()==true){
                    var obj = {
                        Id: $scope.Id,
                        Company_Id: $scope.Company_Name,
                        Location_Id: $scope.Location_Name == 0 ? null : $scope.Location_Name,
                        PayStructure:$scope.PayStructure,
                        Validity_FromMonthId: $scope.Validity_FromMonthId,
                        Validity_FromYearId: $scope.Validity_FromYearId,
                        Validity_ToMonthId: $scope.Validity_ToMonthId,
                        Validity_ToYearId: $scope.Validity_ToYearId,
                        PF_Applicable:$scope.PF_Applicable,
                        ESI_Applicable:$scope.ESI_Applicable,
                        Remarks: $scope.Remarks
                    }
                    $http.post(baseUrl + '/api/PayStructure/PayStructure_AddEdit/', obj).success(function (data) {
                        $scope.AddId = data;
                            
                        angular.forEach($scope.Company_PaycomponentsList, function(SelectedPayComponents,index){
                                
                            if(SelectedPayComponents.SelectedPayComponents){

                                console.log(SelectedPayComponents);
                                //console.log(
                                var payobj={
                                    Id:$scope.ChildId,                                       
                                    PayComponents_Id:SelectedPayComponents.PaycomponentId,
                                    Payslip_DisplayOrder:SelectedPayComponents.Processorder
                                }

                                $scope.PaycomponentAddList.push(payobj);
                            }                               

                        });
                        // console.log($scope.PaycomponentAddList);
                        angular.forEach($scope.PaycomponentAddList, function (value, index) {
                            if (value.PayComponents_Id != undefined || value.Payslip_DisplayOrder != undefined) {

                                value.PayStructure_Id = $scope.AddId
                                 
                                console.log($scope.PaycomponentAddList);
                                $http.post(baseUrl + '/api/PayStructure/PayStructureDetails_AddEdit/',$scope.PaycomponentAddList).success(function (data) {
                                    angular.element('#PayStructure_AddModal').modal('hide');

                                    $scope.ListPayStructurePopUP($scope.AddId);

                           
                                    //$scope.ClearPaystructurePopup();

                                }).error(function (data) {
                                    $scope.error = "An error has occurred while adding Pay structure details" + data.ExceptionMessage;
                                });                            
                            
                            }
                            //else {  
                            //    $scope.Candidate_Resume_Id = null;
                            //}
                            //value.Candidate_Resume_Id = $scope.Candidate_Resume_Id
                        });  
                               
                    }).error(function (data) {
                        $scope.error = "An error has occurred while adding pay structure" + data.ExceptionMessage;
                    });
                   
                }

            };

            /* THIS IS FOR LIST PROCEDURE */
            $scope.emptydata = [];
            $scope.rowCollection = [];
            $scope.flag = 0;
            $scope.PayStructure_Name="";
            $scope.Validity_FromMonth_Id="0";
            $scope.Validity_FromYear_Id="0";
            $scope.Validity_ToMonth_Id="0";
            $scope.Validity_ToYear_Id="0";

            $scope.PayStructureList = function () {
                //alert("List");
                $scope.emptydata = [];
                $scope.rowCollection = [];
                $http.get(baseUrl + 'api/PayStructure/PayStructure_List/?Id=' + $scope.Id + '&Company_Id=' + $scope.Company
                     + '&Location_Id=' + $scope.Location
                      + '&PayStructure=' + $scope.PayStructure_Name
                       + '&IsActive=' + $scope.IsActive
                        + '&Validity_FromMonthId=' + $scope.Validity_FromMonth_Id
                        + '&Validity_FromYearId=' + $scope.Validity_FromYear_Id
                         + '&Validity_ToMonthId=' + $scope.Validity_ToMonth_Id
                          + '&Validity_ToYearId=' + $scope.Validity_ToYear_Id).success(function (data) {
                              console.log(data);
                              $scope.emptydata = [];
                              $scope.rowCollection = [];
                              $scope.rowCollection = data;
                              if ($scope.rowCollection.length > 0) {
                                  $scope.flag = 1;
                              }
                              else {
                                  $scope.flag = 0;
                              }
                          }).error(function (data) {
                              $scope.error = "AN error has occured while Listing the records!" + data;
                          })
            };

            /* THIS IS FOR LIST PROCEDURE  FOR GO BUTTON */
            $scope.PayStrutureListGo = function () {
                $scope.Id = 0;
                var ListId = $scope.Id;
                // $scope.ListITSectionPopUP(ListId);
                $scope.Mode = 1;
                $scope.PayStructureList($scope.Id, $scope.Mode);
            };

            $scope.DeletePayStructure = function (LRId) {
                $scope.Id = LRId;
                $scope.PayStructure_Delete();
            };
            $scope.rowCollection = [];

            /* THIS IS FOR DELETE PROCEDURE */
            $scope.PayStructure_Delete = function () {
                var del = confirm("Do you like to activate the selected IT Section detail?");
                if (del == true) {
                    $http.get(baseUrl + '/api/ITSection/ITSection_Delete/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected IT Section detail has been inactivated successfully");
                        $scope.ITSectionListGo();
                        // window.location.href = "/Home/Index#/ITSectionList";
                    }).error(function (data) {
                        $scope.error = "AN error has occured while deleting records" + data;
                    });
                }
            };

            $scope.Activate_Paystructure = function (ITID) {
                $scope.Id = ITID;
                $scope.PayStructure_Activate();
            };
            /* THIS IS FOR DELETE FUNCTION */
            $scope.PayStructure_Activate = function () {
                var del = confirm("Do you like to activate the selected IT Section detail?");
                if (del == true) {
                    $http.get(baseUrl + 'api/ITSection/ITSection_Activate/?Id=' + $scope.Id).success(function (data) {
                        alert("Selected IT Section detail has been activated successfully");
                        $scope.ITSectionListGo($scope.Id = 0);
                        //window.location.href = baseUrl + "/Home/Index#/OverTimeList";
                    }).error(function (data) {
                        $scope.error = "An error has occurred while deleting Employeedetails" + data;
                    });
                }
            };

            /* THIS IS FOR EDIT PROCEDURE */
            $scope.ViewRedirect = function () {
                $location.path("/ITSectionEdit/" + $scope.Id);
            }

            /* THIS IS FOR LIST PROCEDURE */
            $scope.ListRedirect = function () {
                $location.path("/PayStructureList");
            }

            $scope.CancelView = function () {
                angular.element('#PayStructure_ViewModal').modal('hide');
                $scope.ClearPayStructurePopup();
                // $scope.ITSectionListGo();
            }

            $scope.CancelPopup = function () {
                if ($scope.Id > 0) {
                    angular.element('#PayStructure_ViewModal').modal('hide');
                    $scope.ClearPayStructurePopup();
                    $scope.PayStrutureListGo();
                }

                angular.element('#PayStructure_AddModal').modal('hide');
                $scope.ClearPayStructurePopup();
                // $scope.Company_ListsearchGo();


            }

            $scope.CancelPopupButton = function () {
                angular.element('#PayStructure_AddModal').modal('hide');
                $scope.ClearPayStructurePopup();
                $scope.PayStrutureListGo();
            }

            /* THIS IS FUNCTION FOR CLOSE POP WINDOW  */
            //$scope.CancelPopup = function () {
            //    angular.element('#ITSectionModal').modal('hide');
            //    angular.element('#ITSectionViewModal').modal('hide');
            //    $scope.ClearITSectionPopup();
            //}

        }
    ]);





